import { BlockOutput, Web3APISpec, Web3APIParams, EthExecutionAPI, DataFormat } from 'web3-types';
import { Web3EventEmitter, Web3EventMap } from './web3_event_emitter.js';
import { Web3RequestManager } from './web3_request_manager.js';
export declare abstract class Web3Subscription<EventMap extends Web3EventMap, ArgsType = any, API extends Web3APISpec = EthExecutionAPI> extends Web3EventEmitter<EventMap> {
    readonly args: ArgsType;
    private readonly _requestManager;
    private readonly _lastBlock?;
    private readonly _returnFormat;
    private _id?;
    private _messageListener?;
    constructor(args: ArgsType, options: {
        requestManager: Web3RequestManager<API>;
        returnFormat?: DataFormat;
    });
    get id(): string | undefined;
    get lastBlock(): BlockOutput | undefined;
    subscribe(): Promise<void>;
    protected get returnFormat(): DataFormat;
    resubscribe(): Promise<void>;
    unsubscribe(): Promise<void>;
    protected _processSubscriptionResult(_data: unknown): void;
    protected _processSubscriptionError(_err: Error): void;
    protected _buildSubscriptionParams(): Web3APIParams<API, 'eth_subscribe'>;
}
export declare type Web3SubscriptionConstructor<API extends Web3APISpec, SubscriptionType extends Web3Subscription<any, any, API> = Web3Subscription<any, any, API>> = new (args: any, options: {
    requestManager: Web3RequestManager<API>;
    returnFormat?: DataFormat;
}) => SubscriptionType;
//# sourceMappingURL=web3_subscriptions.d.ts.map