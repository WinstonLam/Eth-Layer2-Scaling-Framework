{"version":3,"sources":["webpack://Matic/webpack/bootstrap","webpack://Matic/./node_modules/safe-buffer/index.js","webpack://Matic/./src/abstracts/base_big_number.ts","webpack://Matic/./src/abstracts/base_contract.ts","webpack://Matic/./src/abstracts/base_web3_client.ts","webpack://Matic/./src/abstracts/contract_method.ts","webpack://Matic/./src/abstracts/index.ts","webpack://Matic/./src/config.ts","webpack://Matic/./src/constant.ts","webpack://Matic/./src/default.ts","webpack://Matic/./src/enums/error_type.ts","webpack://Matic/./src/enums/index.ts","webpack://Matic/./src/enums/log_event_signature.ts","webpack://Matic/./src/implementation/bn.ts","webpack://Matic/./src/implementation/index.ts","webpack://Matic/./src/index.ts","webpack://Matic/./src/interfaces/index.ts","webpack://Matic/./src/pos/erc1155.ts","webpack://Matic/./src/pos/erc20.ts","webpack://Matic/./src/pos/erc721.ts","webpack://Matic/./src/pos/exit_util.ts","webpack://Matic/./src/pos/index.ts","webpack://Matic/./src/pos/pos_token.ts","webpack://Matic/./src/pos/root_chain.ts","webpack://Matic/./src/pos/root_chain_manager.ts","webpack://Matic/./src/services/abi_service.ts","webpack://Matic/./src/services/index.ts","webpack://Matic/./src/services/network_service.ts","webpack://Matic/./src/types/index.ts","webpack://Matic/./src/utils/abi_manager.ts","webpack://Matic/./src/utils/base_token.ts","webpack://Matic/./src/utils/bridge_client.ts","webpack://Matic/./src/utils/converter.ts","webpack://Matic/./src/utils/error_helper.ts","webpack://Matic/./src/utils/event_bus.ts","webpack://Matic/./src/utils/http_request.ts","webpack://Matic/./src/utils/index.ts","webpack://Matic/./src/utils/logger.ts","webpack://Matic/./src/utils/map_promise.ts","webpack://Matic/./src/utils/merge.ts","webpack://Matic/./src/utils/merkle_tree.ts","webpack://Matic/./src/utils/not_implemented.ts","webpack://Matic/./src/utils/promise_resolve.ts","webpack://Matic/./src/utils/proof_util.ts","webpack://Matic/./src/utils/resolve.ts","webpack://Matic/./src/utils/set_proof_api_url.ts","webpack://Matic/./src/utils/use.ts","webpack://Matic/./src/utils/web3_side_chain_client.ts","webpack://Matic/external \"@ethereumjs/block\"","webpack://Matic/external \"@ethereumjs/common\"","webpack://Matic/external \"buffer\"","webpack://Matic/external \"ethereumjs-util\"","webpack://Matic/external \"merkle-patricia-tree\"","webpack://Matic/external \"node-fetch\""],"names":[],"mappings":";;;;;;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA,aAAa,mBAAO,CAAC,sBAAQ;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAyC;AAEzC;IAAA;IAkBA,CAAC;IAjBU,kBAAI,GAAX,UAAY,KAAK;QACb,OAAO,6DAAmB,EAAW,CAAC;IAC1C,CAAC;IAeL,oBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACjBD;AAAA;AAAA;IAEI,sBAAmB,OAAe,EAAS,MAAa;QAArC,YAAO,GAAP,OAAO,CAAQ;QAAS,WAAM,GAAN,MAAM,CAAO;IAExD,CAAC;IAGL,mBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACND;AAAA;AAAA;IAEI,wBAAmB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAEjC,CAAC;IAmBD,oCAAW,GAAX,UAAa,UAAkB,EAAE,QAAgB;QAC7C,OAAO,IAAI,CAAC,cAAc,CAAC;YACvB,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,iBAAiB;YACzB,MAAM,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC9C,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;SAC3B,CAAC,CAAC,IAAI,CAAC,iBAAO;YACX,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACP,CAAC;IAQL,qBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACzCD;AAAA;AAAA;IACI,4BAAmB,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAEjC,CAAC;IAML,yBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACC;AACH;AACE;;;;;;;;;;;;;ACFlC;AAAA;AAAO,IAAM,MAAM,GAAG;IAClB,WAAW,EAAE,uCAAuC;CACvD,CAAC;;;;;;;;;;;;;ACHF;AAAA;AAAO,IAAM,UAAU,GAAG,oEAAoE,CAAC;;;;;;;;;;;;;ACA/F;AAAA;AAAA;AAAA;AAAkC;AACG;AAE9B,IAAM,aAAa,GAAG;IACzB,KAAK,EAAE,4CAAK;IACZ,GAAG;IACH,SAAS;CACZ,CAAC;;;;;;;;;;;;;ACPF;AAAA;AAAA,IAAY,UASX;AATD,WAAY,UAAU;IAClB,+CAAiC;IACjC,iDAAmC;IACnC,iCAAmB;IACnB,kDAAoC;IACpC,yEAA2D;IAC3D,gEAAkD;IAClD,4DAA8C;IAC9C,yDAA2C;AAC/C,CAAC,EATW,UAAU,KAAV,UAAU,QASrB;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACT;;;;;;;;;;;;;ACD7B;AAAA;AAAA,IAAY,mBAUX;AAVD,WAAY,mBAAmB;IAC3B,sGAAsG;IACtG,uGAAuG;IACvG,2GAAoF;IACpF,4GAAqF;IACrF,6GAAsF;IACtF,iHAA0F;IAC1F,kHAA2F;IAC3F,wHAAiG;AAErG,CAAC,EAVW,mBAAmB,KAAnB,mBAAmB,QAU9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVwC;AACI;AAE7C;IAAoC,kCAAa;IAE7C,wBAAY,KAAK;eACb,iBAAO;IACX,CAAC;IAED,iCAAQ,GAAR,UAAS,IAAK;QACV,OAAO,6DAAmB,EAAU,CAAC;IACzC,CAAC;IAED,iCAAQ,GAAR;QACI,OAAO,6DAAmB,EAAU,CAAC;IACzC,CAAC;IAED,iCAAQ,GAAR,UAAS,IAAK;QACV,OAAO,6DAAmB,EAAU,CAAC;IACzC,CAAC;IAED,4BAAG,GAAH,UAAI,KAAoB;QACpB,OAAO,6DAAmB,EAAiB,CAAC;IAChD,CAAC;IAED,4BAAG,GAAH,UAAI,KAAoB;QACpB,OAAO,6DAAmB,EAAiB,CAAC;IAChD,CAAC;IAED,4BAAG,GAAH,UAAI,KAAoB;QACpB,OAAO,6DAAmB,EAAiB,CAAC;IAChD,CAAC;IAED,4BAAG,GAAH,UAAI,KAAoB;QACpB,OAAO,6DAAmB,EAAiB,CAAC;IAChD,CAAC;IAED,4BAAG,GAAH,UAAI,KAAoB;QACpB,OAAO,6DAAmB,EAAW,CAAC;IAC1C,CAAC;IAED,2BAAE,GAAF,UAAG,KAAoB;QACnB,OAAO,6DAAmB,EAAW,CAAC;IAE1C,CAAC;IAED,4BAAG,GAAH,UAAI,KAAoB;QACpB,OAAO,6DAAmB,EAAW,CAAC;IAE1C,CAAC;IAED,2BAAE,GAAF,UAAG,KAAoB;QACnB,OAAO,6DAAmB,EAAW,CAAC;IAE1C,CAAC;IAED,2BAAE,GAAF,UAAG,KAAoB;QACnB,OAAO,6DAAmB,EAAW,CAAC;IAC1C,CAAC;IACL,qBAAC;AAAD,CAAC,CAxDmC,wDAAa,GAwDhD;;;;;;;;;;;;;;AC3DD;AAAA;AAAA;AAAA;AAAqB;;;;;;;;;;;;;ACArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AAElB;AACA;AACF;AACO;AACL;AACG;AACC;AACD;AAEZ,qHAAa,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACX7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCAAyB;AACA;AACY;AACM;AACN;AACA;AACC;AACT;AACO;AACD;AACX;AACiB;AACH;AACC;AACF;AACA;AACb;AACQ;AACE;AACa;AACF;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBgC;AACnC;AACQ;AAI/C;IAA6B,2BAAQ;IAQjC,iBACI,YAAoB,EACpB,QAAiB,EACjB,MAA6C,EAC7C,YAAiC;eAEjC,kBAAM;YACF,QAAQ;YACR,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,cAAc;YACpB,UAAU,EAAE,KAAK;SACpB,EAAE,MAAM,EAAE,YAAY,CAAC;IAE5B,CAAC;IAjBD,sBAAI,kCAAa;aAAjB;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;QAC5C,CAAC;;;OAAA;IAiBO,6BAAW,GAAnB,UAAoB,KAAa;QAC7B,IAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;QACrC,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE;YAClB,OAAO,6DAAc,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;SAC3C;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;;OAQG;IACH,4BAAU,GAAV,UAAW,WAAmB,EAAE,OAAoB,EAAE,MAA2B;QAAjF,iBASC;QARG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,WAAW,EACX,WAAW,EACX,gDAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAC3B,CAAC;YACF,OAAO,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACH,+BAAa,GAAb,UAAc,WAAmB,EAAE,MAA2B;QAA9D,iBAaC;QAZG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QAEnC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACrE,YAAQ,GAAsB,MAAM,GAA5B,EAAE,gBAAgB,GAAI,MAAM,GAAV,CAAW;YAC5C,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,kBAAkB,EAClB,WAAW,EACX,gBAAgB,CACnB,CAAC;YACF,OAAO,KAAI,CAAC,WAAW,CAAU,MAAM,EAAE,MAAM,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IAEP,CAAC;IAEO,6BAAW,GAAnB,UAAoB,uBAAwC,EAAE,MAA0B;QAAxF,iBAYC;QAXG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE7B,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,uBAAuB,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YAClE,YAAQ,GAAsB,MAAM,GAA5B,EAAE,gBAAgB,GAAI,MAAM,GAAV,CAAW;YAC5C,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,mBAAmB,EACnB,gBAAgB,EAChB,IAAI,CACP,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACH,4BAAU,GAAV,UAAW,MAA2B;QAClC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE7B,OAAO,IAAI,CAAC,WAAW,CACnB,IAAI,CAAC,mBAAmB,EAAE,EAAE,MAAM,CACrC,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACH,uCAAqB,GAArB,UAAsB,MAA2B;QAC7C,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC;QACxC,IAAM,WAAW,GAAG,iDAAiD,CAAC;QACtE,OAAO,IAAI,CAAC,WAAW,CACnB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE,MAAM,CACxC,CAAC;IACN,CAAC;IAED;;;;;;;OAOG;IACH,yBAAO,GAAP,UAAQ,KAA6B,EAAE,MAA2B;QAC9D,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,WAAW,CAAC;YACpB,OAAO,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC;YACvB,QAAQ,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC;YACzB,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,IAAI,EAAE,KAAK,CAAC,IAAI;SACnB,EAAE,MAAM,CAAC,CAAC;IACf,CAAC;IAED;;;;;;;OAOG;IACH,6BAAW,GAAX,UAAY,KAAkC,EAAE,MAA2B;QACvE,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAEzB,YAAQ,GAAiC,KAAK,SAAtC,EAAE,OAAO,GAAwB,KAAK,QAA7B,EAAE,IAAI,GAAkB,KAAK,KAAvB,EAAE,WAAW,GAAK,KAAK,YAAV,CAAW;QACvD,IAAM,QAAQ,GAAG,gDAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACpC,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CACnD;YACI,QAAQ,CAAC,GAAG,CAAC,WAAC,IAAI,uDAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAlB,CAAkB,CAAC;YACrC,OAAO,CAAC,GAAG,CAAC,WAAC,IAAI,uDAAS,CAAC,KAAK,CAAC,CAAC,CAAC,EAAlB,CAAkB,CAAC;YACpC,IAAI,IAAI,QAAQ;SACnB,EACD,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,CAAC,CACtC,CAAC;QAEF,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAChC,WAAW,EACX,IAAI,CAAC,aAAa,CAAC,OAAO,EAC1B,WAAW,EACX,MAAM,CACT,CAAC;IAEN,CAAC;IAED;;;;;;;;OAQG;IACH,+BAAa,GAAb,UAAc,OAAoB,EAAE,MAAmB,EAAE,MAA2B;QAApF,iBAWC;QAVG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAEpC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,gBAAgB,EAChB,gDAAS,CAAC,KAAK,CAAC,OAAO,CAAC,EACxB,gDAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAC1B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IACH,mCAAiB,GAAjB,UAAkB,QAAuB,EAAE,OAAsB,EAAE,MAA2B;QAA9F,iBAkBC;QAjBG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAExC,IAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAC;YAC9B,OAAO,gDAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QACH,IAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,WAAC;YAC9B,OAAO,gDAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,eAAe,EACf,WAAW,EACX,YAAY,CACf,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACH,8BAAY,GAAZ,UAAa,mBAA2B,EAAE,MAA2B;QACjE,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAElC,OAAO,IAAI,CAAC,eAAe,CACvB,mBAAmB,EACnB,0DAAmB,CAAC,eAAe,EACnC,KAAK,EACL,MAAM,CACT,CAAC;IACN,CAAC;IAED;;;;;;;;;OASG;IACH,oCAAkB,GAAlB,UAAmB,mBAA2B,EAAE,MAA2B;QACvE,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC;QAExC,OAAO,IAAI,CAAC,eAAe,CACvB,mBAAmB,EACnB,0DAAmB,CAAC,eAAe,EACnC,IAAI,EACJ,MAAM,CACT,CAAC;IACN,CAAC;IAED;;;;;;;OAOG;IACH,kCAAgB,GAAhB,UAAiB,mBAA2B,EAAE,MAA2B;QACrE,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;QAGtC,OAAO,IAAI,CAAC,eAAe,CACvB,mBAAmB,EACnB,0DAAmB,CAAC,oBAAoB,EACxC,KAAK,EACL,MAAM,CACT,CAAC;IACN,CAAC;IAED;;;;;;;;;OASG;IACH,wCAAsB,GAAtB,UAAuB,mBAA2B,EAAE,MAA2B;QAC3E,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;QAG5C,OAAO,IAAI,CAAC,eAAe,CACvB,mBAAmB,EACnB,0DAAmB,CAAC,oBAAoB,EACxC,IAAI,EACJ,MAAM,CACT,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACH,kCAAgB,GAAhB,UAAiB,MAAc;QAC3B,OAAO,IAAI,CAAC,WAAW,CACnB,MAAM,EAAE,0DAAmB,CAAC,eAAe,CAC9C,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACH,sCAAoB,GAApB,UAAqB,MAAc;QAC/B,OAAO,IAAI,CAAC,WAAW,CACnB,MAAM,EAAE,0DAAmB,CAAC,oBAAoB,CACnD,CAAC;IACN,CAAC;IAED;;;;;;;OAOG;IACH,0BAAQ,GAAR,UAAS,KAA8B,EAAE,MAA2B;QAChE,OAAO,IAAI,CAAC,eAAe,CACvB,KAAK,EAAE,MAAM,CAChB,CAAC;IACN,CAAC;IACL,cAAC;AAAD,CAAC,CApV4B,mDAAQ,GAoVpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1VyD;AACnB;AAEoB;AACX;AAGhD;IAA2B,yBAAQ;IAE/B,eACI,YAAoB,EACpB,QAAiB,EACjB,MAA6C,EAC7C,YAAiC;eAEjC,kBAAM;YACF,QAAQ;YACR,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,YAAY;YAClB,UAAU,EAAE,KAAK;SACpB,EAAE,MAAM,EAAE,YAAY,CAAC;IAC5B,CAAC;IAED,0BAAU,GAAV,UAAW,WAAmB,EAAE,MAA2B;QAA3D,iBAQC;QAPG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,WAAW,EACX,WAAW,CACd,CAAC;YACF,OAAO,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACH,4BAAY,GAAZ,UAAa,WAAmB,EAAE,MAAwC;QAA1E,iBAcC;QAdiC,oCAAwC;QACtE,IAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAE7C,IAAM,gBAAgB,GAAG,cAAc,CAAC,CAAC,CAAC,wDAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEtG,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YAC3D,oBAAgB,GAAc,MAAM,GAApB,EAAE,QAAQ,GAAI,MAAM,GAAV,CAAW;YAC5C,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,WAAW,EACX,WAAW,EACX,gBAAgB,CACnB,CAAC;YACF,OAAO,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,uBAAO,GAAP,UAAQ,MAAmB,EAAE,MAAsC;QAAnE,iBAkBC;QAlB4B,oCAAsC;QAC/D,IAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAE7C,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YACjD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,iDAAU,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,CAAC;SACnE;QAED,IAAM,gBAAgB,GAAG,cAAc,CAAC,CAAC,CAAC,wDAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAEtG,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YAC3D,oBAAgB,GAAc,MAAM,GAApB,EAAE,QAAQ,GAAI,MAAM,GAAV,CAAW;YAC5C,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,SAAS,EACT,gBAAgB,EAChB,gDAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAC1B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0BAAU,GAAV,UAAW,MAAsC;QAAtC,oCAAsC;QAC7C,OAAO,IAAI,CAAC,OAAO,CACf,4CAAU,EACR,MAAM,CACX,CAAC;IACN,CAAC;IAED;;;;;;;;OAQG;IACH,uBAAO,GAAP,UAAQ,MAAmB,EAAE,WAAmB,EAAE,MAA2B;QACzE,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE7B,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CACnD,CAAC,gDAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EACzB,CAAC,SAAS,CAAC,CACd,CAAC;QACF,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAChC,WAAW,EACX,IAAI,CAAC,aAAa,CAAC,OAAO,EAC1B,WAAW,EACX,MAAM,CACT,CAAC;IACN,CAAC;IAEO,6BAAa,GAArB,UAAsB,MAAmB,EAAE,WAAmB,EAAE,MAA+B;QAA/F,iBAQC;QAR+D,oCAA+B;QAC3F,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAGlC,MAAM,CAAC,KAAK,GAAG,gDAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,EAAE,WAAW,CAAC,CAAC,IAAI,CAAC,gBAAM;YAC3E,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACH,6BAAa,GAAb,UAAc,MAAmB,EAAE,MAA2B;QAA9D,iBAWC;QAVG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAGpC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,UAAU,EACV,gDAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAC1B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,6BAAa,GAArB,UAAsB,mBAA2B,EAAE,MAAe,EAAE,MAAmC;QAAvG,iBAaC;QAbmE,oCAAmC;QACnG,IAAM,cAAc,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;YAC9C,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,0DAAmB,CAAC,aAAa,CAAC;QAElE,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CACpC,mBAAmB,EACnB,cAAc,EACd,MAAM,CACT,CAAC,IAAI,CAAC,iBAAO;YACV,OAAO,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAC7B,OAAO,EAAE,MAAM,CAClB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACH,4BAAY,GAAZ,UAAa,mBAA2B,EAAE,MAA+B;QACrE,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAElC,OAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAClE,CAAC;IAED;;;;;;;;;OASG;IACH,kCAAkB,GAAlB,UAAmB,mBAA2B,EAAE,MAA+B;QAC3E,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC;QAExC,OAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IACjE,CAAC;IAED;;;;;;OAMG;IACH,gCAAgB,GAAhB,UAAiB,UAAkB;QAC/B,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,0DAAmB,CAAC,aAAa,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;;;;OAQG;IACH,wBAAQ,GAAR,UAAS,MAAmB,EAAE,EAAU,EAAE,MAA2B;QACjE,OAAO,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAEL,YAAC;AAAD,CAAC,CAzM0B,mDAAQ,GAyMlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/MyD;AACnB;AAGQ;AAE/C;IAA4B,0BAAQ;IAGhC,gBACI,YAAoB,EACpB,QAAiB,EACjB,MAA6C,EAC7C,YAAiC;eAEjC,kBAAM;YACF,QAAQ;YACR,OAAO,EAAE,YAAY;YACrB,IAAI,EAAE,aAAa;YACnB,UAAU,EAAE,KAAK;SACpB,EAAE,MAAM,EAAE,YAAY,CAAC;IAC5B,CAAC;IAEO,8BAAa,GAArB,UAAsB,QAAQ;QAC1B,IAAI,QAAQ,CAAC,MAAM,GAAG,EAAE,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SAC1D;QACD,OAAO,QAAQ,CAAC,GAAG,CAAC,iBAAO;YACvB,OAAO,gDAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACH,+BAAc,GAAd,UAAe,WAAmB,EAAE,OAA4B;QAAhE,iBAUC;QATG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,WAAW,EACX,WAAW,CACd,CAAC;YACF,OAAO,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,OAAO,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC,IAAI,CAAC,eAAK;YACT,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;OAQG;IACH,yCAAwB,GAAxB,UAAyB,KAAa,EAAE,WAAmB,EAAE,OAA4B;QAAzF,iBAUC;QATG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,qBAAqB,EACrB,WAAW,EACX,KAAK,CACR,CAAC;YAEF,OAAO,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,OAAO,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;OAOG;IACH,6BAAY,GAAZ,UAAa,WAAmB,EAAE,KAAgB;QAAlD,iBAgBC;QAhBiC,wCAAgB;QAC9C,OAAO,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,eAAK;YAC9C,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACtB,IAAI,KAAK,GAAG,KAAK,EAAE;gBACf,KAAK,GAAG,KAAK,CAAC;aACjB;YACD,IAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC5B,QAAQ,CAAC,IAAI,CACT,KAAI,CAAC,wBAAwB,CAAC,CAAC,EAAE,WAAW,CAAC,CAChD,CAAC;aACL;YACD,OAAO,OAAO,CAAC,GAAG,CACd,QAAQ,CACX,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,2BAAU,GAAV,UAAW,OAAe,EAAE,MAA2B;QAAvD,iBAeC;QAdG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAEhC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,aAAa,EACb,OAAO,CACV,CAAC;YACF,OAAO,OAAO,CAAC,GAAG,CAAC;gBACf,KAAI,CAAC,WAAW,CAAS,MAAM,EAAE,MAAM,CAAC;gBACxC,KAAI,CAAC,mBAAmB,EAAE;aAC7B,CAAC,CAAC,IAAI,CAAC,gBAAM;gBACV,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8BAAa,GAAb,UAAc,WAAmB,EAAE,MAA2B;QAA9D,iBAaC;QAZG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QAEnC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACrE,YAAQ,GAAsB,MAAM,GAA5B,EAAE,gBAAgB,GAAI,MAAM,GAAV,CAAW;YAC5C,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,kBAAkB,EAClB,WAAW,EACX,gBAAgB,CACnB,CAAC;YACF,OAAO,KAAI,CAAC,WAAW,CAAU,MAAM,EAAE,MAAM,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,wBAAO,GAAP,UAAQ,OAAoB,EAAE,MAA2B;QAAzD,iBAYC;QAXG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE7B,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACrE,YAAQ,GAAsB,MAAM,GAA5B,EAAE,gBAAgB,GAAI,MAAM,GAAV,CAAW;YAC5C,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,SAAS,EACT,gBAAgB,EAChB,gDAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAC3B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,2BAAU,GAAV,UAAW,MAA2B;QAAtC,iBAYC;QAXG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAEhC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACrE,YAAQ,GAAsB,MAAM,GAA5B,EAAE,gBAAgB,GAAI,MAAM,GAAV,CAAW;YAC5C,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,mBAAmB,EACnB,gBAAgB,EAChB,IAAI,CACP,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAGD,wBAAO,GAAP,UAAQ,OAAoB,EAAE,WAAmB,EAAE,MAA2B;QAC1E,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QAE7B,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CACnD,CAAC,gDAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAC1B,CAAC,SAAS,CAAC,CACd,CAAC;QACF,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAChC,WAAW,EACX,IAAI,CAAC,aAAa,CAAC,OAAO,EAC1B,WAAW,EACX,MAAM,CACT,CAAC;IACN,CAAC;IAED,4BAAW,GAAX,UAAY,QAAuB,EAAE,WAAmB,EAAE,MAA2B;QACjF,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;QAEjC,IAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAEjD,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CACnD,CAAC,WAAW,CAAC,EACb,CAAC,WAAW,CAAC,CAChB,CAAC;QACF,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAChC,WAAW,EACX,IAAI,CAAC,aAAa,CAAC,OAAO,EAC1B,WAAW,EACX,MAAM,CACT,CAAC;IACN,CAAC;IAED,8BAAa,GAAb,UAAc,OAAoB,EAAE,MAA2B;QAA/D,iBAWC;QAVG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAGpC,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,UAAU,EACV,gDAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAC3B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0CAAyB,GAAzB,UAA0B,OAAoB,EAAE,MAA2B;QAA3E,iBAWC;QAVG,IAAI,CAAC,aAAa,CAAC,2BAA2B,CAAC,CAAC;QAGhD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,sBAAsB,EACtB,gDAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAC3B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,kCAAiB,GAAjB,UAAkB,QAAuB,EAAE,MAA2B;QAAtE,iBAYC;QAXG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QAExC,IAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAEjD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,eAAe,EACf,WAAW,CACd,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,6BAAY,GAAZ,UAAa,mBAA2B,EAAE,MAA2B;QAArE,iBAYC;QAXG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAElC,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CACpC,mBAAmB,EACnB,0DAAmB,CAAC,cAAc,EAClC,KAAK,CACR,CAAC,IAAI,CAAC,iBAAO;YACV,OAAO,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAC7B,OAAO,EAAE,MAAM,CAClB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oCAAmB,GAAnB,UAAoB,mBAA2B,EAAE,KAAa,EAAE,MAA2B;QAA3F,iBAaC;QAZC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QAElC,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CACpC,mBAAmB,EACnB,0DAAmB,CAAC,cAAc,EAClC,KAAK,EACL,KAAK,CACR,CAAC,IAAI,CAAC,iBAAO;YACV,OAAO,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAC7B,OAAO,EAAE,MAAM,CAClB,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qFAAqF;IACrF,6CAA6C;IAE7C,yDAAyD;IACzD,+BAA+B;IAC/B,mDAAmD;IACnD,gBAAgB;IAChB,iCAAiC;IACjC,8BAA8B;IAC9B,eAAe;IACf,qCAAqC;IACrC,qDAAqD;IACrD,kCAAkC;IAClC,cAAc;IACd,YAAY;IACZ,uCAAuC;IACvC,cAAc;IACd,IAAI;IAEJ,mCAAkB,GAAlB,UAAmB,mBAA2B,EAAE,MAA2B;QAA3E,iBAYC;QAXG,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAC;QAExC,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CACpC,mBAAmB,EACnB,0DAAmB,CAAC,cAAc,EAClC,IAAI,CACP,CAAC,IAAI,CAAC,iBAAO;YACV,OAAO,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAC7B,OAAO,EAAE,MAAM,CAClB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,qFAAqF;IACrF,mDAAmD;IAGnD,gDAAgD;IAChD,+BAA+B;IAC/B,mDAAmD;IACnD,eAAe;IACf,0BAA0B;IAC1B,6CAA6C;IAC7C,8BAA8B;IAC9B,aAAa;IACb,UAAU;IACV,IAAI;IAEJ,iCAAgB,GAAhB,UAAiB,MAAc;QAC3B,OAAO,IAAI,CAAC,WAAW,CACnB,MAAM,EAAE,0DAAmB,CAAC,cAAc,CAC7C,CAAC;IACN,CAAC;IAED,qCAAoB,GAApB,UAAqB,MAAc;QAC/B,OAAO,IAAI,CAAC,WAAW,CACnB,MAAM,EAAE,0DAAmB,CAAC,mBAAmB,CAClD,CAAC;IACN,CAAC;IAED,wCAAuB,GAAvB,UAAwB,MAAc,EAAE,KAAa;QACjD,OAAO,IAAI,CAAC,kBAAkB,CAC1B,MAAM,EAAE,KAAK,EAAE,0DAAmB,CAAC,cAAc,CACpD,CAAC;IACN,CAAC;IAED;;;;;;;;;OASG;IACH,yBAAQ,GAAR,UAAS,OAAe,EAAE,IAAY,EAAE,EAAU,EAAE,MAA2B;QAC3E,OAAO,IAAI,CAAC,cAAc,CACtB,IAAI,EACJ,EAAE,EACF,OAAO,EACP,MAAM,CACT,CAAC;IACN,CAAC;IAEL,aAAC;AAAD,CAAC,CApV2B,mDAAQ,GAoVnC;;;;;;;;;;;;;;AC3VD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqE;AAClB;AAEb;AAEc;AACsB;AAS1E;IAQI,kBAAY,MAA8C,EAAE,SAAoB;QAC5E,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC;IACxD,CAAC;IAEO,+BAAY,GAApB,UAAqB,WAAmB,EAAE,OAA4B;QAClE,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC;QAElB,QAAQ,WAAW,EAAE;YACjB,KAAK,oEAAoE,CAAC;YAC1E,KAAK,oEAAoE;gBACrE,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAC7B,aAAG;oBACC,UAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE;wBACzD,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,oEAAoE;gBADpG,CACoG,CAC3G,CAAC;gBACF,MAAM;YAEV,KAAK,oEAAoE,CAAC;YAC1E,KAAK,oEAAoE;gBACrE,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAC7B,aAAG;oBACC,UAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE;wBACzD,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,oEAAoE;gBADpG,CACoG,CAC3G,CAAC;gBACF,MAAM;YAEV;gBACI,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,aAAG,IAAI,UAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE,EAAzD,CAAyD,CAAC,CAAC;SAC3G;QACD,IAAI,QAAQ,GAAG,CAAC,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC/C;QACD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,oCAAiB,GAAzB,UAA0B,WAAmB,EAAE,OAA4B;QACzE,IAAI,UAAU,GAAG,EAAE,CAAC;QAEpB,QAAQ,WAAW,EAAE;YACjB,KAAK,oEAAoE,CAAC;YAC1E,KAAK,oEAAoE;gBACvE,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAC1B,UAAC,CAAC,EAAE,GAAG,EAAE,KAAK;oBACV,QAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE;wBAC3D,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,oEAAoE,CAAC;wBACrG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC;gBAFnC,CAEmC,EAAE,EAAE,CAC9C,CAAC;gBACF,MAAM;YAEV,KAAK,oEAAoE,CAAC;YAC1E,KAAK,oEAAoE;gBACrE,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAC9B,UAAC,CAAC,EAAE,GAAG,EAAE,KAAK;oBACV,QAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE;wBAC3D,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,oEAAoE,CAAC;wBACrG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC;gBAFnC,CAEmC,EAAE,EAAE,CAC9C,CAAC;gBACF,MAAM;YAER,KAAK,oEAAoE;gBACrE,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAC9B,UAAC,CAAC,EAAE,GAAG,EAAE,KAAK;oBACV,QAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,oEAAoE;wBACtG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,oEAAoE,CAAC;wBACrG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC;gBAFnC,CAEmC,EAAE,EAAE,CAC9C,CAAC;gBACF,MAAM;YAER;gBACE,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAC9B,UAAC,CAAC,EAAE,GAAG,EAAE,KAAK;oBACV,QAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,WAAW,EAAE,CAAC;wBAC5D,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC;gBADnC,CACmC,EAAE,EAAE,CAC9C,CAAC;SACL;QACD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC/C;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;IAEC,oCAAiB,GAAjB,UAAkB,UAAkB;QAChC,OAAO,OAAO,CAAC,GAAG,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE;YAClC,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,UAAU,CAAC;SAC/C,CAAC,CAAC,IAAI,CAAC,gBAAM;YACV,OAAO;gBACH,cAAc,EAAE,MAAM,CAAC,CAAC,CAAC;gBACzB,aAAa,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW;aACpB,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,kCAAe,GAAvB,UAAwB,IAAqB;QACzC,gEAAgE;QAChE,OAAO,IAAI,uCAAK,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,GAAG,CACxC,IAAI,uCAAK,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CACnC,CAAC;IACN,CAAC;IAED,iCAAc,GAAd,UAAe,UAAkB;QAAjC,iBAQC;QAPG,OAAO,IAAI,CAAC,iBAAiB,CACzB,UAAU,CACb,CAAC,IAAI,CAAC,gBAAM;YACT,OAAO,KAAI,CAAC,eAAe,CACvB,MAAM,CACT,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;;;;;OAUG;IACK,mCAAgB,GAAxB,UAAyB,aAAqB;QAA9C,iBAyBC;QAxBG,mDAAmD;QACnD,IAAI,eAA8B,CAAC;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC,sBAAsB,CACxC,aAAa,CAChB,CAAC,IAAI,CAAC,qBAAW;YACd,eAAe,GAAG,WAAW,CAAC;YAC9B,OAAO,KAAI,CAAC,SAAS,CAAC,MAAM,CACxB,cAAc,EACd,gDAAS,CAAC,KAAK,CAAC,WAAW,CAAC,CAC/B,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACV,OAAO,MAAM,CAAC,IAAI,EAAkB,CAAC;QACzC,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAa;YACjB,OAAO;gBACH,sEAAsE;gBACtE,iBAAiB,EAAE,eAAe;gBAClC,iBAAiB;gBACjB,yBAAyB;gBACzB,GAAG,EAAE,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE;gBACjC,6BAA6B;gBAC7B,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,QAAQ,EAAE;aACtB,CAAC;QACxB,CAAC,CAAC,CAAC;IAEP,CAAC;IAEO,0CAAuB,GAA/B,UAAgC,aAAqB;QAArD,iBAeC;QAdG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;QACtD,OAAO,iDAAO,CAAC,OAAO,CAAC,gBAAgB,CACnC,IAAI,CAAC,MAAM,CAAC,OAAO,EACnB,aAAa,CAChB,CAAC,IAAI,CAAC,qBAAW;YACd,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAC;YACnE,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE;gBAC1F,MAAM,KAAK,CAAC,mBAAmB,CAAC,CAAC;aACpC;YACD,OAAO,WAAW,CAAC;QACvB,CAAC,CAAC,CAAC,KAAK,CAAC,aAAG;YACR,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAAC;YACzD,OAAO,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,gCAAa,GAArB,UAAsB,aAAqB,EAAE,aAA6B;QACtE,OAAO,gDAAS,CAAC,eAAe,CAC5B,IAAI,CAAC,YAAY,EACjB,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,EACjC,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,EAAE,CAAC,EAC/B,QAAQ,CAAC,aAAa,GAAG,EAAE,EAAE,EAAE,CAAC,CACnC,CAAC;IACN,CAAC;IAEO,uCAAoB,GAA5B,UAA6B,aAAqB,EAAE,aAA6B;QAAjF,iBAgBC;QAdG,OAAO,iDAAO,CAAC,OAAO,CAAC,QAAQ,CAC3B,IAAI,CAAC,MAAM,CAAC,OAAO,EACnB,aAAa,CAAC,KAAK,EACnB,aAAa,CAAC,GAAG,EACjB,aAAa,CAChB,CAAC,IAAI,CAAC,oBAAU;YACb,IAAI,CAAC,UAAU,EAAE;gBACb,MAAM,KAAK,CAAC,mBAAmB,CAAC,CAAC;aACpC;YACD,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACvD,OAAO,UAAU,CAAC;QACtB,CAAC,CAAC,CAAC,KAAK,CAAC,WAAC;YACN,OAAO,KAAI,CAAC,aAAa,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACP,CAAC;IAED,sCAAmB,GAAnB,UAAoB,UAAkB,EAAE,WAAmB,EAAE,MAAe,EAAE,KAAS;QAAvF,iBAqGC;QArG6E,iCAAS;QAEnF,IAAI,MAAM,IAAI,CAAC,iDAAO,CAAC,OAAO,EAAE;YAC5B,IAAI,+DAAW,CAAC,4CAAU,CAAC,cAAc,CAAC,CAAC,KAAK,EAAE,CAAC;SACtD;QAED,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;SACzD;QAED,IAAI,aAAqB,EACrB,aAA6B,EAC7B,OAA4B,EAC5B,KAA4B,EAC5B,UAAU,CAAC;QAEf,OAAO,IAAI,CAAC,iBAAiB,CACzB,UAAU,CACb,CAAC,IAAI,CAAC,mBAAS;YACZ,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE;gBAClC,MAAM,IAAI,KAAK,CACX,mDAAmD,CACtD,CAAC;aACL;YAED,kDAAkD;YAClD,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC;YACxC,oDAAoD;YACpD,sCAAsC;YACtC,OAAO,OAAO,CAAC,GAAG,CAAC;gBACf,KAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC;gBACnD,KAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,aAAa,CAAC;aAC3D,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACT,OAAO,GAAW,MAAM,GAAjB,EAAE,KAAK,GAAI,MAAM,GAAV,CAAW;YAC1B,+DAA+D;YAC/D,OAAO,CACH,MAAM,CAAC,CAAC,CAAC,KAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClD,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAC3C,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,6BAAmB;YACvB,aAAa,GAAG,mBAAmB,CAAC;YACpC,6BAA6B;YAC7B,OAAO,CACH,MAAM,CAAC,CAAC,CAAC,KAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;gBAC9D,KAAI,CAAC,aAAa,CAAC,aAAa,EAAE,aAAa,CAAC,CACvD,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,0BAAgB;YACpB,UAAU,GAAG,gBAAgB,CAAC;YAC9B,+BAA+B;YAC/B,OAAO,gDAAS,CAAC,eAAe,CAC5B,OAAO,EACP,KAAK,EACL,KAAI,CAAC,YAAY,EACjB,KAAI,CAAC,kBAAkB,CAC1B,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,YAAiB;YACtB,4CAA4C;YAE5C,4BAA4B;YAC5B,IAAG,KAAK,GAAG,CAAC,EAAE;gBACZ,IAAM,UAAU,GAAG,KAAI,CAAC,iBAAiB,CACvC,WAAW,EAAE,OAAO,CACrB,CAAC;gBAEF,IAAG,KAAK,IAAI,UAAU,CAAC,MAAM,EAAE;oBAC7B,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;iBAClF;gBAED,OAAO,KAAI,CAAC,cAAc,CACxB,aAAa,CAAC,iBAAiB,CAAC,QAAQ,EAAE,EAC1C,UAAU,EACV,aAAa,EACb,KAAK,CAAC,SAAS,EACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EACnD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAC/C,gDAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,cAAc;gBAClD,YAAY,CAAC,WAAW,EACxB,YAAY,CAAC,IAAI,EACjB,UAAU,CAAC,KAAK,CAAC,CAClB,CAAC;aACH;YAED,wBAAwB;YACxB,IAAM,QAAQ,GAAG,KAAI,CAAC,YAAY,CAC9B,WAAW,EAAE,OAAO,CACvB,CAAC;YAEF,OAAO,KAAI,CAAC,cAAc,CACtB,aAAa,CAAC,iBAAiB,CAAC,QAAQ,EAAE,EAC1C,UAAU,EACV,aAAa,EACb,KAAK,CAAC,SAAS,EACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EACnD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAC/C,gDAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,cAAc;YAClD,YAAY,CAAC,WAAW,EACxB,YAAY,CAAC,IAAI,EACjB,QAAQ,CACX,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+CAA4B,GAA5B,UAA6B,UAAkB,EAAE,WAAmB,EAAE,MAAe;QAArF,iBA8ED;QA5EG,IAAI,MAAM,IAAI,CAAC,iDAAO,CAAC,OAAO,EAAE;YAC5B,IAAI,+DAAW,CAAC,4CAAU,CAAC,cAAc,CAAC,CAAC,KAAK,EAAE,CAAC;SACtD;QAED,IAAI,aAAqB,EACrB,aAA6B,EAC7B,OAA4B,EAC5B,KAA4B,EAC5B,UAAU,CAAC;QAEf,OAAO,IAAI,CAAC,iBAAiB,CACzB,UAAU,CACb,CAAC,IAAI,CAAC,mBAAS;YACZ,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE;gBAClC,MAAM,IAAI,KAAK,CACX,mDAAmD,CACtD,CAAC;aACL;YAED,kDAAkD;YAClD,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC;YACxC,oDAAoD;YACpD,sCAAsC;YACtC,OAAO,OAAO,CAAC,GAAG,CAAC;gBACf,KAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC;gBACnD,KAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,aAAa,CAAC;aAC3D,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACT,OAAO,GAAW,MAAM,GAAjB,EAAE,KAAK,GAAI,MAAM,GAAV,CAAW;YAC1B,+DAA+D;YAC/D,OAAO,CACH,MAAM,CAAC,CAAC,CAAC,KAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,CAAC,CAAC;gBAClD,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAC3C,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,6BAAmB;YACvB,aAAa,GAAG,mBAAmB,CAAC;YACpC,6BAA6B;YAC7B,OAAO,CACH,MAAM,CAAC,CAAC,CAAC,KAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;gBAC9D,KAAI,CAAC,aAAa,CAAC,aAAa,EAAE,aAAa,CAAC,CACvD,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,0BAAgB;YACpB,UAAU,GAAG,gBAAgB,CAAC;YAC9B,+BAA+B;YAC/B,OAAO,gDAAS,CAAC,eAAe,CAC5B,OAAO,EACP,KAAK,EACL,KAAI,CAAC,YAAY,EACjB,KAAI,CAAC,kBAAkB,CAC1B,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,YAAiB;YACtB,IAAM,UAAU,GAAG,KAAI,CAAC,iBAAiB,CACrC,WAAW,EAAE,OAAO,CACvB,CAAC;YACF,IAAM,QAAQ,GAAY,EAAE,CAAC;YAE7B,6CAA6C;YAC7C,KAAuB,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,EAAC;gBAA7B,IAAM,QAAQ;gBACjB,QAAQ,CAAC,IAAI,CACX,KAAI,CAAC,cAAc,CACjB,aAAa,CAAC,iBAAiB,CAAC,QAAQ,EAAE,EAC1C,UAAU,EACV,aAAa,EACb,KAAK,CAAC,SAAS,EACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EACnD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAC/C,gDAAS,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE,cAAc;gBAClD,YAAY,CAAC,WAAW,EACxB,YAAY,CAAC,IAAI,EACjB,QAAQ,CACT,CACF,CAAC;aACH;YAED,OAAO,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IAES,iCAAc,GAAtB,UACI,YAAY,EACZ,eAAe,EACf,WAAW,EACX,SAAS,EACT,gBAAgB,EAChB,YAAY,EACZ,OAAO,EACP,kBAAkB,EAClB,IAAI,EACJ,QAAQ;QAER,OAAO,mEAAW,CACd,mDAAG,CAAC,MAAM,CAAC;YACP,YAAY;YACZ,eAAe;YACf,WAAW;YACX,SAAS;YACT,mEAAW,CAAC,gBAAgB,CAAC;YAC7B,mEAAW,CAAC,YAAY,CAAC;YACzB,mEAAW,CAAC,OAAO,CAAC;YACpB,mEAAW,CAAC,mDAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;YAC3C,mEAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;YAC5D,QAAQ;SACX,CAAC,CACL,CAAC;IACN,CAAC;IAED,8BAAW,GAAX,UAAY,UAAU,EAAE,KAAK,EAAE,WAAW;QAA1C,iBA4CC;QA3CG,IAAI,cAAsB,EACtB,OAA4B,EAC5B,KAA4B,CAAC;QAEjC,OAAO,OAAO,CAAC,GAAG,CAAC;YACf,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE;YAClC,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,UAAU,CAAC;SACtD,CAAC,CAAC,IAAI,CAAC,gBAAM;YACV,cAAc,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACpB,OAAO,KAAI,CAAC,YAAY,CAAC,uBAAuB,CAC5C,OAAO,CAAC,WAAW,CACtB,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAW;YACf,KAAK,GAAG,WAAW,CAAC;YACpB,IAAI,CAAC,KAAI,CAAC,eAAe,CAAC,EAAE,cAAc,EAAE,cAAc,EAAE,aAAa,EAAE,OAAO,CAAC,WAAW,EAAE,CAAC,EAAE;gBAC/F,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,4CAAU,CAAC,qBAAqB,CAAC,CAAC,KAAK,EAAE,CAAC;aAC5E;YACD,OAAO,gDAAS,CAAC,eAAe,CAC5B,OAAO,EACP,KAAK,EACL,KAAI,CAAC,YAAY,EACjB,KAAI,CAAC,kBAAkB,CAC1B,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,YAAiB;YACtB,IAAI,QAAQ,CAAC;YACb,IAAM,SAAS,GAAG,EAAE,CAAC;YACrB,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,cAAI;gBAC1B,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;gBACrE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;YACzE,CAAC,CAAC,CAAC;YAEH,IAAG,KAAK,GAAG,CAAC,EAAE;gBACZ,IAAM,UAAU,GAAG,KAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;gBAChE,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;aAC9B;YAED,QAAQ,GAAG,KAAI,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;YAEnD,OAAO,KAAI,CAAC,YAAY,CAAC,YAAY,CACjC,OAAO,CAAC,WAAW,EAAE,mEAAW,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,QAAQ,CACvE,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IACL,eAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5d+B;AACwB;AAChB;AAED;AACE;AACP;AAEE;AAER;AACS;AACR;AAE7B;IAA+B,6BAA8B;IAA7D;;IA6EA,CAAC;IAzEG,wBAAI,GAAJ,UAAK,MAAwB;QAA7B,iBA+BC;QA9BG,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAE3B,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAC;YAC7B,IAAM,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;YACjD,MAAM,CAAC,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,MAAM,CAClC;gBAEI,gBAAgB,EAAE,gBAAgB,CAAC,qBAAqB;gBACxD,SAAS,EAAE,MAAM,CAAC,mBAAmB,CAAC,cAAc;aACnC,EACrB,MAAM,CACT,CAAC;YAEF,KAAI,CAAC,gBAAgB,GAAG,IAAI,oEAAgB,CACxC,KAAI,CAAC,MAAM,EACX,MAAM,CAAC,gBAAgB,CAC1B,CAAC;YAEF,IAAM,SAAS,GAAG,IAAI,qDAAS,CAC3B,KAAI,CAAC,MAAM,EACX,MAAM,CAAC,SAAS,CACnB,CAAC;YAEF,KAAI,CAAC,QAAQ,GAAG,IAAI,mDAAQ,CACxB,KAAI,CAAC,MAAM,EACX,SAAS,CACZ,CAAC;YAEF,OAAO,KAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,yBAAK,GAAL,UAAM,YAAY,EAAE,QAAkB;QAClC,OAAO,IAAI,4CAAK,CACZ,YAAY,EACZ,QAAQ,EACR,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAChC,CAAC;IACN,CAAC;IAED,0BAAM,GAAN,UAAO,YAAY,EAAE,QAAkB;QACnC,OAAO,IAAI,8CAAM,CACb,YAAY,EACZ,QAAQ,EACR,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAChC,CAAC;IACN,CAAC;IAED,2BAAO,GAAP,UAAQ,YAAY,EAAE,QAAkB;QACpC,OAAO,IAAI,gDAAO,CACd,YAAY,EACZ,QAAQ,EACR,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAChC,CAAC;IACN,CAAC;IAED,gCAAY,GAAZ,UAAa,MAAmB,EAAE,WAAmB,EAAE,MAA0B;QAC7E,OAAO,IAAI,4CAAK,CACZ,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EACrB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAChC,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;IACpD,CAAC;IAEO,iCAAa,GAArB;QACI,OAAO;YACH,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;SACzB,CAAC;IACvB,CAAC;IACL,gBAAC;AAAD,CAAC,CA7E8B,mDAAY,GA6E1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FyE;AAI1E;IAA8B,4BAA2B;IAIrD,kBACI,aAAiC,EACjC,MAA6C,EACnC,eAAoC;QAHlD,YAKI,kBAAM,aAAa,EAAE,MAAM,CAAC,SAC/B;QAHa,qBAAe,GAAf,eAAe,CAAqB;;IAGlD,CAAC;IAED,sBAAc,sCAAgB;aAA9B;YACI,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,gBAAgB,CAAC;QACnD,CAAC;;;OAAA;IAED,sBAAc,8BAAQ;aAAtB;YACI,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,QAAQ,CAAC;QAC3C,CAAC;;;OAAA;IAGD,sCAAmB,GAAnB;QAAA,iBAsBC;QArBG,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,OAAO,6DAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAChD;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC/B,aAAa,EACb,IAAI,CAAC,aAAa,CAAC,OAAO,CAC7B,CAAC,IAAI,CAAC,gBAAM;YACT,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAS;YACb,IAAI,CAAC,SAAS,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACzC;YACD,OAAO,KAAI,CAAC,gBAAgB,CAAC,MAAM,CAC/B,iBAAiB,EAAE,SAAS,CAC/B,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,+BAAqB;YACzB,OAAO,qBAAqB,CAAC,IAAI,EAAU,CAAC;QAChD,CAAC,CAAC,CAAC,IAAI,CAAC,0BAAgB;YACpB,KAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YACzC,OAAO,gBAAgB,CAAC;QAC5B,CAAC,CAAC,CAAC;IACP,CAAC;IAES,8BAAW,GAArB,UAAsB,MAAc,EAAE,cAAsB;QAA5D,iBAWC;QAVG,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAC5B,MAAM,EAAE,CAAC,EAAE,cAAc,CAC5B,CAAC,IAAI,CAAC,kBAAQ;YACX,OAAO,KAAI,CAAC,gBAAgB,CAAC,eAAe,CACxC,QAAQ,CACX,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAES,qCAAkB,GAA5B,UAA6B,MAAc,EAAE,KAAa,EAAE,cAAsB;QAAlF,iBAWD;QAVG,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAC5B,MAAM,EAAE,KAAK,EAAE,cAAc,CAChC,CAAC,IAAI,CAAC,kBAAQ;YACX,OAAO,KAAI,CAAC,gBAAgB,CAAC,eAAe,CACxC,QAAQ,CACX,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEW,kCAAe,GAAzB,UAA0B,UAAkB,EAAE,cAAsB,EAAE,MAAe,EAAE,MAA0B;QAAjH,iBAUC;QATG,OAAO,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CACpC,UAAU,EACV,cAAc,EACd,MAAM,CACT,CAAC,IAAI,CAAC,iBAAO;YACV,OAAO,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAC7B,OAAO,EAAE,MAAM,CAClB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IACL,eAAC;AAAD,CAAC,CAlF6B,gDAAS,GAkFtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFgE;AAKjE;IAA+B,6BAA2B;IAEtD,mBAAY,OAA8C,EAAE,OAAe;eACvE,kBAAM;YACF,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,WAAW;YACjB,QAAQ,EAAE,IAAI;SACjB,EAAE,OAAO,CAAC;IACf,CAAC;IAED,0BAAM,GAAN,UAAO,UAAkB;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QAC9B,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,OAAO,QAAQ,CAAC,MAAM,OAAf,QAAQ,iBAAQ,UAAU,GAAK,IAAI,UAAE;QAChD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,qCAAiB,GAAjB;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,gBAAM;YAC/C,OAAO,MAAM,CAAC,IAAI,CAAS,EAAE,EAAE,WAAW,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACP,CAAC;IAEK,0CAAsB,GAA5B,UAA6B,gBAA6B;;;;;;wBAChD,MAAM,GAAG,IAAI,4CAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBACzB,MAAM,GAAG,IAAI,4CAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBACzB,kBAAkB,GAAG,IAAI,4CAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;wBAE/C,gBAAgB,GAAG,IAAI,4CAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC;wBAE9C,KAAK,GAAG,MAAM,CAAC;wBAGJ,qBAAM,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;;wBAAhD,MAAM,GAAG,SAAuC;wBAC3B,qBAAM,MAAM,CAAC,IAAI,EAAU;;wBAAhD,kBAAkB,GAAG,SAA2B;wBAClD,GAAG,GAAG,IAAI,4CAAK,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAC1C,kBAAkB,CACrB,CAAC;;;6BAIK,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;wBACjB,IAAI,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE;4BACf,GAAG,GAAG,KAAK,CAAC;4BACZ,wBAAM;yBACT;wBACK,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;wBACZ,qBAAM,IAAI,CAAC,MAAM,CACxC,cAAc,EACd,GAAG,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,QAAQ,EAAE,CACzC;;wBAHK,kBAAkB,GAAG,SAG1B;wBACmB,qBAAM,kBAAkB,CAAC,IAAI,EAAkC;;wBAA7E,WAAW,GAAG,SAA+D;wBAE7E,WAAW,GAAG,IAAI,4CAAK,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;wBAC9C,SAAS,GAAG,IAAI,4CAAK,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;wBAEhD,IAAI,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;4BACtE,oGAAoG;4BACpG,GAAG,GAAG,GAAG,CAAC;4BACV,wBAAM;yBACT;6BAAM,IAAI,WAAW,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE;4BACzC,uDAAuD;4BACvD,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;yBACzB;6BAAM,IAAI,SAAS,CAAC,EAAE,CAAC,gBAAgB,CAAC,EAAE;4BACvC,sDAAsD;4BACtD,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;yBAC3B;;4BAEL,sBAAO,GAAG,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAC;;;;KACtC;IAEL,gBAAC;AAAD,CAAC,CAtE8B,gDAAS,GAsEvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EyD;AAG1D;IAAsC,oCAA2B;IAE7D,0BAAY,OAA8C,EAAE,OAAe;eACvE,kBAAM;YACF,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,kBAAkB;YACxB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,IAAI;SACjB,EAAE,OAAO,CAAC;IACf,CAAC;IAED,iCAAM,GAAN,UAAO,UAAkB;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QAC9B,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,OAAO,QAAQ,CAAC,MAAM,OAAf,QAAQ,iBAAQ,UAAU,GAAK,IAAI,UAAE;QAChD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,kCAAO,GAAP,UAAQ,WAAmB,EAAE,YAAoB,EAAE,WAAmB,EAAE,MAA2B;QAAnG,iBASC;QARG,OAAO,IAAI,CAAC,MAAM,CACd,YAAY,EACZ,WAAW,EACX,YAAY,EACZ,WAAW,CACd,CAAC,IAAI,CAAC,gBAAM;YACT,OAAO,KAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+BAAI,GAAJ,UAAK,WAAmB,EAAE,MAA0B;QAApD,iBAOC;QANG,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,IAAI,CAAC,gBAAM;YAC/C,OAAO,KAAI,CAAC,YAAY,CACpB,MAAM,EACN,MAAM,CACT,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0CAAe,GAAf,UAAgB,QAAgB;QAAhC,iBAMC;QALG,OAAO,IAAI,CAAC,MAAM,CACd,gBAAgB,EAAE,QAAQ,CAC7B,CAAC,IAAI,CAAC,gBAAM;YACT,OAAO,KAAI,CAAC,WAAW,CAAU,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,uBAAC;AAAD,CAAC,CA7CqC,gDAAS,GA6C9C;;;;;;;;;;;;;;AChDD;AAAA;AAAA;AAAuC;AAEvC;IAGI,oBAAY,OAAe;QACvB,IAAI,CAAC,WAAW,GAAG,IAAI,kDAAW,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAED,2BAAM,GAAN,UAAO,OAAe,EAAE,OAAe,EAAE,UAAkB,EAAE,YAAoB;QAC7E,IAAM,GAAG,GAAG,UAAG,OAAO,cAAI,OAAO,wBAAc,UAAU,cAAI,YAAY,UAAO,CAAC;QACjF,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,MAAW;YAC9C,OAAO,MAAM,CAAC,GAAG,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+BAAU,GAAV,UAAW,OAAe,EAAE,OAAe;QACvC,IAAM,GAAG,GAAG,UAAG,OAAO,cAAI,OAAO,gBAAa,CAAC;QAC/C,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACrC,CAAC;IACL,iBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACR;AAGD;AAElC;IAAA;IAGA,CAAC;IAAD,cAAC;AAAD,CAAC;AAEM,IAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;AACrC,OAAO,CAAC,GAAG,GAAG,IAAI,uDAAU,CAAC,8CAAM,CAAC,WAAW,CAAC,CAAC;;;;;;;;;;;;;ACZjD;AAAA;AAAA;AAAA;AAA0C;AACH;AAEvC;IAGI,wBAAY,OAAe;QACvB,IAAI,CAAC,WAAW,GAAG,IAAI,kDAAW,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAEO,kCAAS,GAAjB,UAAkB,OAAe,EAAE,GAAW;QAC1C,OAAO,UAAG,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,SAAG,GAAG,CAAE,CAAC;IACjE,CAAC;IAED,yCAAgB,GAAhB,UAAiB,OAAe,EAAE,WAAmB;QAEjD,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,0BAAmB,WAAW,CAAE,CAAC,CAAC;QACtE,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAIxB,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAM;YACf,IAAM,iBAAiB,GAAG,MAAM,CAAC,iBAAkC,CAAC;YACpE,IAAM,wBAAwB,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,QAAQ,CAC9E,iBAAiB,EAAE,EAAE,CACxB,CAAC,CAAC,CAAC,iBAAiB,CAAC;YACtB,MAAM,CAAC,iBAAiB,GAAG,IAAI,uCAAK,CAAC,EAAE,CAAC,wBAAwB,CAAC,CAAC;YAClE,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,iCAAQ,GAAR,UAAS,OAAe,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW;QAC7C,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,mCAA4B,KAAK,kBAAQ,GAAG,qBAAW,WAAW,CAAE,CAAC,CAAC;QAC1G,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAM,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAM;YAC7C,OAAO,MAAM,CAAC,KAAK,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IACL,qBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACnCD;AAAA;AAAA;AAAA,wCAA4C;AACC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACH7C;AAAA;AAAA;AAAA;AAAsC;AACM;AAe5C,IAAM,KAAK,GAAgB,EAAE,CAAC;AAE9B;IACI,oBAAmB,WAAmB,EAAS,OAAe;QAA3C,gBAAW,GAAX,WAAW,CAAQ;QAAS,YAAO,GAAP,OAAO,CAAQ;IAE9D,CAAC;IAED,yBAAI,GAAJ;QAAA,iBAWC;QAVG,OAAO,iDAAO,CAAC,GAAG,CAAC,UAAU,CACzB,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CACjC,CAAC,IAAI,CAAC,gBAAM;;YACT,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC;gBACnB,GAAC,KAAI,CAAC,OAAO,IAAG;oBACZ,OAAO,EAAE,MAAM;oBACf,GAAG,EAAE,EAAE;iBACV;mBACJ,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8BAAS,GAAT,UAAU,IAAY;QAClB,OAAO,iDAAO,CACV,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,EAC7C,IAAI,CACP,CAAC;IACN,CAAC;IAED,2BAAM,GAAN,UAAO,YAAoB,EAAE,UAAqB;QAAlD,iBAmBC;QAnB4B,kDAAqB;QAC9C,IAAM,oBAAoB,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;YAC9D,GAAG,CAAC,UAAU,CAAC,CAAC;QAEpB,IAAI,oBAAoB,EAAE;YACtB,IAAM,cAAc,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;YAC1D,IAAI,cAAc,EAAE;gBAChB,OAAO,wDAAc,CAAM,cAAc,CAAC,CAAC;aAC9C;SACJ;QACD,OAAO,iDAAO,CAAC,GAAG,CAAC,MAAM,CACrB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,OAAO,EACZ,UAAU,EACV,YAAY,CACf,CAAC,IAAI,CAAC,gBAAM;YACT,KAAI,CAAC,MAAM,CAAC,YAAY,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;YAC9C,OAAO,MAAM,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,2BAAM,GAAN,UAAO,YAAoB,EAAE,UAAkB,EAAE,GAAQ;QACrD,IAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC;QAC3D,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACvB,QAAQ,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;SAC7B;QACD,QAAQ,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC;IAC7C,CAAC;IACL,iBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACpED;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACO;AACb;AAEO;AAS7C;IAII,mBACc,aAAiC,EACjC,MAA4C;QAD5C,kBAAa,GAAb,aAAa,CAAoB;QACjC,WAAM,GAAN,MAAM,CAAsC;IAE1D,CAAC;IAGD,+BAAW,GAAX;QAAA,iBAgBC;QAfG,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,OAAO,uEAAc,CAAe,IAAI,CAAC,SAAgB,CAAC,CAAC;SAC9D;QACD,IAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACzC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CACrB,aAAa,CAAC,IAAI,EAClB,aAAa,CAAC,UAAU,CAC3B,CAAC,IAAI,CAAC,aAAG;YACN,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,YAAY,CAAC;gBAC/B,GAAG;gBACH,QAAQ,EAAE,aAAa,CAAC,QAAQ;gBAChC,YAAY,EAAE,aAAa,CAAC,OAAO;aACtC,CAAC,CAAC;YACH,OAAO,KAAI,CAAC,SAAS,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAES,gCAAY,GAAtB,UAAuB,MAA0B,EAAE,MAA+B;QAAlF,iBAuBC;QAvBkD,oCAA+B;QAC9E,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAE/B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC,uBAAuB,CAC/B;YACI,QAAQ,EAAE,MAAM;YAChB,OAAO,EAAE,IAAI;YACb,MAAM;YACN,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ;SACxC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACV,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YAC/C,IAAI,MAAM,CAAC,iBAAiB,EAAE;gBAC1B,OAAO,oDAAK,CAAC,MAAM,EAAE;oBACjB,IAAI,EAAE,MAAM,CAAC,SAAS,EAAE;oBACxB,EAAE,EAAE,MAAM,CAAC,OAAO;iBACQ,CAAC,CAAC;aACnC;YACD,IAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAC7B,MAAM,CACT,CAAC;YACF,OAAO,YAAY,CAAC;QACxB,CAAC,CAAC,CAAC;IACX,CAAC;IAES,mCAAe,GAAzB,UAA0B,MAA+B;QAA/B,oCAA+B;QACrD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAE/B,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;QAC7C,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAEnC,OAAO,IAAI,CAAC,uBAAuB,CAC/B;YACI,QAAQ,EAAE,MAAM;YAChB,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,IAAW;YACnB,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ;SACxC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACV,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YAC1C,IAAI,MAAM,CAAC,iBAAiB,EAAE;gBAC1B,OAAO,MAAa,CAAC;aACxB;YACD,IAAM,YAAY,GAAG,MAAM,CAAC,KAAK,CAC7B,MAAM,CACT,CAAC;YACF,OAAO,YAAY,CAAC;QACxB,CAAC,CAAC,CAAC;IACX,CAAC;IAES,mCAAe,GAAzB,UAA0B,MAA+B;QAA/B,oCAA+B;QACrD,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;QAC7C,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,uBAAuB,CAC/B;YACI,QAAQ,EAAE,MAAM;YAChB,OAAO,EAAE,IAAI;YACb,MAAM,EAAE,IAAW;YACnB,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ;SACxC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACV,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YAC7C,IAAI,MAAM,CAAC,iBAAiB,EAAE;gBAC1B,OAAO,MAAa,CAAC;aACxB;YACD,OAAO,MAAM,CAAC,IAAI,CACd,MAAM,CACT,CAAC;QACN,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,qCAAiB,GAAzB,UAA0B,MAA0B;QAChD,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACrD,IAAI,yDAAW,CAAC,iDAAU,CAAC,0BAA0B,CAAC,CAAC,KAAK,EAAE,CAAC;SAClE;IACL,CAAC;IAES,+BAAW,GAArB,UAAyB,MAA0B,EAAE,MAA+B;QAApF,iBAqBC;QArBoD,oCAA+B;QAChF,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QACvC,OAAO,IAAI,CAAC,uBAAuB,CAC/B;YACI,QAAQ,EAAE,MAAM;YAChB,OAAO,EAAE,KAAK;YACd,MAAM;YACN,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ;SACxC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACV,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACjD,IAAI,MAAM,CAAC,iBAAiB,EAAE;gBAC1B,OAAO,oDAAK,CAAC,MAAM,EAAE;oBACjB,IAAI,EAAE,MAAM,CAAC,SAAS,EAAE;oBACxB,EAAE,EAAE,KAAI,CAAC,SAAS,CAAC,OAAO;iBACA,CAAC,CAAC;aACnC;YACD,OAAO,MAAM,CAAC,IAAI,CACd,MAAM,CACT,CAAC;QACN,CAAC,CAAC,CAAC;IACX,CAAC;IAES,6BAAS,GAAnB,UAAoB,QAAQ;QACxB,OAAO,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;IAC1B,CAAC;IAEO,gCAAY,GAApB,UAAqB,EAA+B;YAA7B,QAAQ,gBAAE,YAAY,oBAAE,GAAG;QAC9C,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC,OAAO,MAAM,CAAC,WAAW,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;IACjD,CAAC;IAED,sBAAc,0CAAmB;aAAjC;YACI,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC,MAAa,CAAC;YAC5D,OAAO,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC;QACvC,CAAC;;;OAAA;IAED,sBAAc,yCAAkB;aAAhC;YACI,IAAM,MAAM,GAAsB,IAAI,CAAC,MAAM,CAAC,MAAa,CAAC;YAC5D,OAAO,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC;QACtC,CAAC;;;OAAA;IAES,2CAAuB,GAAjC,UAAkC,EAAgE;YAA9D,QAAQ,gBAAE,MAAM,cAAE,QAAQ,gBAAE,OAAO;QACnE,IAAM,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;QACpF,QAAQ,GAAG,oDAAK,CAAC,aAAa,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;QAClD,IAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;QACtB,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;QAChF,IAAM,WAAW,GAAG,UAAC,MAAiC;YAClD,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC;QACF,+DAA+D;QAC/D,IAAI,OAAO,EAAE;YACD,gBAAY,GAA2B,QAAQ,aAAnC,EAAE,oBAAoB,GAAK,QAAQ,qBAAb,CAAc;YACxD,IAAM,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YACpE,IAAM,gBAAgB,GAAG,CAAC,YAAY,IAAI,oBAAoB,CAAC,CAAC;YAEhE,IAAI,CAAC,kBAAkB,IAAI,gBAAgB,EAAE;gBACzC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,iDAAU,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC,KAAK,EAAE,CAAC;aACzE;YACD,sCAAsC;YACtC,OAAO,OAAO,CAAC,GAAG,CAAC;gBACf,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;oBAChB,CAAC,CAAC,WAAW,CAAC;wBACV,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,KAAK;qBAC7C,CAAC;oBACF,CAAC,CAAC,QAAQ,CAAC,QAAQ;gBACvB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBACb,MAAM,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC;oBACpD,CAAC,CAAC,QAAQ,CAAC,KAAK;gBACpB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBACf,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO;aAC7C,CAAC,CAAC,IAAI,CAAC,gBAAM;gBACH,YAAQ,GAAoB,MAAM,GAA1B,EAAE,KAAK,GAAa,MAAM,GAAnB,EAAE,OAAO,GAAI,MAAM,GAAV,CAAW;gBAC1C,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAEpC,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACrC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;gBACvB,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;gBAC3B,OAAO,QAAQ,CAAC;YACpB,CAAC,CAAC,CAAC;SACN;QACD,OAAO,uEAAc,CAA4B,QAAQ,CAAC,CAAC;IAC/D,CAAC;IAES,iCAAa,GAAvB,UAAwB,EAAU,EAAE,MAAmB,EAAE,MAA2B;QAApF,iBAWC;QAVG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,UAAU,EACV,EAAE,EACF,gDAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAC1B,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CACpB,MAAM,EAAE,MAAM,CACjB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAES,kCAAc,GAAxB,UAAyB,IAAY,EAAE,EAAU,EAAE,OAAe,EAAE,MAA0B;QAA9F,iBAYC;QAXG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,cAAc,EACd,IAAI,EACJ,EAAE,EACF,OAAO,CACV,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CACpB,MAAM,EAAE,MAAM,CACjB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAES,gCAAY,GAAtB,UAAuB,UAAU;QAC7B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC9B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,iDAAU,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;SAC1E;IACL,CAAC;IAES,iCAAa,GAAvB,UAAwB,UAAU;QAC9B,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,iDAAU,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC,KAAK,EAAE,CAAC;SAC3E;IACL,CAAC;IAES,mCAAe,GAAzB,UAA0B,KAA8B,EAAE,MAA0B;QAApF,iBAcC;QAbG,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACnC,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAC1B,kBAAkB,EAClB,KAAK,CAAC,IAAI,EACV,KAAK,CAAC,EAAE,EACR,gDAAS,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,EAC9B,gDAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,EAC7B,KAAK,CAAC,IAAI,IAAI,IAAI,CACrB,CAAC;YACF,OAAO,KAAI,CAAC,YAAY,CACpB,MAAM,EAAE,MAAM,CACjB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,gBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACzQD;AAAA;AAAA;AAAA;AAA+C;AAET;AAEtC;IAAA;QAEI,WAAM,GAA2B,IAAI,0DAAmB,EAAE,CAAC;IAiD/D,CAAC;IA7CG;;;;;;OAMG;IACH,qCAAc,GAAd,UAAe,MAAc;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,CAC/B,MAAM,CACT,CAAC;IACN,CAAC;IAED,kCAAW,GAAX,UAAY,aAAqB;QAC7B,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAE3B,IAAM,KAAK,GAAG,IAAI,2CAAS,CAAC;YACxB,OAAO,EAAE,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,sCAAsC,CAAC;YAC5E,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,eAAe;YACrB,UAAU,EAAE,SAAS;SACxB,EAAE,MAAM,CAAC,CAAC;QAEX,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAQ;YACpC,OAAO,OAAO,CAAC,GAAG,CAAC;gBACf,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,aAAa,CAAC;gBAClD,KAAK,CAAC,aAAa,CAAC,CAChB,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CACjC;aACJ,CAAC,CAAC;QACP,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACH,WAAO,GAAiB,MAAM,GAAvB,EAAE,WAAW,GAAI,MAAM,GAAV,CAAW;YACtC,IAAM,cAAc,GAAG,oEAAoE,CAAC;YAC5F,IAAM,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,cAAc,EAA9B,CAA8B,CAAC,CAAC;YACzE,IAAI,CAAC,SAAS,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;aAClD;YACD,IAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACvF,IAAM,aAAa,GAAG,uCAAK,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,uCAAK,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;YAC3F,OAAO,IAAI,uCAAK,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,GAAG,CAChC,aAAa,CAChB,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,mBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACtDD;AAAA;AAAA;AAAiC;AAEjC;IAAA;IAkBA,CAAC;IAjBU,eAAK,GAAZ,UAAa,MAAuC;QAChD,IAAM,QAAQ,GAAG,OAAO,MAAM,CAAC;QAC/B,IAAI,QAAQ,KAAK,QAAQ,EAAE;YACvB,MAAM,GAAG,IAAI,4CAAK,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;SACjC;aAAM,IAAI,QAAQ,KAAK,QAAQ,EAAE;YAC9B,IAAK,MAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;gBACzC,OAAO,MAAM,CAAC;aACjB;YACD,MAAM,GAAG,IAAI,4CAAK,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;SACjC;QACD,IAAI,4CAAK,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACvB,OAAO,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SACrC;aACI;YACD,MAAM,IAAI,KAAK,CAAC,wBAAiB,MAAM,6BAA0B,CAAC,CAAC;SACtE;IACL,CAAC;IACL,gBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACrBD;AAAA;AAAA;AAAsC;AAGtC;IAII,qBAAY,IAAgB,EAAE,IAAK;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED,2BAAK,GAAL;QACI,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;IAED,yBAAG,GAAH;QACI,OAAO;YACH,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,IAAI,CAAC,IAAI;SACR,CAAC;IAChB,CAAC;IAEO,6BAAO,GAAf,UAAgB,IAAI;QAChB,IAAI,MAAc,CAAC;QACnB,QAAQ,IAAI,CAAC,IAAI,EAAE;YACf,KAAK,iDAAU,CAAC,cAAc;gBAC1B,MAAM,GAAG,qBAAc,IAAI,qCAAkC,CAAC;gBAC9D,MAAM;YACV,KAAK,iDAAU,CAAC,aAAa;gBACzB,MAAM,GAAG,qBAAc,IAAI,oCAAiC,CAAC;gBAC7D,MAAM;YACV,KAAK,iDAAU,CAAC,cAAc;gBAC1B,MAAM,GAAG,2DAAyD,CAAC;gBACnE,MAAM;YACV,KAAK,iDAAU,CAAC,qBAAqB;gBACjC,MAAM,GAAG,mDAAmD,CAAC;gBAC7D,MAAM;YACV,KAAK,iDAAU,CAAC,mBAAmB;gBAC/B,MAAM,GAAG,UAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,oCAAiC,CAAC;gBACrE,MAAM;YACV,KAAK,iDAAU,CAAC,kBAAkB;gBAC9B,MAAM,GAAG,iCAAiC,CAAC;gBAC3C,MAAM;YACV;gBACI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;oBACZ,IAAI,CAAC,IAAI,GAAG,iDAAU,CAAC,OAAO,CAAC;iBAClC;gBACD,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;gBACtB,MAAM;SACb;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,kBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;AC/CM,IAAM,eAAe,GAAG,UAAa,QAAiG;IACzI,IAAM,OAAO,GAAwB,IAAI,OAAO,CAAC,QAAQ,CAAQ,CAAC;IAClE,IAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;IAChC,OAAO,CAAC,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5C,OAAO,OAAO,CAAC;AACnB,CAAC,CAAC;AAEF;IAEI,kBAAY,GAAI;QAMR,YAAO,GAEX,EAAE,CAAC;QAPH,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;IACpB,CAAC;IAQD,qBAAE,GAAF,UAAG,KAAa,EAAE,EAAY;QAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE;YAC7B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SAC5B;QACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,sBAAG,GAAH,UAAI,KAAa,EAAE,EAAY;QAC3B,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACrB,IAAI,EAAE,EAAE;gBACJ,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;gBAC9C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aACxC;iBACI;gBACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;aAC5B;SACJ;IACL,CAAC;IAED,uBAAI,GAAJ,UAAK,KAAa;QAAlB,iBAQC;QARmB,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QACvB,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACzC,OAAO,OAAO,CAAC,GAAG,CACd,MAAM,CAAC,GAAG,CAAC,YAAE;YACT,IAAM,MAAM,GAAG,EAAE,CAAC,IAAI,OAAP,EAAE,iBAAM,KAAI,CAAC,IAAI,GAAK,IAAI,SAAC,CAAC;YAC3C,OAAO,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpE,CAAC,CAAC,CACL,CAAC;IACN,CAAC;IAED,0BAAO,GAAP;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IACL,eAAC;AAAD,CAAC;;;;;;;;;;;;;;AC5DD;AAAA;AAAA,IAAM,KAAK,GACP,CAAC;IACG,IAAI,IAAgC,EAAE;QAClC,OAAO,mBAAO,CAAC,8BAAY,CAAC,CAAC,OAAO,CAAC;KACxC;IACD,OAAO,MAAM,CAAC,KAAK,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC;AAGT;IAGI,qBAAY,MAAgD;QAAhD,kCAAuC,EAAS;QAF5D,YAAO,GAAG,EAAE,CAAC;QAGT,MAAM,GAAG,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;YAClC,OAAO,EAAE,MAAM;SAClB,CAAC,CAAC,CAAC,MAAM,CAAC;QAEX,IAAI,MAAM,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;SACjC;IACL,CAAC;IAED,yBAAG,GAAH,UAAO,GAAQ,EAAE,KAAU;QAApB,8BAAQ;QAAE,kCAAU;QACvB,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;YACzC,GAAG,CAAC,aAAG,IAAI,iBAAG,kBAAkB,CAAC,GAAG,CAAC,cAAI,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAE,EAA9D,CAA8D,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEzF,OAAO,KAAK,CAAC,GAAG,EAAE;YACd,MAAM,EAAE,KAAK;YACb,OAAO,EAAE;gBACL,cAAc,EAAE,kBAAkB;gBAClC,QAAQ,EAAE,kBAAkB;aAC/B;SACJ,CAAC,CAAC,IAAI,CAAC,aAAG;YACP,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAED,0BAAI,GAAJ,UAAK,GAAQ,EAAE,IAAI;QAAd,8BAAQ;QACT,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;QAEzB,OAAO,KAAK,CAAC,GAAG,EAAE;YACd,MAAM,EAAE,MAAM;YACd,OAAO,EAAE;gBACL,cAAc,EAAE,kBAAkB;gBAClC,QAAQ,EAAE,kBAAkB;aAC/B;YACD,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI;SAC3C,CAAC,CAAC,IAAI,CAAC,aAAG;YACP,OAAO,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IACL,kBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACnDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4D;AACT;AAE7B;AACM;AACH;AACD;AACM;AACD;AACE;AACH;AACa;AACZ;AACO;AACV;AACQ;AACF;AACF;AACI;AAG3B,IAAM,KAAK,GAAG;IACjB,SAAS,EAAE,2CAAS;IACpB,UAAU,EAAE,gDAAc;IAC1B,EAAE,EAAE,8DAAc;IAClB,kBAAkB,EAAE,MAAM;CAC7B,CAAC;;;;;;;;;;;;;ACzBF;AAAA;AAAA;AAA6C;AAE7C;IAAA;IAiBA,CAAC;IAbG,0BAAS,GAAT,UAAU,KAAK;QACX,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IAC1C,CAAC;IAED,oBAAG,GAAH;QAAI,iBAAU;aAAV,UAAU,EAAV,qBAAU,EAAV,IAAU;YAAV,4BAAU;;QACV,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,OAAO,CAAC,GAAG,OAAX,OAAO,EAAQ,OAAO,EAAE;SAC3B;IACL,CAAC;IAED,sBAAK,GAAL,UAAM,IAAgB,EAAE,IAAK;QACzB,OAAO,IAAI,yDAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACvC,CAAC;IACL,aAAC;AAAD,CAAC;;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAoC;AAGpC,IAAM,WAAW,GAAG,UAAC,QAA6B,EAAE,SAAmB;IACrE,IAAM,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK;QACnC,OAAO,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IACH,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC,CAAC;AAEK,SAAS,UAAU,CAAC,MAAa,EAAE,SAAmB,EAAE,MAAqC;IAArC,kCAA4B,EAAS;IAClG,IAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;IACnC,IAAM,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,YAAY,CAAC;IAEvD,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAM,eAAe,GAAuB;QAC1C,IAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QAC/C,OAAO,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,uBAAa;YACxD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;YAEtC,OAAO,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;gBACnC,eAAe,EAAE,CAAC,CAAC,CAAC,wDAAc,CAAC,MAAM,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,eAAe,EAAE,CAAC;AAC3B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;AC1BM,IAAM,KAAK,GAAG;IAAC,aAAM;SAAN,UAAM,EAAN,qBAAM,EAAN,IAAM;QAAN,wBAAM;;IACxB,OAAO,MAAM,CAAC,MAAM,OAAb,MAAM,iBAAQ,EAAE,GAAK,GAAG,UAAE;AACrC,CAAC,CAAC;;;;;;;;;;;;;ACFF;AAAA;AAAA;AAAA;AAAA,IAAM,KAAK,GAAG,mBAAO,CAAC,wCAAiB,CAAC,CAAC;AACzC,oDAAoD;AACpD,IAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC;AAEsB;AAEnD;IAII,oBAAY,MAAW;QAAX,oCAAW;QACnB,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC5C;QAED,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/D,IAAI,KAAK,GAAG,EAAE,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;SAC/C;QAED,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CACvB,KAAK,CAAC,IAAI;QACN,2BAA2B;QAC3B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,EACzC,cAAM,YAAK,CAAC,KAAK,CAAC,EAAE,CAAC,EAAf,CAAe,CACxB,CACJ,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAED,iCAAY,GAAZ,UAAa,KAAK;QACd,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,OAAO,KAAK,CAAC;SAChB;QAGD,IAAM,SAAS,GAAG,EAAE,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACtC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,IAAM,KAAK,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAE3B,IAAM,IAAI,GAAG,kDAAU,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;YAC9C,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC9B;QAED,yBAAyB;QACzB,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;YACxB,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;SAC3C;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5B,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED,8BAAS,GAAT;QACI,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,8BAAS,GAAT;QACI,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,4BAAO,GAAP;QACI,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC;IAED,6BAAQ,GAAR,UAAS,IAAI;QACT,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,kDAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;gBAChD,KAAK,GAAG,CAAC,CAAC;aACb;SACJ;QAED,IAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE;YAClC,IAAI,YAAY,UAAC;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC7C,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;oBACjB,YAAY,GAAG,KAAK,GAAG,CAAC,CAAC;iBAC5B;qBAAM;oBACH,YAAY,GAAG,KAAK,GAAG,CAAC,CAAC;iBAC5B;gBACD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC9B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;aAC5C;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,2BAAM,GAAN,UAAO,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK;QAC5B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE;YAC1C,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,IAAI,GAAG,KAAK,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;gBACjB,IAAI,GAAG,IAAI,CAAC,kDAAU,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;aAChD;iBAAM;gBACH,IAAI,GAAG,IAAI,CAAC,kDAAU,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;aAChD;YAED,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;SACjC;QAED,OAAO,kDAAU,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IACL,iBAAC;AAAD,CAAC;;;;;;;;;;;;;;AC9GD;AAAA;AAAO,IAAM,mBAAmB,GAAG;IAC/B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;IACnC,OAAO,EAAc,CAAC;AAC1B,CAAC,CAAC;;;;;;;;;;;;;ACHF;AAAA;AAAO,IAAM,cAAc,GAAG,UAAI,KAAM;IACpC,OAAO,OAAO,CAAC,OAAO,CAAI,KAAK,CAAC,CAAC;AACrC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDyC;AAC4C;AAE5C;AACa;AACR;AACM;AACO;AAE7D,yFAAyF;AACzF,6CAA6C;AAE7C;IAAA;IAuNA,CAAC;IArNgB,4BAAkB,GAA/B,UACI,IAAoB,EACpB,WAAmB,EACnB,UAAkB,EAClB,QAAgB;;;;;;wBAEV,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;wBAGlE,aAAa,GAAa,EAAE,CAAC;wBAE7B,MAAM,GAAG,UAAU,CAAC;wBACpB,WAAW,GAAG,WAAW,GAAG,MAAM,CAAC;wBACrC,SAAS,GAAG,CAAC,CAAC;wBACd,UAAU,GAAG,QAAQ,GAAG,MAAM,CAAC;4CAE1B,KAAK;;;;;wCACJ,OAAO,GAAG,UAAC,EAAI,CAAC,eAAe,GAAG,KAAK,CAAC,EAAC;wCAGzC,SAAS,GAAG,SAAS,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;6CAE1C,YAAW,GAAG,SAAS,GAAvB,wBAAuB;wCAEjB,YAAY,GAAG,SAAS,GAAG,CAAC,CAAC;wCAET,qBAAM,OAAK,aAAa,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,EAAE,MAAM,GAAG,SAAS,CAAC;;wCAA1F,iBAAiB,GAAG,SAAsE;wCAChG,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;wCACtC,SAAS,GAAG,YAAY,CAAC;;;wCAMnB,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;wCAGhD,cAAc,GAAG,eAAe,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;6CACjD,WAAU,IAAI,SAAS,GAAvB,wBAAuB;wCAEjB,iBAAiB,GAAG,OAAK,iBAAiB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;wCACvE,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;;;wCAGhC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC;wCAG7D,gBAAgB,GAAG,cAAc,GAAG,aAAa,CAAC;wCAO7B,qBAAM,OAAK,aAAa,CAAC,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,CAAC,EAAE,MAAM,GAAG,UAAU,CAAC;;wCAAhG,kBAAkB,GAAG,SAA2E;wCAGhG,cAAY,OAAK,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;wCAGxD,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAC,EAAI,gBAAgB,GAAE,EAAE,cAAM,uEAAQ,CAAC,WAAS,CAAC,EAAnB,CAAmB,CAAC,CAAC;wCACxF,MAAM,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC;wCACzB,iBAAiB,GAAG,IAAI,uDAAU,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;wCAC3D,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;;;wCAE1C,UAAU,GAAG,aAAa,CAAC;;;;;;;wBAjD1B,KAAK,GAAG,CAAC;;;6BAAE,MAAK,GAAG,eAAe;sDAAlC,KAAK;;;;;wBAA+B,KAAK,IAAI,CAAC;;4BAqDvD,sBAAO,aAAa,CAAC,OAAO,EAAE,EAAC;;;;KAClC;IAEM,yBAAe,GAAtB,UAAuB,SAAyB,EAAE,UAAkB,EAAE,QAAgB,EAAE,WAAmB;QACvG,OAAO,SAAS,CAAC,kBAAkB,CAC/B,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,CAC/C,CAAC,IAAI,CAAC,eAAK;YACR,OAAO,mEAAW,CACd,MAAM,CAAC,MAAM,CACT,KAAK,CAAC,GAAG,CAAC,WAAC;gBACP,OAAO,gEAAQ,CAAC,CAAC,CAAC,CAAC;YACvB,CAAC,CAAC,CACL,CACJ,CAAC;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,uBAAa,GAApB,UAAqB,MAAsB,EAAE,UAAkB,EAAE,QAAgB;QAC7E,OAAO,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,kBAAQ;YACzD,OAAO,gEAAQ,CAAC,YAAK,QAAQ,CAAE,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAC;YACN,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,2BAAiB,GAAxB,UAAyB,CAAS,EAAE,MAAsB;QACtD,IAAI,CAAC,KAAK,CAAC;YAAE,OAAO,oEAAoE,CAAC;QACzF,IAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;QACtD,OAAO,iEAAS,CACZ,gEAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAE,CAAC,CACjF,CAAC;IACN,CAAC;IAEM,yBAAe,GAAtB,UAAuB,OAA4B,EAAE,KAA4B,EAAE,IAAoB,EAAE,kBAA6B,EAAE,WAAmC;QAAlE,kEAA6B;QAClI,IAAM,eAAe,GAAG,mEAAW,CAAC,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;QACzE,IAAM,YAAY,GAAG,IAAI,6DAAI,EAAE,CAAC;QAChC,IAAI,cAA8C,CAAC;QACnD,IAAI,CAAC,WAAW,EAAE;YACd,IAAM,iBAAe,GAAG,EAAE,CAAC;YAC3B,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,YAAE;gBACzB,IAAI,EAAE,CAAC,eAAe,KAAK,eAAe,EAAE;oBACxC,yCAAyC;oBACzC,OAAO;iBACV;gBACD,iBAAe,CAAC,IAAI,CAChB,IAAI,CAAC,qBAAqB,CAAC,EAAE,CAAC,eAAe,CAAC,CACjD,CAAC;YACN,CAAC,CAAC,CAAC;YACH,cAAc,GAAG,+DAAU,CACvB,iBAAe,EACf,aAAG;gBACC,OAAO,GAAG,CAAC;YACf,CAAC,EACD;gBACI,WAAW,EAAE,kBAAkB;aAClC,CACJ,CAAC;SACL;aACI;YACD,cAAc,GAAG,wDAAc,CAAC,WAAW,CAAC,CAAC;SAChD;QAED,OAAO,cAAc,CAAC,IAAI,CAAC,kBAAQ;YAC/B,OAAO,OAAO,CAAC,GAAG,CACd,QAAQ,CAAC,GAAG,CAAC,wBAAc;gBACvB,IAAM,IAAI,GAAG,mDAAG,CAAC,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;gBACzD,IAAM,UAAU,GAAG,SAAS,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;gBAC7D,OAAO,YAAY,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAC9C,CAAC,CAAC,CACL,CAAC;QACN,CAAC,CAAC,CAAC,IAAI,CAAC,WAAC;YACL,OAAO,YAAY,CAAC,QAAQ,CAAC,mDAAG,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,IAAI,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAM;YACV,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aACpD;YACD,oBAAoB;YACpB,IAAM,GAAG,GAAG;gBACR,SAAS,EAAE,gEAAQ,CAAC,OAAO,CAAC,SAAS,CAAC;gBACtC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,CAAC,GAAG,EAAE,EAAP,CAAO,CAAC;gBAC3C,IAAI,EAAE,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,WAAW;gBAC/C,IAAI,EAAE,mDAAG,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC;gBAC1C,KAAK,EAAE,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,mDAAG,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;aAC/F,CAAC;YACF,OAAO,GAAG,CAAC;QACf,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,wBAAc,GAArB,UAAsB,OAA4B;QAC9C,IAAM,OAAO,GAAG,2CAAS,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9C,OAAO,OAAO,CAAC,MAAM,IAAI,IAAI,IAAI,OAAO,KAAK,KAAK,IAAI,OAAO,KAAK,IAAI,CAAC;IAC3E,CAAC;IAED,oEAAoE;IACpE,gEAAgE;IAChE,4DAA4D;IAC5D,wDAAwD;IACxD,EAAE;IACF,+CAA+C;IAC/C,mFAAmF;IAC5E,4BAAkB,GAAzB,UAA0B,KAAK;QAC3B,OAAO,iEAAS,CACZ,MAAM,CAAC,MAAM,CAAC;YACV,yBAAyB;YACzB,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,OAAO,CAAC;YAC1C,qEAAa,CAAC,gEAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACxC,gEAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,aAAa;SACtC,CAAC,CACL,CAAC;IACN,CAAC;IAEM,yBAAe,GAAtB,UAAuB,OAA4B;QAC/C,IAAI,WAAW,GAAG,mDAAG,CAAC,MAAM,CAAC;YACzB,gEAAQ,CACJ,OAAO,CAAC,MAAM,KAAK,SAAS,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAC1G;YACD,gEAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC;YACnC,gEAAQ,CAAC,OAAO,CAAC,SAAS,CAAC;YAC3B,oBAAoB;YACpB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,WAAC;gBACd,kCAAkC;gBAClC,OAAO;oBACH,gEAAQ,CAAC,CAAC,CAAC,OAAO,CAAC;oBACnB,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,wDAAQ,CAAC;oBACtB,gEAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,yBAAyB;iBAC9C,CAAC;YACN,CAAC,CAAC;SACL,CAAC,CAAC;QACH,IAAI,SAAS,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YACnC,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,gEAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;SACtE;QACD,OAAO,WAAW,CAAC;IACvB,CAAC;IAEM,sBAAY,GAAnB,UAAoB,MAAM;QACtB,MAAM,CAAC,UAAU,GAAG,2CAAS,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAQ,CAAC;QAC9D,IAAM,MAAM,GAAG,IAAI,yDAAM,CAAC;YACtB,KAAK,EAAE,wDAAK,CAAC,OAAO,EAAE,QAAQ,EAAE,2DAAQ,CAAC,MAAM;SAClD,CAAC,CAAC;QACH,IAAM,SAAS,GAAG,6DAAW,CAAC,cAAc,CAAC,MAAM,EAAE;YACjD,MAAM,EAAE,MAAM;SACjB,CAAC,CAAC;QACH,OAAO,SAAS,CAAC;IACrB,CAAC;IACL,gBAAC;AAAD,CAAC;;;;;;;;;;;;;;ACpOD;AAAA;AAAO,SAAS,OAAO,CAAC,GAAG,EAAE,IAAI;IAC7B,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChE,OAAO,UAAU,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI,IAAK,WAAI,IAAI,IAAI,CAAC,IAAI,CAAC,EAAlB,CAAkB,EAAE,GAAG,CAAC,CAAC;AACtE,CAAC;;;;;;;;;;;;;ACHD;AAAA;AAAA;AAAsD;AAE/C,IAAM,WAAW,GAAG,UAAC,GAAW;IACnC,IAAM,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC;IAC7B,IAAI,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QAC5B,GAAG,IAAI,GAAG,CAAC;KACd;IACD,GAAG,IAAI,SAAS,CAAC;IACjB,iDAAO,CAAC,OAAO,GAAG,IAAI,wDAAc,CAAC,GAAG,CAAC,CAAC;AAC9C,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACRyC;AAEpC,IAAM,GAAG,GAAG,UAAC,MAAM;IAAE,iBAAU;SAAV,UAAU,EAAV,qBAAU,EAAV,IAAU;QAAV,gCAAU;;IAClC,IAAM,cAAc,GAAY,OAAO,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;IACrF,OAAO,cAAc,CAAC,KAAK,OAApB,cAAc,iBAAO,sDAAa,GAAK,OAAO,UAAE;AAC3D,CAAC,CAAC;;;;;;;;;;;;;ACJF;AAAA;AAAA;AAAA;AAAA;AAAsC;AACJ;AACP;AAE3B;IAAA;QAQI,WAAM,GAAG,IAAI,8CAAM,EAAE,CAAC;IAyD1B,CAAC;IAtDG,kCAAI,GAAJ,UAAK,MAAyB;QAC1B,MAAM,GAAG,MAAM,IAAI,EAAS,CAAC;QAC7B,MAAM,CAAC,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,IAAI,EAAS,CAAC;QACvE,MAAM,CAAC,KAAK,CAAC,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,aAAa,IAAI,EAAS,CAAC;QACrE,IAAI,CAAC,MAAM,GAAG,MAAa,CAAC;QAE5B,2BAA2B;QAC3B,IAAM,UAAU,GAAG,uCAAK,CAAC,UAAU,CAAC;QAEpC,IAAI,CAAC,UAAU,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC5C;QAED,IAAI,uCAAK,CAAC,kBAAkB,EAAE;YAC1B,IAAI,CAAC,UAAU,GAAG,uCAAK,CAAC,kBAAkB,CAAC;SAC9C;QAED,IAAI,CAAC,MAAM,GAAG,IAAK,UAAkB,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAC3E,IAAI,CAAC,KAAK,GAAG,IAAK,UAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAEzE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAElC,IAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC/B,IAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC/B,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU;YAC9B,IAAI,iDAAU,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;QAC3C,OAAO,UAAU,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,aAAG;YAC9B,MAAM,IAAI,KAAK,CAAC,kBAAW,OAAO,gBAAM,OAAO,sBAAmB,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oCAAM,GAAN,UAAO,IAAY,EAAE,IAAa;QAC9B,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,uCAAS,GAAT,UAAU,IAAY;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED,sBAAI,oDAAmB;aAAvB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAC5C,CAAC;;;OAAA;IAED,sBAAI,iDAAgB;aAApB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC/C,CAAC;;;OAAA;IAED,gDAAkB,GAAlB,UAAmB,QAAiB;QAChC,OAAO,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;IAChD,CAAC;IAGL,0BAAC;AAAD,CAAC;;;;;;;;;;;;;ACvED,8C;;;;;;;;;;;ACAA,+C;;;;;;;;;;;ACAA,mC;;;;;;;;;;;ACAA,4C;;;;;;;;;;;ACAA,iD;;;;;;;;;;;ACAA,uC","file":"matic.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","import { throwNotImplemented } from \"..\";\n\nexport abstract class BaseBigNumber {\n    static isBN(value) {\n        return throwNotImplemented<boolean>();\n    }\n\n    abstract toString(): string;\n    abstract toNumber(): number;\n    abstract toBuffer(): Buffer;\n    abstract add(value: BaseBigNumber): BaseBigNumber;\n    abstract sub(value: BaseBigNumber): BaseBigNumber;\n    abstract mul(value: BaseBigNumber): BaseBigNumber;\n    abstract div(value: BaseBigNumber): BaseBigNumber;\n\n    abstract lte(value: BaseBigNumber): boolean;\n    abstract lt(value: BaseBigNumber): boolean;\n    abstract gte(value: BaseBigNumber): boolean;\n    abstract gt(value: BaseBigNumber): boolean;\n    abstract eq(value: BaseBigNumber): boolean;\n}","import { BaseContractMethod } from \"../abstracts\";\nimport { Logger } from \"../utils\";\n\nexport abstract class BaseContract {\n\n    constructor(public address: string, public logger:Logger) {\n\n    }\n\n    abstract method(methodName: string, ...args): BaseContractMethod;\n}","import { BaseContract } from \"../abstracts\";\nimport { ITransactionRequestConfig, ITransactionReceipt, ITransactionData, IBlock, IBlockWithTransaction, IJsonRpcRequestPayload, IJsonRpcResponse, ITransactionWriteResult } from \"../interfaces\";\nimport { Logger } from \"../utils\";\n\nexport abstract class BaseWeb3Client {\n\n    constructor(public logger: Logger) {\n\n    }\n\n    abstract getContract(address: string, abi: any): BaseContract;\n\n    abstract read(config: ITransactionRequestConfig): Promise<string>;\n\n    abstract write(config: ITransactionRequestConfig): ITransactionWriteResult;\n    abstract getGasPrice(): Promise<string>;\n    abstract estimateGas(config: ITransactionRequestConfig): Promise<number>;\n    abstract getChainId(): Promise<number>;\n    abstract getTransactionCount(address: string, blockNumber: any): Promise<number>;\n\n    abstract getTransaction(transactionHash: string): Promise<ITransactionData>;\n    abstract getTransactionReceipt(transactionHash: string): Promise<ITransactionReceipt>;\n    // abstract extend(property: string, methods: IMethod[])\n\n    abstract getBlock(blockHashOrBlockNumber): Promise<IBlock>;\n    abstract getBlockWithTransaction(blockHashOrBlockNumber): Promise<IBlockWithTransaction>;\n\n    getRootHash?(startBlock: number, endBlock: number) {\n        return this.sendRPCRequest({\n            jsonrpc: '2.0',\n            method: 'eth_getRootHash',\n            params: [Number(startBlock), Number(endBlock)],\n            id: new Date().getTime()\n        }).then(payload => {\n            return String(payload.result);\n        });\n    }\n\n    abstract sendRPCRequest(request: IJsonRpcRequestPayload): Promise<IJsonRpcResponse>;\n\n    abstract encodeParameters(params: any[], types: any[]): string;\n    abstract decodeParameters(hexString: string, types: any[]): any[];\n    abstract etheriumSha3(...value): string;\n\n}\n","import { ITransactionRequestConfig, ITransactionWriteResult } from \"../interfaces\";\nimport { Logger } from \"../utils\";\n\nexport abstract class BaseContractMethod {\n    constructor(public logger: Logger) {\n\n    }\n    abstract get address(): string;\n    abstract read<T>(tx?: ITransactionRequestConfig, defaultBlock?: number | string): Promise<T>;\n    abstract write(tx: ITransactionRequestConfig,): ITransactionWriteResult;\n    abstract estimateGas(tx: ITransactionRequestConfig,): Promise<number>;\n    abstract encodeABI(): any;\n}","export * from \"./contract_method\";\nexport * from \"./base_web3_client\";\nexport * from \"./base_contract\";\nexport * from \"./base_big_number\";","\nexport const config = {\n    abiStoreUrl: 'https://static.matic.network/network/'\n};","export const MAX_AMOUNT = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n","import { POSClient } from \"./pos\";\nimport { use, utils } from \"./utils\";\n\nexport const defaultExport = {\n    utils: utils,\n    use,\n    POSClient,\n};","export enum ERROR_TYPE {\n    AllowedOnRoot = \"allowed_on_root\",\n    AllowedOnChild = \"allowed_on_child\",\n    Unknown = \"unknown\",\n    ProofAPINotSet = \"proof_api_not_set\",\n    TransactionOptionNotObject = \"transation_object_not_object\",\n    BurnTxNotCheckPointed = \"burn_tx_not_checkpointed\",\n    EIP1559NotSupported = \"eip-1559_not_supported\",\n    NullSpenderAddress = \"null_spender_address\"\n}","export * from \"./log_event_signature\";\nexport * from \"./error_type\";","export enum Log_Event_Signature {\n    // PlasmaErc20WithdrawEventSig = '0xebff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f',\n    // PlasmaErc721WithdrawEventSig = '0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb',\n    Erc20Transfer = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    Erc721Transfer = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    Erc1155Transfer = '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62',\n    Erc721BatchTransfer = '0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df',\n    Erc1155BatchTransfer = '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb',\n    Erc721TransferWithMetadata = '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14',\n\n}","import { throwNotImplemented } from \"..\";\nimport { BaseBigNumber } from \"../abstracts\";\n\nexport class EmptyBigNumber extends BaseBigNumber {\n\n    constructor(value) {\n        super();\n    }\n\n    toString(base?) {\n        return throwNotImplemented<string>();\n    }\n\n    toNumber() {\n        return throwNotImplemented<number>();\n    }\n\n    toBuffer(base?) {\n        return throwNotImplemented<Buffer>();\n    }\n\n    add(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    sub(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    mul(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    div(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    lte(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n    }\n\n    lt(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n\n    }\n\n    gte(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n\n    }\n\n    gt(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n\n    }\n\n    eq(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n    }\n}","export * from \"./bn\";","import { defaultExport } from \"./default\";\n\nexport * from \"./utils\";\nexport * from \"./enums\";\nexport * from \"./pos\";\nexport * from \"./interfaces\";\nexport * from \"./types\";\nexport * from \"./constant\";\nexport * from \"./abstracts\";\nexport * from \"./services\";\n\nexport default defaultExport;\n\n","export * from \"./plugin\";\nexport * from \"./method\";\nexport * from \"./transaction_config\";\nexport * from \"./transaction_write_result\";\nexport * from \"./transaction_result\";\nexport * from \"./transaction_option\";\nexport * from \"./contract_init_param\";\nexport * from \"./tx_receipt\";\nexport * from \"./pos_client_config\";\nexport * from \"./transaction_data\";\nexport * from \"./block\";\nexport * from \"./block_with_transaction\";\nexport * from \"./rpc_request_payload\";\nexport * from \"./rpc_response_payload\";\nexport * from \"./map_promise_option\";\nexport * from \"./base_client_config\";\nexport * from \"./error\";\nexport * from \"./pos_contracts\";\nexport * from \"./root_block_info\";\nexport * from \"./allowance_transaction_option\";\nexport * from \"./approve_transaction_option\";\nexport * from \"./exit_transaction_option\";","import { IPOSClientConfig, ITransactionOption } from \"../interfaces\";\nimport { Converter, promiseResolve, Web3SideChainClient } from \"../utils\";\nimport { POSToken } from \"./pos_token\";\nimport { Log_Event_Signature } from \"../enums\";\nimport { IPOSContracts, IPOSERC1155Address } from \"../interfaces\";\nimport { POSERC1155DepositBatchParam, POSERC1155DepositParam, POSERC1155TransferParam, TYPE_AMOUNT } from \"..\";\n\nexport class ERC1155 extends POSToken {\n\n    mintablePredicateAddress: string;\n\n    get addressConfig(): IPOSERC1155Address {\n        return this.client.config.erc1155 || {};\n    }\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        getContracts: () => IPOSContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ChildERC1155',\n            bridgeType: 'pos'\n        }, client, getContracts);\n\n    }\n\n    private getAddress_(value: string) {\n        const addresses = this.addressConfig;\n        if (addresses[value]) {\n            return promiseResolve(addresses[value]);\n        }\n\n        return this.client.getConfig(value);\n    }\n\n    /**\n     * get balance of a user for supplied token\n     *\n     * @param {string} userAddress\n     * @param {TYPE_AMOUNT} tokenId\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    getBalance(userAddress: string, tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"balanceOf\",\n                userAddress,\n                Converter.toHex(tokenId)\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    /**\n     * check if a user is approved for all tokens\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    isApprovedAll(userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"isApprovedAll\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"isApprovedForAll\",\n                userAddress,\n                predicateAddress\n            );\n            return this.processRead<boolean>(method, option);\n        });\n\n    }\n\n    private approveAll_(predicateAddressPromise: Promise<string>, option: ITransactionOption) {\n        this.checkForRoot(\"approve\");\n\n        return Promise.all([this.getContract(), predicateAddressPromise]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"setApprovalForAll\",\n                predicateAddress,\n                true\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * approve all tokens \n     *\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    approveAll(option?: ITransactionOption) {\n        this.checkForRoot(\"approve\");\n\n        return this.approveAll_(\n            this.getPredicateAddress(), option\n        );\n    }\n\n    /**\n     * approve all tokens for mintable token\n     *\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    approveAllForMintable(option?: ITransactionOption) {\n        this.checkForRoot(\"approveForMintable\");\n        const addressPath = \"Main.POSContracts.MintableERC1155PredicateProxy\";\n        return this.approveAll_(\n            this.getAddress_(addressPath), option\n        );\n    }\n\n    /**\n     * deposit supplied amount of token for a user \n     *\n     * @param {POSERC1155DepositParam} param\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    deposit(param: POSERC1155DepositParam, option?: ITransactionOption) {\n        this.checkForRoot(\"deposit\");\n        return this.depositMany({\n            amounts: [param.amount],\n            tokenIds: [param.tokenId],\n            userAddress: param.userAddress,\n            data: param.data\n        }, option);\n    }\n\n    /**\n     * deposit supplied amount of multiple token for user\n     *\n     * @param {POSERC1155DepositBatchParam} param\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    depositMany(param: POSERC1155DepositBatchParam, option?: ITransactionOption) {\n        this.checkForRoot(\"depositMany\");\n\n        const { tokenIds, amounts, data, userAddress } = param;\n        const emptyHex = Converter.toHex(0);\n        const amountInABI = this.client.parent.encodeParameters(\n            [\n                tokenIds.map(t => Converter.toHex(t)),\n                amounts.map(a => Converter.toHex(a)),\n                data || emptyHex\n            ],\n            ['uint256[]', 'uint256[]', 'bytes'],\n        );\n\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n\n    }\n\n    /**\n     * start withdraw process by burning the required amount for a token\n     *\n     * @param {string} tokenId\n     * @param {TYPE_AMOUNT} amount\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawStart(tokenId: TYPE_AMOUNT, amount: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStart\");\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawSingle\",\n                Converter.toHex(tokenId),\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * start the withdraw process by burning the supplied amount of multiple token at a time\n     *\n     * @param {TYPE_AMOUNT[]} tokenIds\n     * @param {TYPE_AMOUNT[]} amounts\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawStartMany(tokenIds: TYPE_AMOUNT[], amounts: TYPE_AMOUNT[], option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStartMany\");\n\n        const tokensInHex = tokenIds.map(t => {\n            return Converter.toHex(t);\n        });\n        const amountsInHex = amounts.map(t => {\n            return Converter.toHex(t);\n        });\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawBatch\",\n                tokensInHex,\n                amountsInHex\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * exit the withdraw process and get the burned amount on root chain\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExit(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155Transfer,\n            false,\n            option\n        );\n    }\n\n    /**\n     * exit the withdraw process and get the burned amount on root chain\n     * \n     * the process is faster because it uses proof api\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExitFaster(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitFaster\");\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155Transfer,\n            true,\n            option\n        );\n    }\n\n    /**\n     * exit the withdraw process for many burned transaction and get the burned amount on root chain\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExitMany(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitMany\");\n\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155BatchTransfer,\n            false,\n            option\n        );\n    }\n\n    /**\n     * exit the withdraw process for many burned transaction and get the burned amount on root chain\n     *\n     * the process is faster because it uses proof api\n     * \n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExitFasterMany(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitFasterMany\");\n\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155BatchTransfer,\n            true,\n            option\n        );\n    }\n\n    /**\n     * check if exit has been completed for a transaction hash\n     *\n     * @param {string} burnTxHash\n     * @return {*} \n     * @memberof ERC1155\n     */\n    isWithdrawExited(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc1155Transfer\n        );\n    }\n\n    /**\n     * check if batch exit has been completed for a transaction hash\n     *\n     * @param {string} txHash\n     * @return {*} \n     * @memberof ERC1155\n     */\n    isWithdrawExitedMany(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc1155BatchTransfer\n        );\n    }\n\n    /**\n     * transfer the required amount of a token to anothe user\n     *\n     * @param {POSERC1155TransferParam} param\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    transfer(param: POSERC1155TransferParam, option?: ITransactionOption) {\n        return this.transferERC1155(\n            param, option\n        );\n    }\n}","import { ITransactionOption } from \"../interfaces\";\nimport { Converter, Web3SideChainClient } from \"../utils\";\nimport { POSToken } from \"./pos_token\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { ERROR_TYPE, Log_Event_Signature } from \"../enums\";\nimport { MAX_AMOUNT, promiseResolve } from \"..\";\nimport { IAllowanceTransactionOption, IApproveTransactionOption, IExitTransactionOption, IPOSClientConfig, IPOSContracts } from \"../interfaces\";\n\nexport class ERC20 extends POSToken {\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        getContracts: () => IPOSContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ChildERC20',\n            bridgeType: 'pos'\n        }, client, getContracts);\n    }\n\n    getBalance(userAddress: string, option?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"balanceOf\",\n                userAddress\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    /**\n     * get allowance of user\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    getAllowance(userAddress: string, option: IAllowanceTransactionOption = {}) {\n        const spenderAddress = option.spenderAddress;\n\n        const predicatePromise = spenderAddress ? promiseResolve(spenderAddress) : this.getPredicateAddress();\n\n        return Promise.all([predicatePromise, this.getContract()]).then(result => {\n            const [predicateAddress, contract] = result;\n            const method = contract.method(\n                \"allowance\",\n                userAddress,\n                predicateAddress,\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    approve(amount: TYPE_AMOUNT, option: IApproveTransactionOption = {}) {\n        const spenderAddress = option.spenderAddress;\n\n        if (!spenderAddress && !this.contractParam.isParent) {\n            this.client.logger.error(ERROR_TYPE.NullSpenderAddress).throw();\n        }\n\n        const predicatePromise = spenderAddress ? promiseResolve(spenderAddress) : this.getPredicateAddress();\n\n        return Promise.all([predicatePromise, this.getContract()]).then(result => {\n            const [predicateAddress, contract] = result;\n            const method = contract.method(\n                \"approve\",\n                predicateAddress,\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    approveMax(option: IApproveTransactionOption = {}) {\n        return this.approve(\n            MAX_AMOUNT\n            , option\n        );\n    }\n\n    /**\n     * Deposit given amount of token for user\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    deposit(amount: TYPE_AMOUNT, userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"deposit\");\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(amount)],\n            ['uint256'],\n        );\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n    }\n\n    private depositEther_(amount: TYPE_AMOUNT, userAddress: string, option: ITransactionOption = {}) {\n        this.checkForRoot(\"depositEther\");\n\n\n        option.value = Converter.toHex(amount);\n        return this.rootChainManager.method(\"depositEtherFor\", userAddress).then(method => {\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * initiate withdraw by burning provided amount\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawStart(amount: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStart\");\n\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdraw\",\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    private withdrawExit_(burnTransactionHash: string, isFast: boolean, option: IExitTransactionOption = {}) {\n        const eventSignature = option.burnEventSignature ?\n            option.burnEventSignature : Log_Event_Signature.Erc20Transfer;\n\n        return this.exitUtil.buildPayloadForExit(\n            burnTransactionHash,\n            eventSignature,\n            isFast\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n\n    /**\n     * complete withdraw process after checkpoint has been submitted for the block containing burn tx.\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawExit(burnTransactionHash: string, option?: IExitTransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n\n        return this.withdrawExit_(burnTransactionHash, false, option);\n    }\n\n    /**\n     * complete withdraw process after checkpoint has been submitted for the block containing burn tx.\n     *\n     *  Note:- It create the proof in api call for fast exit.\n     * \n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawExitFaster(burnTransactionHash: string, option?: IExitTransactionOption) {\n        this.checkForRoot(\"withdrawExitFaster\");\n\n        return this.withdrawExit_(burnTransactionHash, true, option);\n    }\n\n    /**\n     * check if exit has been completed for a transaction hash\n     *\n     * @param {string} burnTxHash\n     * @returns\n     * @memberof ERC20\n     */\n    isWithdrawExited(burnTxHash: string) {\n        return this.isWithdrawn(burnTxHash, Log_Event_Signature.Erc20Transfer);\n    }\n\n    /**\n     * transfer amount to another user\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} to\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    transfer(amount: TYPE_AMOUNT, to: string, option?: ITransactionOption) {\n        return this.transferERC20(to, amount, option);\n    }\n\n}\n","import { IPOSClientConfig, IPOSContracts, ITransactionOption } from \"../interfaces\";\nimport { RootChainManager } from \"./root_chain_manager\";\nimport { Converter, Web3SideChainClient } from \"../utils\";\nimport { POSToken } from \"./pos_token\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { ExitUtil } from \"./exit_util\";\nimport { Log_Event_Signature } from \"../enums\";\n\nexport class ERC721 extends POSToken {\n\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        getContracts: () => IPOSContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ChildERC721',\n            bridgeType: 'pos'\n        }, client, getContracts);\n    }\n\n    private validateMany_(tokenIds) {\n        if (tokenIds.length > 20) {\n            throw new Error('can not process more than 20 tokens');\n        }\n        return tokenIds.map(tokenId => {\n            return Converter.toHex(tokenId);\n        });\n    }\n\n    /**\n     * get tokens count for the user\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [options]\n     * @returns\n     * @memberof ERC721\n     */\n    getTokensCount(userAddress: string, options?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"balanceOf\",\n                userAddress\n            );\n            return this.processRead<string>(method, options);\n        }).then(count => {\n            return Number(count);\n        });\n    }\n\n    /**\n     * returns token id on supplied index for user\n     *\n     * @param {number} index\n     * @param {string} userAddress\n     * @param {ITransactionOption} [options]\n     * @returns\n     * @memberof ERC721\n     */\n    getTokenIdAtIndexForUser(index: number, userAddress: string, options?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"tokenOfOwnerByIndex\",\n                userAddress,\n                index\n            );\n\n            return this.processRead<string>(method, options);\n        });\n    }\n\n    /**\n     * get all tokens for user\n     *\n     * @param {string} userAddress\n     * @param {*} [limit=Infinity]\n     * @returns\n     * @memberof ERC721\n     */\n    getAllTokens(userAddress: string, limit = Infinity) {\n        return this.getTokensCount(userAddress).then(count => {\n            count = Number(count);\n            if (count > limit) {\n                count = limit;\n            }\n            const promises = [];\n            for (let i = 0; i < count; i++) {\n                promises.push(\n                    this.getTokenIdAtIndexForUser(i, userAddress)\n                );\n            }\n            return Promise.all(\n                promises\n            );\n        });\n    }\n\n    isApproved(tokenId: string, option?: ITransactionOption) {\n        this.checkForRoot(\"isApproved\");\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"getApproved\",\n                tokenId\n            );\n            return Promise.all([\n                this.processRead<string>(method, option),\n                this.getPredicateAddress()\n            ]).then(result => {\n                return result[0] === result[1];\n            });\n        });\n    }\n\n    isApprovedAll(userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"isApprovedAll\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"isApprovedForAll\",\n                userAddress,\n                predicateAddress\n            );\n            return this.processRead<boolean>(method, option);\n        });\n\n    }\n\n    approve(tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForRoot(\"approve\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"approve\",\n                predicateAddress,\n                Converter.toHex(tokenId)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    approveAll(option?: ITransactionOption) {\n        this.checkForRoot(\"approveAll\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"setApprovalForAll\",\n                predicateAddress,\n                true\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n\n    deposit(tokenId: TYPE_AMOUNT, userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"deposit\");\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(tokenId)],\n            ['uint256'],\n        );\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n    }\n\n    depositMany(tokenIds: TYPE_AMOUNT[], userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"depositMany\");\n\n        const tokensInHex = this.validateMany_(tokenIds);\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [tokensInHex],\n            ['uint256[]'],\n        );\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n    }\n\n    withdrawStart(tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStart\");\n\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdraw\",\n                Converter.toHex(tokenId)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    withdrawStartWithMetaData(tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStartWithMetaData\");\n\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawWithMetadata\",\n                Converter.toHex(tokenId)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    withdrawStartMany(tokenIds: TYPE_AMOUNT[], option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStartMany\");\n\n        const tokensInHex = this.validateMany_(tokenIds);\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawBatch\",\n                tokensInHex\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    withdrawExit(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n\n        return this.exitUtil.buildPayloadForExit(\n            burnTransactionHash,\n            Log_Event_Signature.Erc721Transfer,\n            false\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n\n    withdrawExitOnIndex(burnTransactionHash: string, index: number, option?: ITransactionOption) {\n      this.checkForRoot(\"withdrawExit\");\n\n      return this.exitUtil.buildPayloadForExit(\n          burnTransactionHash,\n          Log_Event_Signature.Erc721Transfer,\n          false,\n          index\n      ).then(payload => {\n          return this.rootChainManager.exit(\n              payload, option\n          );\n      });\n    }\n\n    // async withdrawExitMany(burnTransactionHash: string, option?: ITransactionOption) {\n    //     this.checkForRoot(\"withdrawExitMany\");\n\n    //     return this.exitUtil.buildMultiplePayloadsForExit(\n    //         burnTransactionHash,\n    //         Log_Event_Signature.Erc721BatchTransfer,\n    //         false\n    //     ).then(async payloads => {\n    //         const exitTxs = [];\n    //         if()\n    //         for(const i in payloads) {\n    //           exitTxs.push(this.rootChainManager.exit(\n    //             payloads[i], option\n    //         ));\n    //         }\n    //         return Promise.all(exitTxs);\n    //         });\n    // }\n\n    withdrawExitFaster(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitFaster\");\n\n        return this.exitUtil.buildPayloadForExit(\n            burnTransactionHash,\n            Log_Event_Signature.Erc721Transfer,\n            true\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n\n    // withdrawExitFasterMany(burnTransactionHash: string, option?: ITransactionOption) {\n    //     this.checkForRoot(\"withdrawExitFasterMany\");\n\n\n    //     return this.exitUtil.buildPayloadForExit(\n    //         burnTransactionHash,\n    //         Log_Event_Signature.Erc721BatchTransfer,\n    //         true\n    //     ).then(payload => {\n    //         return this.rootChainManager.exit(\n    //             payload, option\n    //         );\n    //     });\n    // }\n\n    isWithdrawExited(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc721Transfer\n        );\n    }\n\n    isWithdrawExitedMany(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc721BatchTransfer\n        );\n    }\n\n    isWithdrawExitedOnIndex(txHash: string, index: number) {\n        return this.isWithdrawnOnIndex(\n            txHash, index, Log_Event_Signature.Erc721Transfer\n        );\n    }\n\n    /**\n     * tranfer to another user\n     *\n     * @param {string} tokenId\n     * @param {string} from\n     * @param {string} to\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC721\n     */\n    transfer(tokenId: string, from: string, to: string, option?: ITransactionOption) {\n        return this.transferERC721(\n            from,\n            to,\n            tokenId,\n            option\n        );\n    }\n\n}\n","import { RootChain } from \"./root_chain\";\nimport { Converter, ProofUtil, Web3SideChainClient } from \"../utils\";\nimport { bufferToHex, rlp } from \"ethereumjs-util\";\nimport { IBlockWithTransaction, ITransactionReceipt } from \"../interfaces\";\nimport { service } from \"../services\";\nimport { BaseBigNumber, BaseWeb3Client } from \"../abstracts\";\nimport { ErrorHelper } from \"../utils/error_helper\";\nimport { ERROR_TYPE, IBaseClientConfig, IRootBlockInfo, utils } from \"..\";\n\ninterface IChainBlockInfo {\n    lastChildBlock: string;\n    txBlockNumber: number;\n}\n\n\n\nexport class ExitUtil {\n    private maticClient_: BaseWeb3Client;\n\n    rootChain: RootChain;\n\n    requestConcurrency: number;\n    config: IBaseClientConfig;\n\n    constructor(client: Web3SideChainClient<IBaseClientConfig>, rootChain: RootChain) {\n        this.maticClient_ = client.child;\n        this.rootChain = rootChain;\n        const config = client.config;\n        this.config = config;\n        this.requestConcurrency = config.requestConcurrency;\n    }\n\n    private getLogIndex_(logEventSig: string, receipt: ITransactionReceipt) {\n        let logIndex = -1;\n\n        switch (logEventSig) {\n            case '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef':\n            case '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14':\n                logIndex = receipt.logs.findIndex(\n                    log =>\n                        log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                        log.topics[2].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000'\n                );\n                break;\n\n            case '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62':\n            case '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb':\n                logIndex = receipt.logs.findIndex(\n                    log =>\n                        log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                        log.topics[3].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000'\n                );\n                break;\n\n            default:\n                logIndex = receipt.logs.findIndex(log => log.topics[0].toLowerCase() === logEventSig.toLowerCase());\n        }\n        if (logIndex < 0) {\n            throw new Error(\"Log not found in receipt\");\n        }\n        return logIndex;\n    }\n\n    private getAllLogIndices_(logEventSig: string, receipt: ITransactionReceipt) {\n      let logIndices = [];\n\n      switch (logEventSig) {\n          case '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef':\n          case '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14':\n            logIndices = receipt.logs.reduce(\n                  (_, log, index) =>\n                      ((log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                      log.topics[2].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000') &&\n                      logIndices.push(index), logIndices), []\n              );\n              break;\n\n          case '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62':\n          case '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb':\n              logIndices = receipt.logs.reduce(\n                (_, log, index) =>\n                    ((log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                    log.topics[3].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000') &&\n                    logIndices.push(index), logIndices), []\n            );\n            break;\n          \n          case '0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df':\n              logIndices = receipt.logs.reduce(\n                (_, log, index) =>\n                    ((log.topics[0].toLowerCase() === '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' &&\n                    log.topics[2].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000') &&\n                    logIndices.push(index), logIndices), []\n            );\n            break;\n\n          default:\n            logIndices = receipt.logs.reduce(\n              (_, log, index) =>\n                  ((log.topics[0].toLowerCase() === logEventSig.toLowerCase()) &&\n                  logIndices.push(index), logIndices), []\n          );\n      }\n      if (logIndices.length === 0) {\n          throw new Error(\"Log not found in receipt\");\n      }\n      return logIndices;\n  }\n\n    getChainBlockInfo(burnTxHash: string) {\n        return Promise.all([\n            this.rootChain.getLastChildBlock(),\n            this.maticClient_.getTransaction(burnTxHash),\n        ]).then(result => {\n            return {\n                lastChildBlock: result[0],\n                txBlockNumber: result[1].blockNumber\n            } as IChainBlockInfo;\n        });\n    }\n\n    private isCheckPointed_(data: IChainBlockInfo) {\n        // lastchild block is greater equal to transacton block number; \n        return new utils.BN(data.lastChildBlock).gte(\n            new utils.BN(data.txBlockNumber)\n        );\n    }\n\n    isCheckPointed(burnTxHash: string) {\n        return this.getChainBlockInfo(\n            burnTxHash\n        ).then(result => {\n            return this.isCheckPointed_(\n                result\n            );\n        });\n    }\n\n    /**\n     * returns info about block number existance on parent chain\n     * 1. root block number, \n     * 2. start block number, \n     * 3. end block number \n     *\n     * @private\n     * @param {number} txBlockNumber - transaction block number on child chain\n     * @return {*} \n     * @memberof ExitUtil\n     */\n    private getRootBlockInfo(txBlockNumber: number) {\n        // find in which block child was included in parent\n        let rootBlockNumber: BaseBigNumber;\n        return this.rootChain.findRootBlockFromChild(\n            txBlockNumber\n        ).then(blockNumber => {\n            rootBlockNumber = blockNumber;\n            return this.rootChain.method(\n                \"headerBlocks\",\n                Converter.toHex(blockNumber)\n            );\n        }).then(method => {\n            return method.read<IRootBlockInfo>();\n        }).then(rootBlockInfo => {\n            return {\n                // header block number - root block number in which child block exist \n                headerBlockNumber: rootBlockNumber,\n                // range of block\n                // end - block end number\n                end: rootBlockInfo.end.toString(),\n                // start - block start number\n                start: rootBlockInfo.start.toString(),\n            } as IRootBlockInfo;\n        });\n\n    }\n\n    private getRootBlockInfoFromAPI(txBlockNumber: number) {\n        this.maticClient_.logger.log(\"block info from API 1\");\n        return service.network.getBlockIncluded(\n            this.config.network,\n            txBlockNumber\n        ).then(headerBlock => {\n            this.maticClient_.logger.log(\"block info from API 2\", headerBlock);\n            if (!headerBlock || !headerBlock.start || !headerBlock.end || !headerBlock.headerBlockNumber) {\n                throw Error('Network API Error');\n            }\n            return headerBlock;\n        }).catch(err => {\n            this.maticClient_.logger.log(\"block info from API\", err);\n            return this.getRootBlockInfo(txBlockNumber);\n        });\n    }\n\n    private getBlockProof(txBlockNumber: number, rootBlockInfo: { start, end }) {\n        return ProofUtil.buildBlockProof(\n            this.maticClient_,\n            parseInt(rootBlockInfo.start, 10),\n            parseInt(rootBlockInfo.end, 10),\n            parseInt(txBlockNumber + '', 10)\n        );\n    }\n\n    private getBlockProofFromAPI(txBlockNumber: number, rootBlockInfo: { start, end }) {\n\n        return service.network.getProof(\n            this.config.network,\n            rootBlockInfo.start,\n            rootBlockInfo.end,\n            txBlockNumber\n        ).then(blockProof => {\n            if (!blockProof) {\n                throw Error('Network API Error');\n            }\n            this.maticClient_.logger.log(\"block proof from API 1\");\n            return blockProof;\n        }).catch(_ => {\n            return this.getBlockProof(txBlockNumber, rootBlockInfo);\n        });\n    }\n\n    buildPayloadForExit(burnTxHash: string, logEventSig: string, isFast: boolean, index = 0) {\n\n        if (isFast && !service.network) {\n            new ErrorHelper(ERROR_TYPE.ProofAPINotSet).throw();\n        }\n\n        if (index < 0) {\n          throw new Error('Index must not be a negative integer');\n        }\n\n        let txBlockNumber: number,\n            rootBlockInfo: IRootBlockInfo,\n            receipt: ITransactionReceipt,\n            block: IBlockWithTransaction,\n            blockProof;\n\n        return this.getChainBlockInfo(\n            burnTxHash\n        ).then(blockInfo => {\n            if (!this.isCheckPointed_(blockInfo)) {\n                throw new Error(\n                    'Burn transaction has not been checkpointed as yet'\n                );\n            }\n\n            // step 1 - Get Block number from transaction hash\n            txBlockNumber = blockInfo.txBlockNumber;\n            // step 2-  get transaction receipt from txhash and \n            // block information from block number\n            return Promise.all([\n                this.maticClient_.getTransactionReceipt(burnTxHash),\n                this.maticClient_.getBlockWithTransaction(txBlockNumber)\n            ]);\n        }).then(result => {\n            [receipt, block] = result;\n            // step  3 - get information about block saved in parent chain \n            return (\n                isFast ? this.getRootBlockInfoFromAPI(txBlockNumber) :\n                    this.getRootBlockInfo(txBlockNumber)\n            );\n        }).then(rootBlockInfoResult => {\n            rootBlockInfo = rootBlockInfoResult;\n            // step 4 - build block proof\n            return (\n                isFast ? this.getBlockProofFromAPI(txBlockNumber, rootBlockInfo) :\n                    this.getBlockProof(txBlockNumber, rootBlockInfo)\n            );\n        }).then(blockProofResult => {\n            blockProof = blockProofResult;\n            // step 5- create receipt proof\n            return ProofUtil.getReceiptProof(\n                receipt,\n                block,\n                this.maticClient_,\n                this.requestConcurrency\n            );\n        }).then((receiptProof: any) => {\n            // step 6 - encode payload, convert into hex\n\n            // when token index is not 0\n            if(index > 0) {\n              const logIndices = this.getAllLogIndices_(\n                logEventSig, receipt\n              );\n\n              if(index >= logIndices.length) {\n                throw new Error('Index is grater than the number of tokens in this transaction');\n              }\n\n              return this.encodePayload_(\n                rootBlockInfo.headerBlockNumber.toNumber(),\n                blockProof,\n                txBlockNumber,\n                block.timestamp,\n                Buffer.from(block.transactionsRoot.slice(2), 'hex'),\n                Buffer.from(block.receiptsRoot.slice(2), 'hex'),\n                ProofUtil.getReceiptBytes(receipt), // rlp encoded\n                receiptProof.parentNodes,\n                receiptProof.path,\n                logIndices[index]\n              );\n            }\n\n            // when token index is 0\n            const logIndex = this.getLogIndex_(\n                logEventSig, receipt\n            );\n\n            return this.encodePayload_(\n                rootBlockInfo.headerBlockNumber.toNumber(),\n                blockProof,\n                txBlockNumber,\n                block.timestamp,\n                Buffer.from(block.transactionsRoot.slice(2), 'hex'),\n                Buffer.from(block.receiptsRoot.slice(2), 'hex'),\n                ProofUtil.getReceiptBytes(receipt), // rlp encoded\n                receiptProof.parentNodes,\n                receiptProof.path,\n                logIndex\n            );\n        });\n    }\n\n    buildMultiplePayloadsForExit(burnTxHash: string, logEventSig: string, isFast: boolean) {\n\n      if (isFast && !service.network) {\n          new ErrorHelper(ERROR_TYPE.ProofAPINotSet).throw();\n      }\n\n      let txBlockNumber: number,\n          rootBlockInfo: IRootBlockInfo,\n          receipt: ITransactionReceipt,\n          block: IBlockWithTransaction,\n          blockProof;\n\n      return this.getChainBlockInfo(\n          burnTxHash\n      ).then(blockInfo => {\n          if (!this.isCheckPointed_(blockInfo)) {\n              throw new Error(\n                  'Burn transaction has not been checkpointed as yet'\n              );\n          }\n\n          // step 1 - Get Block number from transaction hash\n          txBlockNumber = blockInfo.txBlockNumber;\n          // step 2-  get transaction receipt from txhash and \n          // block information from block number\n          return Promise.all([\n              this.maticClient_.getTransactionReceipt(burnTxHash),\n              this.maticClient_.getBlockWithTransaction(txBlockNumber)\n          ]);\n      }).then(result => {\n          [receipt, block] = result;\n          // step  3 - get information about block saved in parent chain \n          return (\n              isFast ? this.getRootBlockInfoFromAPI(txBlockNumber) :\n                  this.getRootBlockInfo(txBlockNumber)\n          );\n      }).then(rootBlockInfoResult => {\n          rootBlockInfo = rootBlockInfoResult;\n          // step 4 - build block proof\n          return (\n              isFast ? this.getBlockProofFromAPI(txBlockNumber, rootBlockInfo) :\n                  this.getBlockProof(txBlockNumber, rootBlockInfo)\n          );\n      }).then(blockProofResult => {\n          blockProof = blockProofResult;\n          // step 5- create receipt proof\n          return ProofUtil.getReceiptProof(\n              receipt,\n              block,\n              this.maticClient_,\n              this.requestConcurrency\n          );\n      }).then((receiptProof: any) => {\n          const logIndices = this.getAllLogIndices_(\n              logEventSig, receipt\n          );\n          const payloads:string[] = [];\n\n          // step 6 - encode payloads, convert into hex\n          for (const logIndex of logIndices){\n            payloads.push(\n              this.encodePayload_(\n                rootBlockInfo.headerBlockNumber.toNumber(),\n                blockProof,\n                txBlockNumber,\n                block.timestamp,\n                Buffer.from(block.transactionsRoot.slice(2), 'hex'),\n                Buffer.from(block.receiptsRoot.slice(2), 'hex'),\n                ProofUtil.getReceiptBytes(receipt), // rlp encoded\n                receiptProof.parentNodes,\n                receiptProof.path,\n                logIndex\n              )\n            );\n          }\n\n          return payloads;\n      });\n  }\n\n    private encodePayload_(\n        headerNumber,\n        buildBlockProof,\n        blockNumber,\n        timestamp,\n        transactionsRoot,\n        receiptsRoot,\n        receipt,\n        receiptParentNodes,\n        path,\n        logIndex\n    ) {\n        return bufferToHex(\n            rlp.encode([\n                headerNumber,\n                buildBlockProof,\n                blockNumber,\n                timestamp,\n                bufferToHex(transactionsRoot),\n                bufferToHex(receiptsRoot),\n                bufferToHex(receipt),\n                bufferToHex(rlp.encode(receiptParentNodes)),\n                bufferToHex(Buffer.concat([Buffer.from('00', 'hex'), path])),\n                logIndex,\n            ])\n        );\n    }\n\n    getExitHash(burnTxHash, index, logEventSig) {\n        let lastChildBlock: string,\n            receipt: ITransactionReceipt,\n            block: IBlockWithTransaction;\n\n        return Promise.all([\n            this.rootChain.getLastChildBlock(),\n            this.maticClient_.getTransactionReceipt(burnTxHash)\n        ]).then(result => {\n            lastChildBlock = result[0];\n            receipt = result[1];\n            return this.maticClient_.getBlockWithTransaction(\n                receipt.blockNumber\n            );\n        }).then(blockResult => {\n            block = blockResult;\n            if (!this.isCheckPointed_({ lastChildBlock: lastChildBlock, txBlockNumber: receipt.blockNumber })) {\n                this.maticClient_.logger.error(ERROR_TYPE.BurnTxNotCheckPointed).throw();\n            }\n            return ProofUtil.getReceiptProof(\n                receipt,\n                block,\n                this.maticClient_,\n                this.requestConcurrency\n            );\n        }).then((receiptProof: any) => {\n            let logIndex;\n            const nibbleArr = [];\n            receiptProof.path.forEach(byte => {\n                nibbleArr.push(Buffer.from('0' + (byte / 0x10).toString(16), 'hex'));\n                nibbleArr.push(Buffer.from('0' + (byte % 0x10).toString(16), 'hex'));\n            });\n\n            if(index > 0) {\n              const logIndices = this.getAllLogIndices_(logEventSig, receipt);\n              logIndex = logIndices[index];\n            }\n\n            logIndex = this.getLogIndex_(logEventSig, receipt);\n\n            return this.maticClient_.etheriumSha3(\n                receipt.blockNumber, bufferToHex(Buffer.concat(nibbleArr)), logIndex\n            );\n        });\n    }\n}\n","import { ERC20 } from \"./erc20\";\nimport { RootChainManager } from \"./root_chain_manager\";\nimport { BridgeClient } from \"../utils\";\nimport { IPOSClientConfig, IPOSContracts, ITransactionOption } from \"../interfaces\";\nimport { ExitUtil } from \"./exit_util\";\nimport { RootChain } from \"./root_chain\";\nimport { ERC721 } from \"./erc721\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { ERC1155 } from \"./erc1155\";\n\nexport * from \"./exit_util\";\nexport * from \"./root_chain_manager\";\nexport * from \"./root_chain\";\n\nexport class POSClient extends BridgeClient<IPOSClientConfig> {\n\n    rootChainManager: RootChainManager;\n\n    init(config: IPOSClientConfig) {\n        const client = this.client;\n\n        return client.init(config).then(_ => {\n            const mainPOSContracts = client.mainPOSContracts;\n            client.config = config = Object.assign(\n                {\n\n                    rootChainManager: mainPOSContracts.RootChainManagerProxy,\n                    rootChain: client.mainPlasmaContracts.RootChainProxy\n                } as IPOSClientConfig,\n                config\n            );\n\n            this.rootChainManager = new RootChainManager(\n                this.client,\n                config.rootChainManager,\n            );\n\n            const rootChain = new RootChain(\n                this.client,\n                config.rootChain,\n            );\n\n            this.exitUtil = new ExitUtil(\n                this.client,\n                rootChain\n            );\n\n            return this;\n        });\n    }\n\n    erc20(tokenAddress, isParent?: boolean) {\n        return new ERC20(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    erc721(tokenAddress, isParent?: boolean) {\n        return new ERC721(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    erc1155(tokenAddress, isParent?: boolean) {\n        return new ERC1155(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    depositEther(amount: TYPE_AMOUNT, userAddress: string, option: ITransactionOption) {\n        return new ERC20(\n            '', true, this.client,\n            this.getContracts_.bind(this),\n        )['depositEther_'](amount, userAddress, option);\n    }\n\n    private getContracts_() {\n        return {\n            exitUtil: this.exitUtil,\n            rootChainManager: this.rootChainManager\n        } as IPOSContracts;\n    }\n}","import { BaseToken, Web3SideChainClient, promiseResolve } from \"../utils\";\nimport { IContractInitParam, IPOSClientConfig, ITransactionOption } from \"../interfaces\";\nimport { IPOSContracts } from \"../interfaces\";\n\nexport class POSToken extends BaseToken<IPOSClientConfig> {\n\n    private predicateAddress: string;\n\n    constructor(\n        contractParam: IContractInitParam,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        protected getPOSContracts: () => IPOSContracts\n    ) {\n        super(contractParam, client);\n    }\n\n    protected get rootChainManager() {\n        return this.getPOSContracts().rootChainManager;\n    }\n\n    protected get exitUtil() {\n        return this.getPOSContracts().exitUtil;\n    }\n\n\n    getPredicateAddress(): Promise<string> {\n        if (this.predicateAddress) {\n            return promiseResolve(this.predicateAddress);\n        }\n        return this.rootChainManager.method(\n            \"tokenToType\",\n            this.contractParam.address\n        ).then(method => {\n            return method.read();\n        }).then(tokenType => {\n            if (!tokenType) {\n                throw new Error('Invalid Token Type');\n            }\n            return this.rootChainManager.method(\n                \"typeToPredicate\", tokenType\n            );\n        }).then(typeToPredicateMethod => {\n            return typeToPredicateMethod.read<string>();\n        }).then(predicateAddress => {\n            this.predicateAddress = predicateAddress;\n            return predicateAddress;\n        });\n    }\n\n    protected isWithdrawn(txHash: string, eventSignature: string) {\n        if (!txHash) {\n            throw new Error(`txHash not provided`);\n        }\n        return this.exitUtil.getExitHash(\n            txHash, 0, eventSignature\n        ).then(exitHash => {\n            return this.rootChainManager.isExitProcessed(\n                exitHash\n            );\n        });\n    }\n\n    protected isWithdrawnOnIndex(txHash: string, index: number, eventSignature: string) {\n      if (!txHash) {\n          throw new Error(`txHash not provided`);\n      }\n      return this.exitUtil.getExitHash(\n          txHash, index, eventSignature\n      ).then(exitHash => {\n          return this.rootChainManager.isExitProcessed(\n              exitHash\n          );\n      });\n  }\n\n    protected withdrawExitPOS(burnTxHash: string, eventSignature: string, isFast: boolean, option: ITransactionOption) {\n        return this.exitUtil.buildPayloadForExit(\n            burnTxHash,\n            eventSignature,\n            isFast\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n}\n","import { BaseToken, utils, Web3SideChainClient } from \"../utils\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { IPOSClientConfig, ITransactionOption } from \"../interfaces\";\nimport { BaseBigNumber } from \"..\";\n\nexport class RootChain extends BaseToken<IPOSClientConfig> {\n\n    constructor(client_: Web3SideChainClient<IPOSClientConfig>, address: string) {\n        super({\n            address: address,\n            name: 'RootChain',\n            isParent: true\n        }, client_);\n    }\n\n    method(methodName: string, ...args) {\n        return this.getContract().then(contract => {\n            return contract.method(methodName, ...args);\n        });\n    }\n\n    getLastChildBlock() {\n        return this.method(\"getLastChildBlock\").then(method => {\n            return method.read<string>({}, \"finalized\");\n        });\n    }\n\n    async findRootBlockFromChild(childBlockNumber: TYPE_AMOUNT): Promise<BaseBigNumber> {\n        const bigOne = new utils.BN(1);\n        const bigtwo = new utils.BN(2);\n        const checkPointInterval = new utils.BN(10000);\n\n        childBlockNumber = new utils.BN(childBlockNumber);\n        // first checkpoint id = start * 10000\n        let start = bigOne;\n\n        // last checkpoint id = end * 10000\n        const method = await this.method(\"currentHeaderBlock\");\n        const currentHeaderBlock = await method.read<string>();\n        let end = new utils.BN(currentHeaderBlock).div(\n            checkPointInterval\n        );\n\n        // binary search on all the checkpoints to find the checkpoint that contains the childBlockNumber\n        let ans;\n        while (start.lte(end)) {\n            if (start.eq(end)) {\n                ans = start;\n                break;\n            }\n            const mid = start.add(end).div(bigtwo);\n            const headerBlocksMethod = await this.method(\n                \"headerBlocks\",\n                mid.mul(checkPointInterval).toString()\n            );\n            const headerBlock = await headerBlocksMethod.read<{ start: number, end: number }>();\n\n            const headerStart = new utils.BN(headerBlock.start);\n            const headerEnd = new utils.BN(headerBlock.end);\n\n            if (headerStart.lte(childBlockNumber) && childBlockNumber.lte(headerEnd)) {\n                // if childBlockNumber is between the upper and lower bounds of the headerBlock, we found our answer\n                ans = mid;\n                break;\n            } else if (headerStart.gt(childBlockNumber)) {\n                // childBlockNumber was checkpointed before this header\n                end = mid.sub(bigOne);\n            } else if (headerEnd.lt(childBlockNumber)) {\n                // childBlockNumber was checkpointed after this header\n                start = mid.add(bigOne);\n            }\n        }\n        return ans.mul(checkPointInterval);\n    }\n\n}","import { BaseToken, Web3SideChainClient } from \"../utils\";\nimport { IPOSClientConfig, ITransactionOption } from \"../interfaces\";\n\nexport class RootChainManager extends BaseToken<IPOSClientConfig> {\n\n    constructor(client_: Web3SideChainClient<IPOSClientConfig>, address: string) {\n        super({\n            address: address,\n            name: 'RootChainManager',\n            bridgeType: 'pos',\n            isParent: true\n        }, client_);\n    }\n\n    method(methodName: string, ...args) {\n        return this.getContract().then(contract => {\n            return contract.method(methodName, ...args);\n        });\n    }\n\n    deposit(userAddress: string, tokenAddress: string, depositData: string, option?: ITransactionOption) {\n        return this.method(\n            \"depositFor\",\n            userAddress,\n            tokenAddress,\n            depositData\n        ).then(method => {\n            return this.processWrite(method, option);\n        });\n    }\n\n    exit(exitPayload: string, option: ITransactionOption) {\n        return this.method(\"exit\", exitPayload).then(method => {\n            return this.processWrite(\n                method,\n                option\n            );\n        });\n    }\n\n    isExitProcessed(exitHash: string) {\n        return this.method(\n            \"processedExits\", exitHash\n        ).then(method => {\n            return this.processRead<boolean>(method);\n        });\n    }\n\n}\n","import { HttpRequest } from \"../utils\";\n\nexport class ABIService {\n    httpRequest: HttpRequest;\n\n    constructor(baseUrl: string) {\n        this.httpRequest = new HttpRequest(baseUrl);\n    }\n\n    getABI(network: string, version: string, bridgeType: string, contractName: string) {\n        const url = `${network}/${version}/artifacts/${bridgeType}/${contractName}.json`;\n        return this.httpRequest.get(url).then((result: any) => {\n            return result.abi;\n        });\n    }\n\n    getAddress(network: string, version: string) {\n        const url = `${network}/${version}/index.json`;\n        return this.httpRequest.get(url);\n    }\n}","import { ABIService } from \"./abi_service\";\nimport { config } from \"../config\";\nimport { NetworkService } from \"./network_service\";\n\nexport * from \"./network_service\";\n\nclass Service {\n    network: NetworkService;\n    abi: ABIService;\n}\n\nexport const service = new Service();\nservice.abi = new ABIService(config.abiStoreUrl);\n\n\n\n","import { BaseBigNumber, utils } from \"..\";\nimport { HttpRequest } from \"../utils\";\n\nexport class NetworkService {\n    httpRequest: HttpRequest;\n\n    constructor(baseUrl: string) {\n        this.httpRequest = new HttpRequest(baseUrl);\n    }\n\n    private createUrl(network: string, url: string) {\n        return `${network === 'mainnet' ? 'matic' : 'mumbai'}${url}`;\n    }\n\n    getBlockIncluded(network: string, blockNumber: number) {\n\n        const url = this.createUrl(network, `/block-included/${blockNumber}`);\n        return this.httpRequest.get<{\n            start: string;\n            end: string;\n            headerBlockNumber: BaseBigNumber;\n        }>(url).then(result => {\n            const headerBlockNumber = result.headerBlockNumber as any as string;\n            const decimalHeaderBlockNumber = headerBlockNumber.slice(0, 2) === '0x' ? parseInt(\n                headerBlockNumber, 16\n            ) : headerBlockNumber;\n            result.headerBlockNumber = new utils.BN(decimalHeaderBlockNumber);\n            return result;\n        });\n    }\n\n    getProof(network: string, start, end, blockNumber) {\n        const url = this.createUrl(network, `/fast-merkle-proof?start=${start}&end=${end}&number=${blockNumber}`);\n        return this.httpRequest.get<any>(url).then(result => {\n            return result.proof;\n        });\n    }\n}\n","import { BaseBigNumber } from \"../abstracts\";\n\nexport * from \"./pos_erc1155_deposit_param\";\nexport * from \"./pos_erc1155_transfer_param\";\n\nexport type TYPE_AMOUNT = BaseBigNumber | string | number;","import { service } from \"../services\";\nimport { resolve, promiseResolve } from \".\";\n\ntype T_ABI_CACHE = {\n    [networkName: string]: {\n        [version: string]: {\n            address: any,\n            abi: {\n                [bridgeType: string]: {\n                    [contractName: string]: any\n                }\n            }\n        }\n    }\n};\n\nconst cache: T_ABI_CACHE = {};\n\nexport class ABIManager {\n    constructor(public networkName: string, public version: string) {\n\n    }\n\n    init() {\n        return service.abi.getAddress(\n            this.networkName, this.version\n        ).then(result => {\n            cache[this.networkName] = {\n                [this.version]: {\n                    address: result,\n                    abi: {}\n                }\n            };\n        });\n    }\n\n    getConfig(path: string) {\n        return resolve(\n            cache[this.networkName][this.version].address,\n            path\n        );\n    }\n\n    getABI(contractName: string, bridgeType = 'plasma'): Promise<any> {\n        const targetBridgeABICache = cache[this.networkName][this.version].\n            abi[bridgeType];\n\n        if (targetBridgeABICache) {\n            const abiForContract = targetBridgeABICache[contractName];\n            if (abiForContract) {\n                return promiseResolve<any>(abiForContract);\n            }\n        }\n        return service.abi.getABI(\n            this.networkName,\n            this.version,\n            bridgeType,\n            contractName\n        ).then(result => {\n            this.setABI(contractName, bridgeType, result);\n            return result;\n        });\n    }\n\n    setABI(contractName: string, bridgeType: string, abi: any) {\n        const abiStore = cache[this.networkName][this.version].abi;\n        if (!abiStore[bridgeType]) {\n            abiStore[bridgeType] = {};\n        }\n        abiStore[bridgeType][contractName] = abi;\n    }\n}","import { Web3SideChainClient } from \"./web3_side_chain_client\";\nimport { ITransactionRequestConfig, ITransactionOption, IContractInitParam, IPOSClientConfig, IBaseClientConfig, ITransactionWriteResult } from \"../interfaces\";\nimport { BaseContractMethod, BaseContract, BaseWeb3Client } from \"../abstracts\";\nimport { Converter, merge } from \"../utils\";\nimport { promiseResolve } from \"./promise_resolve\";\nimport { ERROR_TYPE } from \"../enums\";\nimport { POSERC1155TransferParam, TYPE_AMOUNT } from \"../types\";\nimport { ErrorHelper } from \"./error_helper\";\n\nexport interface ITransactionConfigParam {\n    txConfig: ITransactionRequestConfig;\n    method?: BaseContractMethod;\n    isWrite?: boolean;\n    isParent?: boolean;\n}\n\nexport class BaseToken<T_CLIENT_CONFIG> {\n\n    private contract_: BaseContract;\n\n    constructor(\n        protected contractParam: IContractInitParam,\n        protected client: Web3SideChainClient<T_CLIENT_CONFIG>,\n    ) {\n    }\n\n\n    getContract(): Promise<BaseContract> {\n        if (this.contract_) {\n            return promiseResolve<BaseContract>(this.contract_ as any);\n        }\n        const contractParam = this.contractParam;\n        return this.client.getABI(\n            contractParam.name,\n            contractParam.bridgeType,\n        ).then(abi => {\n            this.contract_ = this.getContract_({\n                abi,\n                isParent: contractParam.isParent,\n                tokenAddress: contractParam.address\n            });\n            return this.contract_;\n        });\n    }\n\n    protected processWrite(method: BaseContractMethod, option: ITransactionOption = {}): Promise<ITransactionWriteResult> {\n        this.validateTxOption_(option);\n\n        this.client.logger.log(\"process write\");\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: true,\n                method,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                this.client.logger.log(\"process write config\");\n                if (option.returnTransaction) {\n                    return merge(config, {\n                        data: method.encodeABI(),\n                        to: method.address\n                    } as ITransactionRequestConfig);\n                }\n                const methodResult = method.write(\n                    config,\n                );\n                return methodResult;\n            });\n    }\n\n    protected sendTransaction(option: ITransactionOption = {}): Promise<ITransactionWriteResult> {\n        this.validateTxOption_(option);\n\n        const isParent = this.contractParam.isParent;\n        const client = this.getClient(isParent);\n        client.logger.log(\"process write\");\n\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: true,\n                method: null as any,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                client.logger.log(\"process write config\");\n                if (option.returnTransaction) {\n                    return config as any;\n                }\n                const methodResult = client.write(\n                    config,\n                );\n                return methodResult;\n            });\n    }\n\n    protected readTransaction(option: ITransactionOption = {}): Promise<ITransactionWriteResult> {\n        this.validateTxOption_(option);\n        const isParent = this.contractParam.isParent;\n        const client = this.getClient(isParent);\n        client.logger.log(\"process read\");\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: true,\n                method: null as any,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                client.logger.log(\"write tx config created\");\n                if (option.returnTransaction) {\n                    return config as any;\n                }\n                return client.read(\n                    config,\n                );\n            });\n    }\n\n    private validateTxOption_(option: ITransactionOption) {\n        if (typeof option !== 'object' || Array.isArray(option)) {\n            new ErrorHelper(ERROR_TYPE.TransactionOptionNotObject).throw();\n        }\n    }\n\n    protected processRead<T>(method: BaseContractMethod, option: ITransactionOption = {}): Promise<T> {\n        this.validateTxOption_(option);\n        this.client.logger.log(\"process read\");\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: false,\n                method,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                this.client.logger.log(\"read tx config created\");\n                if (option.returnTransaction) {\n                    return merge(config, {\n                        data: method.encodeABI(),\n                        to: this.contract_.address\n                    } as ITransactionRequestConfig);\n                }\n                return method.read(\n                    config,\n                );\n            });\n    }\n\n    protected getClient(isParent) {\n        return isParent ? this.client.parent :\n            this.client.child;\n    }\n\n    private getContract_({ isParent, tokenAddress, abi }) {\n        const client = this.getClient(isParent);\n        return client.getContract(tokenAddress, abi);\n    }\n\n    protected get parentDefaultConfig() {\n        const config: IBaseClientConfig = this.client.config as any;\n        return config.parent.defaultConfig;\n    }\n\n    protected get childDefaultConfig() {\n        const config: IBaseClientConfig = this.client.config as any;\n        return config.child.defaultConfig;\n    }\n\n    protected createTransactionConfig({ txConfig, method, isParent, isWrite }: ITransactionConfigParam) {\n        const defaultConfig = isParent ? this.parentDefaultConfig : this.childDefaultConfig;\n        txConfig = merge(defaultConfig, (txConfig || {}));\n        const client = isParent ? this.client.parent :\n            this.client.child;\n        client.logger.log(\"txConfig\", txConfig, \"onRoot\", isParent, \"isWrite\", isWrite);\n        const estimateGas = (config: ITransactionRequestConfig) => {\n            return method ? method.estimateGas(config) :\n                client.estimateGas(config);\n        };\n        // txConfig.chainId = Converter.toHex(txConfig.chainId) as any;\n        if (isWrite) {\n            const { maxFeePerGas, maxPriorityFeePerGas } = txConfig;\n            const isEIP1559Supported = this.client.isEIP1559Supported(isParent);\n            const isMaxFeeProvided = (maxFeePerGas || maxPriorityFeePerGas);\n\n            if (!isEIP1559Supported && isMaxFeeProvided) {\n                client.logger.error(ERROR_TYPE.EIP1559NotSupported, isParent).throw();\n            }\n            // const [gasLimit, nonce, chainId] = \n            return Promise.all([\n                !(txConfig.gasLimit)\n                    ? estimateGas({\n                        from: txConfig.from, value: txConfig.value\n                    })\n                    : txConfig.gasLimit,\n                !txConfig.nonce ?\n                    client.getTransactionCount(txConfig.from, 'pending')\n                    : txConfig.nonce,\n                !txConfig.chainId ?\n                    client.getChainId() : txConfig.chainId\n            ]).then(result => {\n                const [gasLimit, nonce, chainId] = result;\n                client.logger.log(\"options filled\");\n\n                txConfig.gasLimit = Number(gasLimit);\n                txConfig.nonce = nonce;\n                txConfig.chainId = chainId;\n                return txConfig;\n            });\n        }\n        return promiseResolve<ITransactionRequestConfig>(txConfig);\n    }\n\n    protected transferERC20(to: string, amount: TYPE_AMOUNT, option?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"transfer\",\n                to,\n                Converter.toHex(amount)\n            );\n            return this.processWrite(\n                method, option\n            );\n        });\n    }\n\n    protected transferERC721(from: string, to: string, tokenId: string, option: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"transferFrom\",\n                from,\n                to,\n                tokenId\n            );\n            return this.processWrite(\n                method, option\n            );\n        });\n    }\n\n    protected checkForRoot(methodName) {\n        if (!this.contractParam.isParent) {\n            this.client.logger.error(ERROR_TYPE.AllowedOnRoot, methodName).throw();\n        }\n    }\n\n    protected checkForChild(methodName) {\n        if (this.contractParam.isParent) {\n            this.client.logger.error(ERROR_TYPE.AllowedOnChild, methodName).throw();\n        }\n    }\n\n    protected transferERC1155(param: POSERC1155TransferParam, option: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"safeTransferFrom\",\n                param.from,\n                param.to,\n                Converter.toHex(param.tokenId),\n                Converter.toHex(param.amount),\n                param.data || '0x'\n            );\n            return this.processWrite(\n                method, option\n            );\n        });\n    }\n\n}\n","import { Web3SideChainClient } from \"../utils\";\nimport { ExitUtil } from \"../pos\";\nimport { BaseToken, utils } from \"..\";\n\nexport class BridgeClient<T> {\n\n    client: Web3SideChainClient<T> = new Web3SideChainClient();\n\n    exitUtil: ExitUtil;\n\n    /**\n     * check whether a txHash is checkPointed \n     *\n     * @param {string} txHash\n     * @returns\n     * @memberof BridgeClient\n     */\n    isCheckPointed(txHash: string) {\n        return this.exitUtil.isCheckPointed(\n            txHash\n        );\n    }\n\n    isDeposited(depositTxHash: string) {\n        const client = this.client;\n\n        const token = new BaseToken({\n            address: client.abiManager.getConfig(\"Matic.GenesisContracts.StateReceiver\"),\n            isParent: false,\n            name: 'StateReceiver',\n            bridgeType: 'genesis'\n        }, client);\n\n        return token.getContract().then(contract => {\n            return Promise.all([\n                client.parent.getTransactionReceipt(depositTxHash),\n                token['processRead']<string>(\n                    contract.method(\"lastStateId\")\n                )\n            ]);\n        }).then(result => {\n            const [receipt, lastStateId] = result;\n            const eventSignature = `0x103fed9db65eac19c4d870f49ab7520fe03b99f1838e5996caf47e9e43308392`;\n            const targetLog = receipt.logs.find(q => q.topics[0] === eventSignature);\n            if (!targetLog) {\n                throw new Error(\"StateSynced event not found\");\n            }\n            const rootStateId = client.child.decodeParameters(targetLog.topics[1], ['uint256'])[0];\n            const rootStateIdBN = utils.BN.isBN(rootStateId) ? rootStateId : new utils.BN(rootStateId);\n            return new utils.BN(lastStateId).gte(\n                rootStateIdBN\n            );\n        });\n    }\n\n}","import { BaseBigNumber } from \"../abstracts\";\nimport { utils } from \"../utils\";\n\nexport class Converter {\n    static toHex(amount: BaseBigNumber | string | number) {\n        const dataType = typeof amount;\n        if (dataType === 'number') {\n            amount = new utils.BN(amount);\n        } else if (dataType === 'string') {\n            if ((amount as string).slice(0, 2) === '0x') {\n                return amount;\n            }\n            amount = new utils.BN(amount);\n        }\n        if (utils.BN.isBN(amount)) {\n            return '0x' + amount.toString(16);\n        }\n        else {\n            throw new Error(`Invalid value ${amount}, value is not a number.`);\n        }\n    }\n}","import { ERROR_TYPE } from \"../enums\";\nimport { IError } from \"../interfaces\";\n\nexport class ErrorHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n\n    constructor(type: ERROR_TYPE, info?) {\n        this.type = type;\n        this.message = this.getMsg_(info);\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg_(info) {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.AllowedOnChild:\n                errMsg = `The action ${info} is allowed only on child token.`;\n                break;\n            case ERROR_TYPE.AllowedOnRoot:\n                errMsg = `The action ${info} is allowed only on root token.`;\n                break;\n            case ERROR_TYPE.ProofAPINotSet:\n                errMsg = `Proof api is not set, please set it using \"setProofApi\"`;\n                break;\n            case ERROR_TYPE.BurnTxNotCheckPointed:\n                errMsg = `Burn transaction has not been checkpointed as yet`;\n                break;\n            case ERROR_TYPE.EIP1559NotSupported:\n                errMsg = `${info ? 'Root' : 'Child'} chain doesn't support eip-1559`;\n                break;\n            case ERROR_TYPE.NullSpenderAddress:\n                errMsg = `Please provide spender address.`;\n                break;\n            default:\n                if (!this.type) {\n                    this.type = ERROR_TYPE.Unknown;\n                }\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","export interface IEventBusPromise<T> extends Promise<T> {\n    on(event: string, cb: Function);\n    emit(event: string, ...args);\n    destroy();\n}\n\nexport const eventBusPromise = function <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) {\n    const promise: IEventBusPromise<T> = new Promise(executor) as any;\n    const eventBus = new EventBus();\n    promise.on = eventBus.on.bind(eventBus);\n    promise.emit = eventBus.emit.bind(eventBus);\n    return promise;\n};\n\nexport class EventBus {\n\n    constructor(ctx?) {\n        this._ctx = ctx;\n    }\n\n    private _ctx;\n\n    private _events: {\n        [key: string]: Function[]\n    } = {};\n\n    on(event: string, cb: Function) {\n        if (this._events[event] == null) {\n            this._events[event] = [];\n        }\n        this._events[event].push(cb);\n        return this;\n    }\n\n    off(event: string, cb: Function) {\n        if (this._events[event]) {\n            if (cb) {\n                const index = this._events[event].indexOf(cb);\n                this._events[event].splice(index, 1);\n            }\n            else {\n                this._events[event] = [];\n            }\n        }\n    }\n\n    emit(event: string, ...args) {\n        const events = this._events[event] || [];\n        return Promise.all(\n            events.map(cb => {\n                const result = cb.call(this._ctx, ...args);\n                return result && result.then ? result : Promise.resolve(result);\n            })\n        );\n    }\n\n    destroy() {\n        this._events = null;\n        this._ctx = null;\n    }\n}","const fetch: (input: RequestInfo, init?: RequestInit) => Promise<Response> =\n    (() => {\n        if (process.env.BUILD_ENV === \"node\") {\n            return require('node-fetch').default;\n        }\n        return window.fetch;\n    })();\n\n\nexport class HttpRequest {\n    baseUrl = \"\";\n\n    constructor(option: { baseUrl: string } | string = {} as any) {\n        option = typeof option === \"string\" ? {\n            baseUrl: option\n        } : option;\n\n        if (option.baseUrl) {\n            this.baseUrl = option.baseUrl;\n        }\n    }\n\n    get<T>(url = \"\", query = {}): Promise<T> {\n        url = this.baseUrl + url + Object.keys(query).\n            map(key => `${encodeURIComponent(key)}=${encodeURIComponent(query[key])}`).join('&');\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(res => {\n            return res.json();\n        });\n    }\n\n    post(url = \"\", body) {\n        url = this.baseUrl + url;\n\n        return fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: body ? JSON.stringify(body) : null\n        }).then(res => {\n            return res.json();\n        });\n    }\n}","import { BaseWeb3Client, Converter, TYPE_AMOUNT } from \"..\";\nimport { EmptyBigNumber } from \"../implementation\";\n\nexport * from \"./use\";\nexport * from \"./event_bus\";\nexport * from \"./logger\";\nexport * from \"./merge\";\nexport * from \"./map_promise\";\nexport * from \"./proof_util\";\nexport * from \"./http_request\";\nexport * from \"./converter\";\nexport * from \"./web3_side_chain_client\";\nexport * from \"./base_token\";\nexport * from \"./set_proof_api_url\";\nexport * from \"./resolve\";\nexport * from \"./promise_resolve\";\nexport * from \"./bridge_client\";\nexport * from \"./abi_manager\";\nexport * from \"./not_implemented\";\n\n\nexport const utils = {\n    converter: Converter,\n    Web3Client: BaseWeb3Client,\n    BN: EmptyBigNumber,\n    UnstoppableDomains: Object\n};\n","import { ERROR_TYPE } from \"../enums\";\nimport { ErrorHelper } from \"./error_helper\";\n\nexport class Logger {\n\n    private isEnabled: boolean;\n\n    enableLog(value) {\n        this.isEnabled = value ? true : false;\n    }\n\n    log(...message) {\n        if (this.isEnabled) {\n            console.log(...message);\n        }\n    }\n\n    error(type: ERROR_TYPE, info?) {\n        return new ErrorHelper(type, info);\n    }\n}","import { promiseResolve } from '..';\nimport { IMapPromiseOption } from '../interfaces';\n\nconst runPromises = (promises: Array<Promise<any>>, converter: Function) => {\n  const maps = promises.map((val, index) => {\n    return converter(val, index);\n  });\n  return Promise.all(maps);\n};\n\nexport function mapPromise(values: any[], converter: Function, option: IMapPromiseOption = {} as any) {\n  const valuesLength = values.length;\n  const concurrency = option.concurrency || valuesLength;\n\n  let result = [];\n  const limitPromiseRun: () => Promise<any> = () => {\n    const promises = values.splice(0, concurrency);\n    return runPromises(promises, converter).then(promiseResult => {\n      result = result.concat(promiseResult);\n\n      return valuesLength > result.length ?\n        limitPromiseRun() : promiseResolve(result);\n    });\n  };\n\n  return limitPromiseRun();\n}\n","export const merge = (...obj) => {\n    return Object.assign({}, ...obj);\n};","const utils = require('ethereumjs-util');\n// const SafeBuffer = require('safe-buffer').Buffer;\nconst sha3 = utils.keccak256;\n\nimport { Buffer as SafeBuffer } from \"safe-buffer\";\n\nexport class MerkleTree {\n    leaves: any;\n    layers: any;\n\n    constructor(leaves = []) {\n        if (leaves.length < 1) {\n            throw new Error('Atleast 1 leaf needed');\n        }\n\n        const depth = Math.ceil(Math.log(leaves.length) / Math.log(2));\n        if (depth > 20) {\n            throw new Error('Depth must be 20 or less');\n        }\n\n        this.leaves = leaves.concat(\n            Array.from(\n                // tslint:disable-next-line\n                Array(Math.pow(2, depth) - leaves.length),\n                () => utils.zeros(32)\n            )\n        );\n        this.layers = [this.leaves];\n        this.createHashes(this.leaves);\n    }\n\n    createHashes(nodes) {\n        if (nodes.length === 1) {\n            return false;\n        }\n\n\n        const treeLevel = [];\n        for (let i = 0; i < nodes.length; i += 2) {\n            const left = nodes[i];\n            const right = nodes[i + 1];\n\n            const data = SafeBuffer.concat([left, right]);\n            treeLevel.push(sha3(data));\n        }\n\n        // is odd number of nodes\n        if (nodes.length % 2 === 1) {\n            treeLevel.push(nodes[nodes.length - 1]);\n        }\n\n        this.layers.push(treeLevel);\n        this.createHashes(treeLevel);\n    }\n\n    getLeaves() {\n        return this.leaves;\n    }\n\n    getLayers() {\n        return this.layers;\n    }\n\n    getRoot() {\n        return this.layers[this.layers.length - 1][0];\n    }\n\n    getProof(leaf) {\n        let index = -1;\n        for (let i = 0; i < this.leaves.length; i++) {\n            if (SafeBuffer.compare(leaf, this.leaves[i]) === 0) {\n                index = i;\n            }\n        }\n\n        const proof = [];\n        if (index <= this.getLeaves().length) {\n            let siblingIndex;\n            for (let i = 0; i < this.layers.length - 1; i++) {\n                if (index % 2 === 0) {\n                    siblingIndex = index + 1;\n                } else {\n                    siblingIndex = index - 1;\n                }\n                index = Math.floor(index / 2);\n                proof.push(this.layers[i][siblingIndex]);\n            }\n        }\n        return proof;\n    }\n\n    verify(value, index, root, proof) {\n        if (!Array.isArray(proof) || !value || !root) {\n            return false;\n        }\n\n        let hash = value;\n        for (let i = 0; i < proof.length; i++) {\n            const node = proof[i];\n            if (index % 2 === 0) {\n                hash = sha3(SafeBuffer.concat([hash, node]));\n            } else {\n                hash = sha3(SafeBuffer.concat([node, hash]));\n            }\n\n            index = Math.floor(index / 2);\n        }\n\n        return SafeBuffer.compare(hash, root) === 0;\n    }\n}\n\n","export const throwNotImplemented = <T>() => {\n    throw new Error(\"not implemented\");\n    return '' as any as T;\n};","export const promiseResolve = <T>(value?) => {\n    return Promise.resolve<T>(value);\n};","import { BaseWeb3Client } from \"../abstracts\";\nimport { MerkleTree } from \"./merkle_tree\";\nimport { bufferToHex, keccak256, rlp, setLengthLeft, toBuffer } from \"ethereumjs-util\";\nimport { ITransactionReceipt, IBlock, IBlockWithTransaction } from \"../interfaces\";\nimport { mapPromise } from \"./map_promise\";\nimport { BaseTrie as TRIE } from 'merkle-patricia-tree';\nimport { BlockHeader } from '@ethereumjs/block';\nimport { Converter, promiseResolve, utils } from \"..\";\nimport Common, { Chain, Hardfork } from '@ethereumjs/common';\n\n// Implementation adapted from Tom French's `matic-proofs` library used under MIT License\n// https://github.com/TomAFrench/matic-proofs\n\nexport class ProofUtil {\n\n    static async getFastMerkleProof(\n        web3: BaseWeb3Client,\n        blockNumber: number,\n        startBlock: number,\n        endBlock: number\n    ): Promise<string[]> {\n        const merkleTreeDepth = Math.ceil(Math.log2(endBlock - startBlock + 1));\n\n        // We generate the proof root down, whereas we need from leaf up\n        const reversedProof: string[] = [];\n\n        const offset = startBlock;\n        const targetIndex = blockNumber - offset;\n        let leftBound = 0;\n        let rightBound = endBlock - offset;\n        //   console.log(\"Searching for\", targetIndex);\n        for (let depth = 0; depth < merkleTreeDepth; depth += 1) {\n            const nLeaves = 2 ** (merkleTreeDepth - depth);\n\n            // The pivot leaf is the last leaf which is included in the left subtree\n            const pivotLeaf = leftBound + nLeaves / 2 - 1;\n\n            if (targetIndex > pivotLeaf) {\n                // Get the root hash to the merkle subtree to the left\n                const newLeftBound = pivotLeaf + 1;\n                // eslint-disable-next-line no-await-in-loop\n                const subTreeMerkleRoot = await this.queryRootHash(web3, offset + leftBound, offset + pivotLeaf);\n                reversedProof.push(subTreeMerkleRoot);\n                leftBound = newLeftBound;\n            } else {\n                // Things are more complex when querying to the right.\n                // Root hash may come some layers down so we need to build a full tree by padding with zeros\n                // Some trees may be completely empty\n\n                const newRightBound = Math.min(rightBound, pivotLeaf);\n\n                // Expect the merkle tree to have a height one less than the current layer\n                const expectedHeight = merkleTreeDepth - (depth + 1);\n                if (rightBound <= pivotLeaf) {\n                    // Tree is empty so we repeatedly hash zero to correct height\n                    const subTreeMerkleRoot = this.recursiveZeroHash(expectedHeight, web3);\n                    reversedProof.push(subTreeMerkleRoot);\n                } else {\n                    // Height of tree given by RPC node\n                    const subTreeHeight = Math.ceil(Math.log2(rightBound - pivotLeaf));\n\n                    // Find the difference in height between this and the subtree we want\n                    const heightDifference = expectedHeight - subTreeHeight;\n\n                    // For every extra layer we need to fill 2*n leaves filled with the merkle root of a zero-filled Merkle tree\n                    // We need to build a tree which has heightDifference layers\n\n                    // The first leaf will hold the root hash as returned by the RPC\n                    // eslint-disable-next-line no-await-in-loop\n                    const remainingNodesHash = await this.queryRootHash(web3, offset + pivotLeaf + 1, offset + rightBound);\n\n                    // The remaining leaves will hold the merkle root of a zero-filled tree of height subTreeHeight\n                    const leafRoots = this.recursiveZeroHash(subTreeHeight, web3);\n\n                    // Build a merkle tree of correct size for the subtree using these merkle roots\n                    const leaves = Array.from({ length: 2 ** heightDifference }, () => toBuffer(leafRoots));\n                    leaves[0] = remainingNodesHash;\n                    const subTreeMerkleRoot = new MerkleTree(leaves).getRoot();\n                    reversedProof.push(subTreeMerkleRoot);\n                }\n                rightBound = newRightBound;\n            }\n        }\n\n        return reversedProof.reverse();\n    }\n\n    static buildBlockProof(maticWeb3: BaseWeb3Client, startBlock: number, endBlock: number, blockNumber: number) {\n        return ProofUtil.getFastMerkleProof(\n            maticWeb3, blockNumber, startBlock, endBlock\n        ).then(proof => {\n            return bufferToHex(\n                Buffer.concat(\n                    proof.map(p => {\n                        return toBuffer(p);\n                    })\n                )\n            );\n        });\n    }\n\n    static queryRootHash(client: BaseWeb3Client, startBlock: number, endBlock: number) {\n        return client.getRootHash(startBlock, endBlock).then(rootHash => {\n            return toBuffer(`0x${rootHash}`);\n        }).catch(_ => {\n            return null;\n        });\n    }\n\n    static recursiveZeroHash(n: number, client: BaseWeb3Client) {\n        if (n === 0) return '0x0000000000000000000000000000000000000000000000000000000000000000';\n        const subHash = this.recursiveZeroHash(n - 1, client);\n        return keccak256(\n            toBuffer(client.encodeParameters([subHash, subHash], ['bytes32', 'bytes32'],))\n        );\n    }\n\n    static getReceiptProof(receipt: ITransactionReceipt, block: IBlockWithTransaction, web3: BaseWeb3Client, requestConcurrency = Infinity, receiptsVal?: ITransactionReceipt[]) {\n        const stateSyncTxHash = bufferToHex(ProofUtil.getStateSyncTxHash(block));\n        const receiptsTrie = new TRIE();\n        let receiptPromise: Promise<ITransactionReceipt[]>;\n        if (!receiptsVal) {\n            const receiptPromises = [];\n            block.transactions.forEach(tx => {\n                if (tx.transactionHash === stateSyncTxHash) {\n                    // ignore if tx hash is bor state-sync tx\n                    return;\n                }\n                receiptPromises.push(\n                    web3.getTransactionReceipt(tx.transactionHash)\n                );\n            });\n            receiptPromise = mapPromise(\n                receiptPromises,\n                val => {\n                    return val;\n                },\n                {\n                    concurrency: requestConcurrency,\n                }\n            );\n        }\n        else {\n            receiptPromise = promiseResolve(receiptsVal);\n        }\n\n        return receiptPromise.then(receipts => {\n            return Promise.all(\n                receipts.map(siblingReceipt => {\n                    const path = rlp.encode(siblingReceipt.transactionIndex);\n                    const rawReceipt = ProofUtil.getReceiptBytes(siblingReceipt);\n                    return receiptsTrie.put(path, rawReceipt);\n                })\n            );\n        }).then(_ => {\n            return receiptsTrie.findPath(rlp.encode(receipt.transactionIndex), true);\n        }).then(result => {\n            if (result.remaining.length > 0) {\n                throw new Error('Node does not contain the key');\n            }\n            // result.node.value\n            const prf = {\n                blockHash: toBuffer(receipt.blockHash),\n                parentNodes: result.stack.map(s => s.raw()),\n                root: ProofUtil.getRawHeader(block).receiptTrie,\n                path: rlp.encode(receipt.transactionIndex),\n                value: ProofUtil.isTypedReceipt(receipt) ? result.node.value : rlp.decode(result.node.value)\n            };\n            return prf;\n        });\n    }\n\n    static isTypedReceipt(receipt: ITransactionReceipt) {\n        const hexType = Converter.toHex(receipt.type);\n        return receipt.status != null && hexType !== \"0x0\" && hexType !== \"0x\";\n    }\n\n    // getStateSyncTxHash returns block's tx hash for state-sync receipt\n    // Bor blockchain includes extra receipt/tx for state-sync logs,\n    // but it is not included in transactionRoot or receiptRoot.\n    // So, while calculating proof, we have to exclude them.\n    //\n    // This is derived from block's hash and number\n    // state-sync tx hash = keccak256(\"matic-bor-receipt-\" + block.number + block.hash)\n    static getStateSyncTxHash(block): Buffer {\n        return keccak256(\n            Buffer.concat([\n                // prefix for bor receipt\n                Buffer.from('matic-bor-receipt-', 'utf-8'),\n                setLengthLeft(toBuffer(block.number), 8), // 8 bytes of block number (BigEndian)\n                toBuffer(block.hash), // block hash\n            ])\n        );\n    }\n\n    static getReceiptBytes(receipt: ITransactionReceipt) {\n        let encodedData = rlp.encode([\n            toBuffer(\n                receipt.status !== undefined && receipt.status != null ? (receipt.status ? '0x1' : '0x') : receipt.root\n            ),\n            toBuffer(receipt.cumulativeGasUsed),\n            toBuffer(receipt.logsBloom),\n            // encoded log array\n            receipt.logs.map(l => {\n                // [address, [topics array], data]\n                return [\n                    toBuffer(l.address), // convert address to buffer\n                    l.topics.map(toBuffer), // convert topics to buffer\n                    toBuffer(l.data), // convert data to buffer\n                ];\n            }),\n        ]);\n        if (ProofUtil.isTypedReceipt(receipt)) {\n            encodedData = Buffer.concat([toBuffer(receipt.type), encodedData]);\n        }\n        return encodedData;\n    }\n\n    static getRawHeader(_block) {\n        _block.difficulty = Converter.toHex(_block.difficulty) as any;\n        const common = new Common({\n            chain: Chain.Mainnet, hardfork: Hardfork.London\n        });\n        const rawHeader = BlockHeader.fromHeaderData(_block, {\n            common: common\n        });\n        return rawHeader;\n    }\n}\n","export function resolve(obj, path) {\n    const properties = Array.isArray(path) ? path : path.split(\".\");\n    return properties.reduce((prev, curr) => prev && prev[curr], obj);\n}","import { service, NetworkService } from \"../services\";\n\nexport const setProofApi = (url: string) => {\n    const urlLength = url.length;\n    if (url[urlLength - 1] !== '/') {\n        url += '/';\n    }\n    url += 'api/v1/';\n    service.network = new NetworkService(url);\n};","import { IPlugin } from \"../interfaces\";\nimport { defaultExport } from \"../default\";\n\nexport const use = (plugin, ...payload) => {\n    const pluginInstance: IPlugin = typeof plugin === \"function\" ? new plugin() : plugin;\n    return pluginInstance.setup(defaultExport, ...payload);\n};","import { IBaseClientConfig } from \"../interfaces\";\nimport { BaseWeb3Client } from \"../abstracts\";\nimport { ABIManager } from \"../utils\";\nimport { Logger } from \"./logger\";\nimport { utils } from \"..\";\n\nexport class Web3SideChainClient<T_CONFIG> {\n    parent: BaseWeb3Client;\n    child: BaseWeb3Client;\n\n    config: T_CONFIG;\n\n    abiManager: ABIManager;\n\n    logger = new Logger();\n    resolution: {};\n\n    init(config: IBaseClientConfig) {\n        config = config || {} as any;\n        config.parent.defaultConfig = config.parent.defaultConfig || {} as any;\n        config.child.defaultConfig = config.child.defaultConfig || {} as any;\n        this.config = config as any;\n\n        // tslint:disable-next-line\n        const Web3Client = utils.Web3Client;\n\n        if (!Web3Client) {\n            throw new Error(\"Web3Client is not set\");\n        }\n\n        if (utils.UnstoppableDomains) {\n            this.resolution = utils.UnstoppableDomains;\n        }\n\n        this.parent = new (Web3Client as any)(config.parent.provider, this.logger);\n        this.child = new (Web3Client as any)(config.child.provider, this.logger);\n\n        this.logger.enableLog(config.log);\n\n        const network = config.network;\n        const version = config.version;\n        const abiManager = this.abiManager =\n            new ABIManager(network, version);\n        this.logger.log(\"init called\", abiManager);\n        return abiManager.init().catch(err => {\n            throw new Error(`network ${network} - ${version} is not supported`);\n        });\n    }\n\n    getABI(name: string, type?: string) {\n        return this.abiManager.getABI(name, type);\n    }\n\n    getConfig(path: string) {\n        return this.abiManager.getConfig(path);\n    }\n\n    get mainPlasmaContracts() {\n        return this.getConfig(\"Main.Contracts\");\n    }\n\n    get mainPOSContracts() {\n        return this.getConfig(\"Main.POSContracts\");\n    }\n\n    isEIP1559Supported(isParent: boolean): boolean {\n        return isParent ? this.getConfig(\"Main.SupportsEIP1559\") :\n            this.getConfig(\"Matic.SupportsEIP1559\");\n    }\n\n\n}\n\n","module.exports = require(\"@ethereumjs/block\");","module.exports = require(\"@ethereumjs/common\");","module.exports = require(\"buffer\");","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"merkle-patricia-tree\");","module.exports = require(\"node-fetch\");"],"sourceRoot":""}