{"version":3,"sources":["webpack://Matic/webpack/bootstrap","webpack://Matic/external \"ethereumjs-util\"","webpack://Matic/./node_modules/safe-buffer/index.js","webpack://Matic/external \"@ethereumjs/common\"","webpack://Matic/external \"merkle-patricia-tree\"","webpack://Matic/external \"@ethereumjs/block\"","webpack://Matic/external \"buffer\"","webpack://Matic/external \"node-fetch\"","webpack://Matic/./src/abstracts/contract_method.ts","webpack://Matic/./src/enums/log_event_signature.ts","webpack://Matic/./src/enums/error_type.ts","webpack://Matic/./src/abstracts/base_web3_client.ts","webpack://Matic/./src/abstracts/base_contract.ts","webpack://Matic/./src/abstracts/base_big_number.ts","webpack://Matic/./src/implementation/bn.ts","webpack://Matic/./src/utils/use.ts","webpack://Matic/./src/utils/event_bus.ts","webpack://Matic/./src/utils/error_helper.ts","webpack://Matic/./src/utils/logger.ts","webpack://Matic/./src/utils/merge.ts","webpack://Matic/./src/utils/map_promise.ts","webpack://Matic/./src/utils/merkle_tree.ts","webpack://Matic/./src/utils/proof_util.ts","webpack://Matic/./src/utils/http_request.ts","webpack://Matic/./src/utils/converter.ts","webpack://Matic/./src/utils/web3_side_chain_client.ts","webpack://Matic/./src/utils/promise_resolve.ts","webpack://Matic/./src/utils/base_token.ts","webpack://Matic/./src/services/abi_service.ts","webpack://Matic/./src/services/network_service.ts","webpack://Matic/./src/services/index.ts","webpack://Matic/./src/config.ts","webpack://Matic/./src/utils/set_proof_api_url.ts","webpack://Matic/./src/utils/resolve.ts","webpack://Matic/./src/utils/bridge_client.ts","webpack://Matic/./src/utils/abi_manager.ts","webpack://Matic/./src/utils/not_implemented.ts","webpack://Matic/./src/utils/index.ts","webpack://Matic/./src/pos/pos_token.ts","webpack://Matic/./src/pos/erc20.ts","webpack://Matic/./src/pos/root_chain_manager.ts","webpack://Matic/./src/pos/exit_util.ts","webpack://Matic/./src/pos/root_chain.ts","webpack://Matic/./src/pos/erc721.ts","webpack://Matic/./src/pos/erc1155.ts","webpack://Matic/./src/pos/index.ts","webpack://Matic/./src/default.ts","webpack://Matic/./src/constant.ts","webpack://Matic/./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","buffer","Buffer","copyProps","src","dst","SafeBuffer","arg","encodingOrOffset","length","from","alloc","allocUnsafe","allocUnsafeSlow","TypeError","size","fill","encoding","buf","undefined","SlowBuffer","Log_Event_Signature","ERROR_TYPE","logger","getRootHash","startBlock","endBlock","this","sendRPCRequest","jsonrpc","method","params","Number","id","Date","getTime","then","payload","String","result","address","isBN","throwNotImplemented","toString","base","toNumber","toBuffer","add","sub","mul","div","lte","lt","gte","gt","eq","use","plugin","pluginInstance","setup","defaultExport","eventBusPromise","executor","promise","Promise","eventBus","EventBus","on","emit","ctx","_events","_ctx","event","cb","push","off","index","indexOf","splice","events","all","map","args","resolve","destroy","type","info","message","getMsg_","throw","errMsg","AllowedOnChild","AllowedOnRoot","ProofAPINotSet","BurnTxNotCheckPointed","EIP1559NotSupported","NullSpenderAddress","Unknown","enableLog","isEnabled","log","console","error","merge","assign","obj","mapPromise","values","converter","option","valuesLength","concurrency","limitPromiseRun","promises","maps","val","runPromises","promiseResult","concat","promiseResolve","utils","sha3","keccak256","leaves","Error","depth","Math","ceil","Array","pow","zeros","layers","createHashes","nodes","treeLevel","left","right","data","getLeaves","getLayers","getRoot","getProof","leaf","compare","proof","siblingIndex","floor","verify","root","isArray","hash","node","getFastMerkleProof","web3","blockNumber","merkleTreeDepth","log2","reversedProof","targetIndex","offset","leftBound","rightBound","nLeaves","pivotLeaf","newLeftBound","queryRootHash","subTreeMerkleRoot","newRightBound","min","expectedHeight","recursiveZeroHash","subTreeHeight","heightDifference","remainingNodesHash","reverse","buildBlockProof","maticWeb3","ProofUtil","client","rootHash","catch","_","subHash","encodeParameters","getReceiptProof","receipt","block","requestConcurrency","receiptsVal","receiptPromise","stateSyncTxHash","getStateSyncTxHash","receiptsTrie","transactions","forEach","tx","transactionHash","getTransactionReceipt","receipts","siblingReceipt","path","encode","transactionIndex","rawReceipt","getReceiptBytes","put","findPath","remaining","blockHash","parentNodes","stack","raw","getRawHeader","receiptTrie","isTypedReceipt","decode","hexType","toHex","status","number","encodedData","cumulativeGasUsed","logsBloom","logs","topics","_block","difficulty","common","chain","Mainnet","hardfork","London","fromHeaderData","fetch","default","baseUrl","url","query","keys","encodeURIComponent","join","headers","res","json","post","body","JSON","stringify","amount","dataType","BN","slice","init","config","parent","defaultConfig","child","Web3Client","UnstoppableDomains","resolution","provider","network","version","abiManager","err","getABI","getConfig","isEIP1559Supported","isParent","contractParam","getContract","contract_","bridgeType","abi","getContract_","tokenAddress","processWrite","validateTxOption_","createTransactionConfig","txConfig","isWrite","returnTransaction","encodeABI","to","write","sendTransaction","getClient","readTransaction","read","TransactionOptionNotObject","processRead","parentDefaultConfig","childDefaultConfig","maxFeePerGas","maxPriorityFeePerGas","gasLimit","estimateGas","nonce","getTransactionCount","chainId","getChainId","transferERC20","contract","transferERC721","tokenId","checkForRoot","methodName","checkForChild","transferERC1155","param","httpRequest","HttpRequest","contractName","getAddress","createUrl","getBlockIncluded","headerBlockNumber","decimalHeaderBlockNumber","parseInt","start","end","service","setProofApi","split","reduce","prev","curr","isCheckPointed","txHash","exitUtil","isDeposited","depositTxHash","token","lastStateId","targetLog","find","q","rootStateId","decodeParameters","rootStateIdBN","cache","networkName","targetBridgeABICache","abiForContract","setABI","abiStore","BaseWeb3Client","getPOSContracts","rootChainManager","getPredicateAddress","predicateAddress","tokenType","typeToPredicateMethod","isWithdrawn","eventSignature","getExitHash","exitHash","isExitProcessed","isWithdrawnOnIndex","withdrawExitPOS","burnTxHash","isFast","buildPayloadForExit","exit","getContracts","getBalance","userAddress","getAllowance","spenderAddress","predicatePromise","approve","approveMax","MAX_AMOUNT","deposit","amountInABI","depositEther_","withdrawStart","withdrawExit_","burnTransactionHash","burnEventSignature","Erc20Transfer","withdrawExit","withdrawExitFaster","isWithdrawExited","transfer","client_","depositData","exitPayload","rootChain","maticClient_","getLogIndex_","logEventSig","logIndex","findIndex","toLowerCase","getAllLogIndices_","logIndices","getChainBlockInfo","getLastChildBlock","getTransaction","lastChildBlock","txBlockNumber","isCheckPointed_","getRootBlockInfo","rootBlockNumber","findRootBlockFromChild","rootBlockInfo","getRootBlockInfoFromAPI","headerBlock","getBlockProof","getBlockProofFromAPI","blockProof","blockInfo","getBlockWithTransaction","rootBlockInfoResult","blockProofResult","receiptProof","encodePayload_","timestamp","transactionsRoot","receiptsRoot","buildMultiplePayloadsForExit","payloads","headerNumber","receiptParentNodes","blockResult","nibbleArr","byte","etheriumSha3","childBlockNumber","bigOne","bigtwo","checkPointInterval","currentHeaderBlock","ans","mid","headerStart","headerEnd","validateMany_","tokenIds","getTokensCount","options","count","getTokenIdAtIndexForUser","getAllTokens","limit","isApproved","isApprovedAll","approveAll","depositMany","tokensInHex","withdrawStartWithMetaData","withdrawStartMany","Erc721Transfer","withdrawExitOnIndex","isWithdrawExitedMany","Erc721BatchTransfer","isWithdrawExitedOnIndex","erc1155","getAddress_","addresses","addressConfig","approveAll_","predicateAddressPromise","approveAllForMintable","amounts","emptyHex","a","amountsInHex","Erc1155Transfer","withdrawExitMany","Erc1155BatchTransfer","withdrawExitFasterMany","mainPOSContracts","RootChainManagerProxy","mainPlasmaContracts","RootChainProxy","RootChainManager","erc20","getContracts_","erc721","depositEther","POSClient"],"mappings":"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","file":"matic.node.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"ethereumjs-util\");","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","module.exports = require(\"@ethereumjs/common\");","module.exports = require(\"merkle-patricia-tree\");","module.exports = require(\"@ethereumjs/block\");","module.exports = require(\"buffer\");","module.exports = require(\"node-fetch\");","import { ITransactionRequestConfig, ITransactionWriteResult } from \"../interfaces\";\nimport { Logger } from \"../utils\";\n\nexport abstract class BaseContractMethod {\n    constructor(public logger: Logger) {\n\n    }\n    abstract get address(): string;\n    abstract read<T>(tx?: ITransactionRequestConfig, defaultBlock?: number | string): Promise<T>;\n    abstract write(tx: ITransactionRequestConfig,): ITransactionWriteResult;\n    abstract estimateGas(tx: ITransactionRequestConfig,): Promise<number>;\n    abstract encodeABI(): any;\n}","export enum Log_Event_Signature {\n    // PlasmaErc20WithdrawEventSig = '0xebff2602b3f468259e1e99f613fed6691f3a6526effe6ef3e768ba7ae7a36c4f',\n    // PlasmaErc721WithdrawEventSig = '0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb',\n    Erc20Transfer = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    Erc721Transfer = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n    Erc1155Transfer = '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62',\n    Erc721BatchTransfer = '0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df',\n    Erc1155BatchTransfer = '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb',\n    Erc721TransferWithMetadata = '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14',\n\n}","export enum ERROR_TYPE {\n    AllowedOnRoot = \"allowed_on_root\",\n    AllowedOnChild = \"allowed_on_child\",\n    Unknown = \"unknown\",\n    ProofAPINotSet = \"proof_api_not_set\",\n    TransactionOptionNotObject = \"transation_object_not_object\",\n    BurnTxNotCheckPointed = \"burn_tx_not_checkpointed\",\n    EIP1559NotSupported = \"eip-1559_not_supported\",\n    NullSpenderAddress = \"null_spender_address\"\n}","import { BaseContract } from \"../abstracts\";\nimport { ITransactionRequestConfig, ITransactionReceipt, ITransactionData, IBlock, IBlockWithTransaction, IJsonRpcRequestPayload, IJsonRpcResponse, ITransactionWriteResult } from \"../interfaces\";\nimport { Logger } from \"../utils\";\n\nexport abstract class BaseWeb3Client {\n\n    constructor(public logger: Logger) {\n\n    }\n\n    abstract getContract(address: string, abi: any): BaseContract;\n\n    abstract read(config: ITransactionRequestConfig): Promise<string>;\n\n    abstract write(config: ITransactionRequestConfig): ITransactionWriteResult;\n    abstract getGasPrice(): Promise<string>;\n    abstract estimateGas(config: ITransactionRequestConfig): Promise<number>;\n    abstract getChainId(): Promise<number>;\n    abstract getTransactionCount(address: string, blockNumber: any): Promise<number>;\n\n    abstract getTransaction(transactionHash: string): Promise<ITransactionData>;\n    abstract getTransactionReceipt(transactionHash: string): Promise<ITransactionReceipt>;\n    // abstract extend(property: string, methods: IMethod[])\n\n    abstract getBlock(blockHashOrBlockNumber): Promise<IBlock>;\n    abstract getBlockWithTransaction(blockHashOrBlockNumber): Promise<IBlockWithTransaction>;\n\n    getRootHash?(startBlock: number, endBlock: number) {\n        return this.sendRPCRequest({\n            jsonrpc: '2.0',\n            method: 'eth_getRootHash',\n            params: [Number(startBlock), Number(endBlock)],\n            id: new Date().getTime()\n        }).then(payload => {\n            return String(payload.result);\n        });\n    }\n\n    abstract sendRPCRequest(request: IJsonRpcRequestPayload): Promise<IJsonRpcResponse>;\n\n    abstract encodeParameters(params: any[], types: any[]): string;\n    abstract decodeParameters(hexString: string, types: any[]): any[];\n    abstract etheriumSha3(...value): string;\n\n}\n","import { BaseContractMethod } from \"../abstracts\";\nimport { Logger } from \"../utils\";\n\nexport abstract class BaseContract {\n\n    constructor(public address: string, public logger:Logger) {\n\n    }\n\n    abstract method(methodName: string, ...args): BaseContractMethod;\n}","import { throwNotImplemented } from \"..\";\n\nexport abstract class BaseBigNumber {\n    static isBN(value) {\n        return throwNotImplemented<boolean>();\n    }\n\n    abstract toString(): string;\n    abstract toNumber(): number;\n    abstract toBuffer(): Buffer;\n    abstract add(value: BaseBigNumber): BaseBigNumber;\n    abstract sub(value: BaseBigNumber): BaseBigNumber;\n    abstract mul(value: BaseBigNumber): BaseBigNumber;\n    abstract div(value: BaseBigNumber): BaseBigNumber;\n\n    abstract lte(value: BaseBigNumber): boolean;\n    abstract lt(value: BaseBigNumber): boolean;\n    abstract gte(value: BaseBigNumber): boolean;\n    abstract gt(value: BaseBigNumber): boolean;\n    abstract eq(value: BaseBigNumber): boolean;\n}","import { throwNotImplemented } from \"..\";\nimport { BaseBigNumber } from \"../abstracts\";\n\nexport class EmptyBigNumber extends BaseBigNumber {\n\n    constructor(value) {\n        super();\n    }\n\n    toString(base?) {\n        return throwNotImplemented<string>();\n    }\n\n    toNumber() {\n        return throwNotImplemented<number>();\n    }\n\n    toBuffer(base?) {\n        return throwNotImplemented<Buffer>();\n    }\n\n    add(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    sub(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    mul(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    div(value: BaseBigNumber) {\n        return throwNotImplemented<BaseBigNumber>();\n    }\n\n    lte(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n    }\n\n    lt(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n\n    }\n\n    gte(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n\n    }\n\n    gt(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n\n    }\n\n    eq(value: BaseBigNumber) {\n        return throwNotImplemented<boolean>();\n    }\n}","import { IPlugin } from \"../interfaces\";\nimport { defaultExport } from \"../default\";\n\nexport const use = (plugin, ...payload) => {\n    const pluginInstance: IPlugin = typeof plugin === \"function\" ? new plugin() : plugin;\n    return pluginInstance.setup(defaultExport, ...payload);\n};","export interface IEventBusPromise<T> extends Promise<T> {\n    on(event: string, cb: Function);\n    emit(event: string, ...args);\n    destroy();\n}\n\nexport const eventBusPromise = function <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) {\n    const promise: IEventBusPromise<T> = new Promise(executor) as any;\n    const eventBus = new EventBus();\n    promise.on = eventBus.on.bind(eventBus);\n    promise.emit = eventBus.emit.bind(eventBus);\n    return promise;\n};\n\nexport class EventBus {\n\n    constructor(ctx?) {\n        this._ctx = ctx;\n    }\n\n    private _ctx;\n\n    private _events: {\n        [key: string]: Function[]\n    } = {};\n\n    on(event: string, cb: Function) {\n        if (this._events[event] == null) {\n            this._events[event] = [];\n        }\n        this._events[event].push(cb);\n        return this;\n    }\n\n    off(event: string, cb: Function) {\n        if (this._events[event]) {\n            if (cb) {\n                const index = this._events[event].indexOf(cb);\n                this._events[event].splice(index, 1);\n            }\n            else {\n                this._events[event] = [];\n            }\n        }\n    }\n\n    emit(event: string, ...args) {\n        const events = this._events[event] || [];\n        return Promise.all(\n            events.map(cb => {\n                const result = cb.call(this._ctx, ...args);\n                return result && result.then ? result : Promise.resolve(result);\n            })\n        );\n    }\n\n    destroy() {\n        this._events = null;\n        this._ctx = null;\n    }\n}","import { ERROR_TYPE } from \"../enums\";\nimport { IError } from \"../interfaces\";\n\nexport class ErrorHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n\n    constructor(type: ERROR_TYPE, info?) {\n        this.type = type;\n        this.message = this.getMsg_(info);\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg_(info) {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.AllowedOnChild:\n                errMsg = `The action ${info} is allowed only on child token.`;\n                break;\n            case ERROR_TYPE.AllowedOnRoot:\n                errMsg = `The action ${info} is allowed only on root token.`;\n                break;\n            case ERROR_TYPE.ProofAPINotSet:\n                errMsg = `Proof api is not set, please set it using \"setProofApi\"`;\n                break;\n            case ERROR_TYPE.BurnTxNotCheckPointed:\n                errMsg = `Burn transaction has not been checkpointed as yet`;\n                break;\n            case ERROR_TYPE.EIP1559NotSupported:\n                errMsg = `${info ? 'Root' : 'Child'} chain doesn't support eip-1559`;\n                break;\n            case ERROR_TYPE.NullSpenderAddress:\n                errMsg = `Please provide spender address.`;\n                break;\n            default:\n                if (!this.type) {\n                    this.type = ERROR_TYPE.Unknown;\n                }\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { ERROR_TYPE } from \"../enums\";\nimport { ErrorHelper } from \"./error_helper\";\n\nexport class Logger {\n\n    private isEnabled: boolean;\n\n    enableLog(value) {\n        this.isEnabled = value ? true : false;\n    }\n\n    log(...message) {\n        if (this.isEnabled) {\n            console.log(...message);\n        }\n    }\n\n    error(type: ERROR_TYPE, info?) {\n        return new ErrorHelper(type, info);\n    }\n}","export const merge = (...obj) => {\n    return Object.assign({}, ...obj);\n};","import { promiseResolve } from '..';\nimport { IMapPromiseOption } from '../interfaces';\n\nconst runPromises = (promises: Array<Promise<any>>, converter: Function) => {\n  const maps = promises.map((val, index) => {\n    return converter(val, index);\n  });\n  return Promise.all(maps);\n};\n\nexport function mapPromise(values: any[], converter: Function, option: IMapPromiseOption = {} as any) {\n  const valuesLength = values.length;\n  const concurrency = option.concurrency || valuesLength;\n\n  let result = [];\n  const limitPromiseRun: () => Promise<any> = () => {\n    const promises = values.splice(0, concurrency);\n    return runPromises(promises, converter).then(promiseResult => {\n      result = result.concat(promiseResult);\n\n      return valuesLength > result.length ?\n        limitPromiseRun() : promiseResolve(result);\n    });\n  };\n\n  return limitPromiseRun();\n}\n","const utils = require('ethereumjs-util');\n// const SafeBuffer = require('safe-buffer').Buffer;\nconst sha3 = utils.keccak256;\n\nimport { Buffer as SafeBuffer } from \"safe-buffer\";\n\nexport class MerkleTree {\n    leaves: any;\n    layers: any;\n\n    constructor(leaves = []) {\n        if (leaves.length < 1) {\n            throw new Error('Atleast 1 leaf needed');\n        }\n\n        const depth = Math.ceil(Math.log(leaves.length) / Math.log(2));\n        if (depth > 20) {\n            throw new Error('Depth must be 20 or less');\n        }\n\n        this.leaves = leaves.concat(\n            Array.from(\n                // tslint:disable-next-line\n                Array(Math.pow(2, depth) - leaves.length),\n                () => utils.zeros(32)\n            )\n        );\n        this.layers = [this.leaves];\n        this.createHashes(this.leaves);\n    }\n\n    createHashes(nodes) {\n        if (nodes.length === 1) {\n            return false;\n        }\n\n\n        const treeLevel = [];\n        for (let i = 0; i < nodes.length; i += 2) {\n            const left = nodes[i];\n            const right = nodes[i + 1];\n\n            const data = SafeBuffer.concat([left, right]);\n            treeLevel.push(sha3(data));\n        }\n\n        // is odd number of nodes\n        if (nodes.length % 2 === 1) {\n            treeLevel.push(nodes[nodes.length - 1]);\n        }\n\n        this.layers.push(treeLevel);\n        this.createHashes(treeLevel);\n    }\n\n    getLeaves() {\n        return this.leaves;\n    }\n\n    getLayers() {\n        return this.layers;\n    }\n\n    getRoot() {\n        return this.layers[this.layers.length - 1][0];\n    }\n\n    getProof(leaf) {\n        let index = -1;\n        for (let i = 0; i < this.leaves.length; i++) {\n            if (SafeBuffer.compare(leaf, this.leaves[i]) === 0) {\n                index = i;\n            }\n        }\n\n        const proof = [];\n        if (index <= this.getLeaves().length) {\n            let siblingIndex;\n            for (let i = 0; i < this.layers.length - 1; i++) {\n                if (index % 2 === 0) {\n                    siblingIndex = index + 1;\n                } else {\n                    siblingIndex = index - 1;\n                }\n                index = Math.floor(index / 2);\n                proof.push(this.layers[i][siblingIndex]);\n            }\n        }\n        return proof;\n    }\n\n    verify(value, index, root, proof) {\n        if (!Array.isArray(proof) || !value || !root) {\n            return false;\n        }\n\n        let hash = value;\n        for (let i = 0; i < proof.length; i++) {\n            const node = proof[i];\n            if (index % 2 === 0) {\n                hash = sha3(SafeBuffer.concat([hash, node]));\n            } else {\n                hash = sha3(SafeBuffer.concat([node, hash]));\n            }\n\n            index = Math.floor(index / 2);\n        }\n\n        return SafeBuffer.compare(hash, root) === 0;\n    }\n}\n\n","import { BaseWeb3Client } from \"../abstracts\";\nimport { MerkleTree } from \"./merkle_tree\";\nimport { bufferToHex, keccak256, rlp, setLengthLeft, toBuffer } from \"ethereumjs-util\";\nimport { ITransactionReceipt, IBlock, IBlockWithTransaction } from \"../interfaces\";\nimport { mapPromise } from \"./map_promise\";\nimport { BaseTrie as TRIE } from 'merkle-patricia-tree';\nimport { BlockHeader } from '@ethereumjs/block';\nimport { Converter, promiseResolve, utils } from \"..\";\nimport Common, { Chain, Hardfork } from '@ethereumjs/common';\n\n// Implementation adapted from Tom French's `matic-proofs` library used under MIT License\n// https://github.com/TomAFrench/matic-proofs\n\nexport class ProofUtil {\n\n    static async getFastMerkleProof(\n        web3: BaseWeb3Client,\n        blockNumber: number,\n        startBlock: number,\n        endBlock: number\n    ): Promise<string[]> {\n        const merkleTreeDepth = Math.ceil(Math.log2(endBlock - startBlock + 1));\n\n        // We generate the proof root down, whereas we need from leaf up\n        const reversedProof: string[] = [];\n\n        const offset = startBlock;\n        const targetIndex = blockNumber - offset;\n        let leftBound = 0;\n        let rightBound = endBlock - offset;\n        //   console.log(\"Searching for\", targetIndex);\n        for (let depth = 0; depth < merkleTreeDepth; depth += 1) {\n            const nLeaves = 2 ** (merkleTreeDepth - depth);\n\n            // The pivot leaf is the last leaf which is included in the left subtree\n            const pivotLeaf = leftBound + nLeaves / 2 - 1;\n\n            if (targetIndex > pivotLeaf) {\n                // Get the root hash to the merkle subtree to the left\n                const newLeftBound = pivotLeaf + 1;\n                // eslint-disable-next-line no-await-in-loop\n                const subTreeMerkleRoot = await this.queryRootHash(web3, offset + leftBound, offset + pivotLeaf);\n                reversedProof.push(subTreeMerkleRoot);\n                leftBound = newLeftBound;\n            } else {\n                // Things are more complex when querying to the right.\n                // Root hash may come some layers down so we need to build a full tree by padding with zeros\n                // Some trees may be completely empty\n\n                const newRightBound = Math.min(rightBound, pivotLeaf);\n\n                // Expect the merkle tree to have a height one less than the current layer\n                const expectedHeight = merkleTreeDepth - (depth + 1);\n                if (rightBound <= pivotLeaf) {\n                    // Tree is empty so we repeatedly hash zero to correct height\n                    const subTreeMerkleRoot = this.recursiveZeroHash(expectedHeight, web3);\n                    reversedProof.push(subTreeMerkleRoot);\n                } else {\n                    // Height of tree given by RPC node\n                    const subTreeHeight = Math.ceil(Math.log2(rightBound - pivotLeaf));\n\n                    // Find the difference in height between this and the subtree we want\n                    const heightDifference = expectedHeight - subTreeHeight;\n\n                    // For every extra layer we need to fill 2*n leaves filled with the merkle root of a zero-filled Merkle tree\n                    // We need to build a tree which has heightDifference layers\n\n                    // The first leaf will hold the root hash as returned by the RPC\n                    // eslint-disable-next-line no-await-in-loop\n                    const remainingNodesHash = await this.queryRootHash(web3, offset + pivotLeaf + 1, offset + rightBound);\n\n                    // The remaining leaves will hold the merkle root of a zero-filled tree of height subTreeHeight\n                    const leafRoots = this.recursiveZeroHash(subTreeHeight, web3);\n\n                    // Build a merkle tree of correct size for the subtree using these merkle roots\n                    const leaves = Array.from({ length: 2 ** heightDifference }, () => toBuffer(leafRoots));\n                    leaves[0] = remainingNodesHash;\n                    const subTreeMerkleRoot = new MerkleTree(leaves).getRoot();\n                    reversedProof.push(subTreeMerkleRoot);\n                }\n                rightBound = newRightBound;\n            }\n        }\n\n        return reversedProof.reverse();\n    }\n\n    static buildBlockProof(maticWeb3: BaseWeb3Client, startBlock: number, endBlock: number, blockNumber: number) {\n        return ProofUtil.getFastMerkleProof(\n            maticWeb3, blockNumber, startBlock, endBlock\n        ).then(proof => {\n            return bufferToHex(\n                Buffer.concat(\n                    proof.map(p => {\n                        return toBuffer(p);\n                    })\n                )\n            );\n        });\n    }\n\n    static queryRootHash(client: BaseWeb3Client, startBlock: number, endBlock: number) {\n        return client.getRootHash(startBlock, endBlock).then(rootHash => {\n            return toBuffer(`0x${rootHash}`);\n        }).catch(_ => {\n            return null;\n        });\n    }\n\n    static recursiveZeroHash(n: number, client: BaseWeb3Client) {\n        if (n === 0) return '0x0000000000000000000000000000000000000000000000000000000000000000';\n        const subHash = this.recursiveZeroHash(n - 1, client);\n        return keccak256(\n            toBuffer(client.encodeParameters([subHash, subHash], ['bytes32', 'bytes32'],))\n        );\n    }\n\n    static getReceiptProof(receipt: ITransactionReceipt, block: IBlockWithTransaction, web3: BaseWeb3Client, requestConcurrency = Infinity, receiptsVal?: ITransactionReceipt[]) {\n        const stateSyncTxHash = bufferToHex(ProofUtil.getStateSyncTxHash(block));\n        const receiptsTrie = new TRIE();\n        let receiptPromise: Promise<ITransactionReceipt[]>;\n        if (!receiptsVal) {\n            const receiptPromises = [];\n            block.transactions.forEach(tx => {\n                if (tx.transactionHash === stateSyncTxHash) {\n                    // ignore if tx hash is bor state-sync tx\n                    return;\n                }\n                receiptPromises.push(\n                    web3.getTransactionReceipt(tx.transactionHash)\n                );\n            });\n            receiptPromise = mapPromise(\n                receiptPromises,\n                val => {\n                    return val;\n                },\n                {\n                    concurrency: requestConcurrency,\n                }\n            );\n        }\n        else {\n            receiptPromise = promiseResolve(receiptsVal);\n        }\n\n        return receiptPromise.then(receipts => {\n            return Promise.all(\n                receipts.map(siblingReceipt => {\n                    const path = rlp.encode(siblingReceipt.transactionIndex);\n                    const rawReceipt = ProofUtil.getReceiptBytes(siblingReceipt);\n                    return receiptsTrie.put(path, rawReceipt);\n                })\n            );\n        }).then(_ => {\n            return receiptsTrie.findPath(rlp.encode(receipt.transactionIndex), true);\n        }).then(result => {\n            if (result.remaining.length > 0) {\n                throw new Error('Node does not contain the key');\n            }\n            // result.node.value\n            const prf = {\n                blockHash: toBuffer(receipt.blockHash),\n                parentNodes: result.stack.map(s => s.raw()),\n                root: ProofUtil.getRawHeader(block).receiptTrie,\n                path: rlp.encode(receipt.transactionIndex),\n                value: ProofUtil.isTypedReceipt(receipt) ? result.node.value : rlp.decode(result.node.value)\n            };\n            return prf;\n        });\n    }\n\n    static isTypedReceipt(receipt: ITransactionReceipt) {\n        const hexType = Converter.toHex(receipt.type);\n        return receipt.status != null && hexType !== \"0x0\" && hexType !== \"0x\";\n    }\n\n    // getStateSyncTxHash returns block's tx hash for state-sync receipt\n    // Bor blockchain includes extra receipt/tx for state-sync logs,\n    // but it is not included in transactionRoot or receiptRoot.\n    // So, while calculating proof, we have to exclude them.\n    //\n    // This is derived from block's hash and number\n    // state-sync tx hash = keccak256(\"matic-bor-receipt-\" + block.number + block.hash)\n    static getStateSyncTxHash(block): Buffer {\n        return keccak256(\n            Buffer.concat([\n                // prefix for bor receipt\n                Buffer.from('matic-bor-receipt-', 'utf-8'),\n                setLengthLeft(toBuffer(block.number), 8), // 8 bytes of block number (BigEndian)\n                toBuffer(block.hash), // block hash\n            ])\n        );\n    }\n\n    static getReceiptBytes(receipt: ITransactionReceipt) {\n        let encodedData = rlp.encode([\n            toBuffer(\n                receipt.status !== undefined && receipt.status != null ? (receipt.status ? '0x1' : '0x') : receipt.root\n            ),\n            toBuffer(receipt.cumulativeGasUsed),\n            toBuffer(receipt.logsBloom),\n            // encoded log array\n            receipt.logs.map(l => {\n                // [address, [topics array], data]\n                return [\n                    toBuffer(l.address), // convert address to buffer\n                    l.topics.map(toBuffer), // convert topics to buffer\n                    toBuffer(l.data), // convert data to buffer\n                ];\n            }),\n        ]);\n        if (ProofUtil.isTypedReceipt(receipt)) {\n            encodedData = Buffer.concat([toBuffer(receipt.type), encodedData]);\n        }\n        return encodedData;\n    }\n\n    static getRawHeader(_block) {\n        _block.difficulty = Converter.toHex(_block.difficulty) as any;\n        const common = new Common({\n            chain: Chain.Mainnet, hardfork: Hardfork.London\n        });\n        const rawHeader = BlockHeader.fromHeaderData(_block, {\n            common: common\n        });\n        return rawHeader;\n    }\n}\n","const fetch: (input: RequestInfo, init?: RequestInit) => Promise<Response> =\n    (() => {\n        if (process.env.BUILD_ENV === \"node\") {\n            return require('node-fetch').default;\n        }\n        return window.fetch;\n    })();\n\n\nexport class HttpRequest {\n    baseUrl = \"\";\n\n    constructor(option: { baseUrl: string } | string = {} as any) {\n        option = typeof option === \"string\" ? {\n            baseUrl: option\n        } : option;\n\n        if (option.baseUrl) {\n            this.baseUrl = option.baseUrl;\n        }\n    }\n\n    get<T>(url = \"\", query = {}): Promise<T> {\n        url = this.baseUrl + url + Object.keys(query).\n            map(key => `${encodeURIComponent(key)}=${encodeURIComponent(query[key])}`).join('&');\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }).then(res => {\n            return res.json();\n        });\n    }\n\n    post(url = \"\", body) {\n        url = this.baseUrl + url;\n\n        return fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            },\n            body: body ? JSON.stringify(body) : null\n        }).then(res => {\n            return res.json();\n        });\n    }\n}","import { BaseBigNumber } from \"../abstracts\";\nimport { utils } from \"../utils\";\n\nexport class Converter {\n    static toHex(amount: BaseBigNumber | string | number) {\n        const dataType = typeof amount;\n        if (dataType === 'number') {\n            amount = new utils.BN(amount);\n        } else if (dataType === 'string') {\n            if ((amount as string).slice(0, 2) === '0x') {\n                return amount;\n            }\n            amount = new utils.BN(amount);\n        }\n        if (utils.BN.isBN(amount)) {\n            return '0x' + amount.toString(16);\n        }\n        else {\n            throw new Error(`Invalid value ${amount}, value is not a number.`);\n        }\n    }\n}","import { IBaseClientConfig } from \"../interfaces\";\nimport { BaseWeb3Client } from \"../abstracts\";\nimport { ABIManager } from \"../utils\";\nimport { Logger } from \"./logger\";\nimport { utils } from \"..\";\n\nexport class Web3SideChainClient<T_CONFIG> {\n    parent: BaseWeb3Client;\n    child: BaseWeb3Client;\n\n    config: T_CONFIG;\n\n    abiManager: ABIManager;\n\n    logger = new Logger();\n    resolution: {};\n\n    init(config: IBaseClientConfig) {\n        config = config || {} as any;\n        config.parent.defaultConfig = config.parent.defaultConfig || {} as any;\n        config.child.defaultConfig = config.child.defaultConfig || {} as any;\n        this.config = config as any;\n\n        // tslint:disable-next-line\n        const Web3Client = utils.Web3Client;\n\n        if (!Web3Client) {\n            throw new Error(\"Web3Client is not set\");\n        }\n\n        if (utils.UnstoppableDomains) {\n            this.resolution = utils.UnstoppableDomains;\n        }\n\n        this.parent = new (Web3Client as any)(config.parent.provider, this.logger);\n        this.child = new (Web3Client as any)(config.child.provider, this.logger);\n\n        this.logger.enableLog(config.log);\n\n        const network = config.network;\n        const version = config.version;\n        const abiManager = this.abiManager =\n            new ABIManager(network, version);\n        this.logger.log(\"init called\", abiManager);\n        return abiManager.init().catch(err => {\n            throw new Error(`network ${network} - ${version} is not supported`);\n        });\n    }\n\n    getABI(name: string, type?: string) {\n        return this.abiManager.getABI(name, type);\n    }\n\n    getConfig(path: string) {\n        return this.abiManager.getConfig(path);\n    }\n\n    get mainPlasmaContracts() {\n        return this.getConfig(\"Main.Contracts\");\n    }\n\n    get mainPOSContracts() {\n        return this.getConfig(\"Main.POSContracts\");\n    }\n\n    isEIP1559Supported(isParent: boolean): boolean {\n        return isParent ? this.getConfig(\"Main.SupportsEIP1559\") :\n            this.getConfig(\"Matic.SupportsEIP1559\");\n    }\n\n\n}\n\n","export const promiseResolve = <T>(value?) => {\n    return Promise.resolve<T>(value);\n};","import { Web3SideChainClient } from \"./web3_side_chain_client\";\nimport { ITransactionRequestConfig, ITransactionOption, IContractInitParam, IPOSClientConfig, IBaseClientConfig, ITransactionWriteResult } from \"../interfaces\";\nimport { BaseContractMethod, BaseContract, BaseWeb3Client } from \"../abstracts\";\nimport { Converter, merge } from \"../utils\";\nimport { promiseResolve } from \"./promise_resolve\";\nimport { ERROR_TYPE } from \"../enums\";\nimport { POSERC1155TransferParam, TYPE_AMOUNT } from \"../types\";\nimport { ErrorHelper } from \"./error_helper\";\n\nexport interface ITransactionConfigParam {\n    txConfig: ITransactionRequestConfig;\n    method?: BaseContractMethod;\n    isWrite?: boolean;\n    isParent?: boolean;\n}\n\nexport class BaseToken<T_CLIENT_CONFIG> {\n\n    private contract_: BaseContract;\n\n    constructor(\n        protected contractParam: IContractInitParam,\n        protected client: Web3SideChainClient<T_CLIENT_CONFIG>,\n    ) {\n    }\n\n\n    getContract(): Promise<BaseContract> {\n        if (this.contract_) {\n            return promiseResolve<BaseContract>(this.contract_ as any);\n        }\n        const contractParam = this.contractParam;\n        return this.client.getABI(\n            contractParam.name,\n            contractParam.bridgeType,\n        ).then(abi => {\n            this.contract_ = this.getContract_({\n                abi,\n                isParent: contractParam.isParent,\n                tokenAddress: contractParam.address\n            });\n            return this.contract_;\n        });\n    }\n\n    protected processWrite(method: BaseContractMethod, option: ITransactionOption = {}): Promise<ITransactionWriteResult> {\n        this.validateTxOption_(option);\n\n        this.client.logger.log(\"process write\");\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: true,\n                method,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                this.client.logger.log(\"process write config\");\n                if (option.returnTransaction) {\n                    return merge(config, {\n                        data: method.encodeABI(),\n                        to: method.address\n                    } as ITransactionRequestConfig);\n                }\n                const methodResult = method.write(\n                    config,\n                );\n                return methodResult;\n            });\n    }\n\n    protected sendTransaction(option: ITransactionOption = {}): Promise<ITransactionWriteResult> {\n        this.validateTxOption_(option);\n\n        const isParent = this.contractParam.isParent;\n        const client = this.getClient(isParent);\n        client.logger.log(\"process write\");\n\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: true,\n                method: null as any,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                client.logger.log(\"process write config\");\n                if (option.returnTransaction) {\n                    return config as any;\n                }\n                const methodResult = client.write(\n                    config,\n                );\n                return methodResult;\n            });\n    }\n\n    protected readTransaction(option: ITransactionOption = {}): Promise<ITransactionWriteResult> {\n        this.validateTxOption_(option);\n        const isParent = this.contractParam.isParent;\n        const client = this.getClient(isParent);\n        client.logger.log(\"process read\");\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: true,\n                method: null as any,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                client.logger.log(\"write tx config created\");\n                if (option.returnTransaction) {\n                    return config as any;\n                }\n                return client.read(\n                    config,\n                );\n            });\n    }\n\n    private validateTxOption_(option: ITransactionOption) {\n        if (typeof option !== 'object' || Array.isArray(option)) {\n            new ErrorHelper(ERROR_TYPE.TransactionOptionNotObject).throw();\n        }\n    }\n\n    protected processRead<T>(method: BaseContractMethod, option: ITransactionOption = {}): Promise<T> {\n        this.validateTxOption_(option);\n        this.client.logger.log(\"process read\");\n        return this.createTransactionConfig(\n            {\n                txConfig: option,\n                isWrite: false,\n                method,\n                isParent: this.contractParam.isParent\n            }).then(config => {\n                this.client.logger.log(\"read tx config created\");\n                if (option.returnTransaction) {\n                    return merge(config, {\n                        data: method.encodeABI(),\n                        to: this.contract_.address\n                    } as ITransactionRequestConfig);\n                }\n                return method.read(\n                    config,\n                );\n            });\n    }\n\n    protected getClient(isParent) {\n        return isParent ? this.client.parent :\n            this.client.child;\n    }\n\n    private getContract_({ isParent, tokenAddress, abi }) {\n        const client = this.getClient(isParent);\n        return client.getContract(tokenAddress, abi);\n    }\n\n    protected get parentDefaultConfig() {\n        const config: IBaseClientConfig = this.client.config as any;\n        return config.parent.defaultConfig;\n    }\n\n    protected get childDefaultConfig() {\n        const config: IBaseClientConfig = this.client.config as any;\n        return config.child.defaultConfig;\n    }\n\n    protected createTransactionConfig({ txConfig, method, isParent, isWrite }: ITransactionConfigParam) {\n        const defaultConfig = isParent ? this.parentDefaultConfig : this.childDefaultConfig;\n        txConfig = merge(defaultConfig, (txConfig || {}));\n        const client = isParent ? this.client.parent :\n            this.client.child;\n        client.logger.log(\"txConfig\", txConfig, \"onRoot\", isParent, \"isWrite\", isWrite);\n        const estimateGas = (config: ITransactionRequestConfig) => {\n            return method ? method.estimateGas(config) :\n                client.estimateGas(config);\n        };\n        // txConfig.chainId = Converter.toHex(txConfig.chainId) as any;\n        if (isWrite) {\n            const { maxFeePerGas, maxPriorityFeePerGas } = txConfig;\n            const isEIP1559Supported = this.client.isEIP1559Supported(isParent);\n            const isMaxFeeProvided = (maxFeePerGas || maxPriorityFeePerGas);\n\n            if (!isEIP1559Supported && isMaxFeeProvided) {\n                client.logger.error(ERROR_TYPE.EIP1559NotSupported, isParent).throw();\n            }\n            // const [gasLimit, nonce, chainId] = \n            return Promise.all([\n                !(txConfig.gasLimit)\n                    ? estimateGas({\n                        from: txConfig.from, value: txConfig.value\n                    })\n                    : txConfig.gasLimit,\n                !txConfig.nonce ?\n                    client.getTransactionCount(txConfig.from, 'pending')\n                    : txConfig.nonce,\n                !txConfig.chainId ?\n                    client.getChainId() : txConfig.chainId\n            ]).then(result => {\n                const [gasLimit, nonce, chainId] = result;\n                client.logger.log(\"options filled\");\n\n                txConfig.gasLimit = Number(gasLimit);\n                txConfig.nonce = nonce;\n                txConfig.chainId = chainId;\n                return txConfig;\n            });\n        }\n        return promiseResolve<ITransactionRequestConfig>(txConfig);\n    }\n\n    protected transferERC20(to: string, amount: TYPE_AMOUNT, option?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"transfer\",\n                to,\n                Converter.toHex(amount)\n            );\n            return this.processWrite(\n                method, option\n            );\n        });\n    }\n\n    protected transferERC721(from: string, to: string, tokenId: string, option: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"transferFrom\",\n                from,\n                to,\n                tokenId\n            );\n            return this.processWrite(\n                method, option\n            );\n        });\n    }\n\n    protected checkForRoot(methodName) {\n        if (!this.contractParam.isParent) {\n            this.client.logger.error(ERROR_TYPE.AllowedOnRoot, methodName).throw();\n        }\n    }\n\n    protected checkForChild(methodName) {\n        if (this.contractParam.isParent) {\n            this.client.logger.error(ERROR_TYPE.AllowedOnChild, methodName).throw();\n        }\n    }\n\n    protected transferERC1155(param: POSERC1155TransferParam, option: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"safeTransferFrom\",\n                param.from,\n                param.to,\n                Converter.toHex(param.tokenId),\n                Converter.toHex(param.amount),\n                param.data || '0x'\n            );\n            return this.processWrite(\n                method, option\n            );\n        });\n    }\n\n}\n","import { HttpRequest } from \"../utils\";\n\nexport class ABIService {\n    httpRequest: HttpRequest;\n\n    constructor(baseUrl: string) {\n        this.httpRequest = new HttpRequest(baseUrl);\n    }\n\n    getABI(network: string, version: string, bridgeType: string, contractName: string) {\n        const url = `${network}/${version}/artifacts/${bridgeType}/${contractName}.json`;\n        return this.httpRequest.get(url).then((result: any) => {\n            return result.abi;\n        });\n    }\n\n    getAddress(network: string, version: string) {\n        const url = `${network}/${version}/index.json`;\n        return this.httpRequest.get(url);\n    }\n}","import { BaseBigNumber, utils } from \"..\";\nimport { HttpRequest } from \"../utils\";\n\nexport class NetworkService {\n    httpRequest: HttpRequest;\n\n    constructor(baseUrl: string) {\n        this.httpRequest = new HttpRequest(baseUrl);\n    }\n\n    private createUrl(network: string, url: string) {\n        return `${network === 'mainnet' ? 'matic' : 'mumbai'}${url}`;\n    }\n\n    getBlockIncluded(network: string, blockNumber: number) {\n\n        const url = this.createUrl(network, `/block-included/${blockNumber}`);\n        return this.httpRequest.get<{\n            start: string;\n            end: string;\n            headerBlockNumber: BaseBigNumber;\n        }>(url).then(result => {\n            const headerBlockNumber = result.headerBlockNumber as any as string;\n            const decimalHeaderBlockNumber = headerBlockNumber.slice(0, 2) === '0x' ? parseInt(\n                headerBlockNumber, 16\n            ) : headerBlockNumber;\n            result.headerBlockNumber = new utils.BN(decimalHeaderBlockNumber);\n            return result;\n        });\n    }\n\n    getProof(network: string, start, end, blockNumber) {\n        const url = this.createUrl(network, `/fast-merkle-proof?start=${start}&end=${end}&number=${blockNumber}`);\n        return this.httpRequest.get<any>(url).then(result => {\n            return result.proof;\n        });\n    }\n}\n","import { ABIService } from \"./abi_service\";\nimport { config } from \"../config\";\nimport { NetworkService } from \"./network_service\";\n\nexport * from \"./network_service\";\n\nclass Service {\n    network: NetworkService;\n    abi: ABIService;\n}\n\nexport const service = new Service();\nservice.abi = new ABIService(config.abiStoreUrl);\n\n\n\n","\nexport const config = {\n    abiStoreUrl: 'https://static.matic.network/network/'\n};","import { service, NetworkService } from \"../services\";\n\nexport const setProofApi = (url: string) => {\n    const urlLength = url.length;\n    if (url[urlLength - 1] !== '/') {\n        url += '/';\n    }\n    url += 'api/v1/';\n    service.network = new NetworkService(url);\n};","export function resolve(obj, path) {\n    const properties = Array.isArray(path) ? path : path.split(\".\");\n    return properties.reduce((prev, curr) => prev && prev[curr], obj);\n}","import { Web3SideChainClient } from \"../utils\";\nimport { ExitUtil } from \"../pos\";\nimport { BaseToken, utils } from \"..\";\n\nexport class BridgeClient<T> {\n\n    client: Web3SideChainClient<T> = new Web3SideChainClient();\n\n    exitUtil: ExitUtil;\n\n    /**\n     * check whether a txHash is checkPointed \n     *\n     * @param {string} txHash\n     * @returns\n     * @memberof BridgeClient\n     */\n    isCheckPointed(txHash: string) {\n        return this.exitUtil.isCheckPointed(\n            txHash\n        );\n    }\n\n    isDeposited(depositTxHash: string) {\n        const client = this.client;\n\n        const token = new BaseToken({\n            address: client.abiManager.getConfig(\"Matic.GenesisContracts.StateReceiver\"),\n            isParent: false,\n            name: 'StateReceiver',\n            bridgeType: 'genesis'\n        }, client);\n\n        return token.getContract().then(contract => {\n            return Promise.all([\n                client.parent.getTransactionReceipt(depositTxHash),\n                token['processRead']<string>(\n                    contract.method(\"lastStateId\")\n                )\n            ]);\n        }).then(result => {\n            const [receipt, lastStateId] = result;\n            const eventSignature = `0x103fed9db65eac19c4d870f49ab7520fe03b99f1838e5996caf47e9e43308392`;\n            const targetLog = receipt.logs.find(q => q.topics[0] === eventSignature);\n            if (!targetLog) {\n                throw new Error(\"StateSynced event not found\");\n            }\n            const rootStateId = client.child.decodeParameters(targetLog.topics[1], ['uint256'])[0];\n            const rootStateIdBN = utils.BN.isBN(rootStateId) ? rootStateId : new utils.BN(rootStateId);\n            return new utils.BN(lastStateId).gte(\n                rootStateIdBN\n            );\n        });\n    }\n\n}","import { service } from \"../services\";\nimport { resolve, promiseResolve } from \".\";\n\ntype T_ABI_CACHE = {\n    [networkName: string]: {\n        [version: string]: {\n            address: any,\n            abi: {\n                [bridgeType: string]: {\n                    [contractName: string]: any\n                }\n            }\n        }\n    }\n};\n\nconst cache: T_ABI_CACHE = {};\n\nexport class ABIManager {\n    constructor(public networkName: string, public version: string) {\n\n    }\n\n    init() {\n        return service.abi.getAddress(\n            this.networkName, this.version\n        ).then(result => {\n            cache[this.networkName] = {\n                [this.version]: {\n                    address: result,\n                    abi: {}\n                }\n            };\n        });\n    }\n\n    getConfig(path: string) {\n        return resolve(\n            cache[this.networkName][this.version].address,\n            path\n        );\n    }\n\n    getABI(contractName: string, bridgeType = 'plasma'): Promise<any> {\n        const targetBridgeABICache = cache[this.networkName][this.version].\n            abi[bridgeType];\n\n        if (targetBridgeABICache) {\n            const abiForContract = targetBridgeABICache[contractName];\n            if (abiForContract) {\n                return promiseResolve<any>(abiForContract);\n            }\n        }\n        return service.abi.getABI(\n            this.networkName,\n            this.version,\n            bridgeType,\n            contractName\n        ).then(result => {\n            this.setABI(contractName, bridgeType, result);\n            return result;\n        });\n    }\n\n    setABI(contractName: string, bridgeType: string, abi: any) {\n        const abiStore = cache[this.networkName][this.version].abi;\n        if (!abiStore[bridgeType]) {\n            abiStore[bridgeType] = {};\n        }\n        abiStore[bridgeType][contractName] = abi;\n    }\n}","export const throwNotImplemented = <T>() => {\n    throw new Error(\"not implemented\");\n    return '' as any as T;\n};","import { BaseWeb3Client, Converter, TYPE_AMOUNT } from \"..\";\nimport { EmptyBigNumber } from \"../implementation\";\n\nexport * from \"./use\";\nexport * from \"./event_bus\";\nexport * from \"./logger\";\nexport * from \"./merge\";\nexport * from \"./map_promise\";\nexport * from \"./proof_util\";\nexport * from \"./http_request\";\nexport * from \"./converter\";\nexport * from \"./web3_side_chain_client\";\nexport * from \"./base_token\";\nexport * from \"./set_proof_api_url\";\nexport * from \"./resolve\";\nexport * from \"./promise_resolve\";\nexport * from \"./bridge_client\";\nexport * from \"./abi_manager\";\nexport * from \"./not_implemented\";\n\n\nexport const utils = {\n    converter: Converter,\n    Web3Client: BaseWeb3Client,\n    BN: EmptyBigNumber,\n    UnstoppableDomains: Object\n};\n","import { BaseToken, Web3SideChainClient, promiseResolve } from \"../utils\";\nimport { IContractInitParam, IPOSClientConfig, ITransactionOption } from \"../interfaces\";\nimport { IPOSContracts } from \"../interfaces\";\n\nexport class POSToken extends BaseToken<IPOSClientConfig> {\n\n    private predicateAddress: string;\n\n    constructor(\n        contractParam: IContractInitParam,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        protected getPOSContracts: () => IPOSContracts\n    ) {\n        super(contractParam, client);\n    }\n\n    protected get rootChainManager() {\n        return this.getPOSContracts().rootChainManager;\n    }\n\n    protected get exitUtil() {\n        return this.getPOSContracts().exitUtil;\n    }\n\n\n    getPredicateAddress(): Promise<string> {\n        if (this.predicateAddress) {\n            return promiseResolve(this.predicateAddress);\n        }\n        return this.rootChainManager.method(\n            \"tokenToType\",\n            this.contractParam.address\n        ).then(method => {\n            return method.read();\n        }).then(tokenType => {\n            if (!tokenType) {\n                throw new Error('Invalid Token Type');\n            }\n            return this.rootChainManager.method(\n                \"typeToPredicate\", tokenType\n            );\n        }).then(typeToPredicateMethod => {\n            return typeToPredicateMethod.read<string>();\n        }).then(predicateAddress => {\n            this.predicateAddress = predicateAddress;\n            return predicateAddress;\n        });\n    }\n\n    protected isWithdrawn(txHash: string, eventSignature: string) {\n        if (!txHash) {\n            throw new Error(`txHash not provided`);\n        }\n        return this.exitUtil.getExitHash(\n            txHash, 0, eventSignature\n        ).then(exitHash => {\n            return this.rootChainManager.isExitProcessed(\n                exitHash\n            );\n        });\n    }\n\n    protected isWithdrawnOnIndex(txHash: string, index: number, eventSignature: string) {\n      if (!txHash) {\n          throw new Error(`txHash not provided`);\n      }\n      return this.exitUtil.getExitHash(\n          txHash, index, eventSignature\n      ).then(exitHash => {\n          return this.rootChainManager.isExitProcessed(\n              exitHash\n          );\n      });\n  }\n\n    protected withdrawExitPOS(burnTxHash: string, eventSignature: string, isFast: boolean, option: ITransactionOption) {\n        return this.exitUtil.buildPayloadForExit(\n            burnTxHash,\n            eventSignature,\n            isFast\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n}\n","import { ITransactionOption } from \"../interfaces\";\nimport { Converter, Web3SideChainClient } from \"../utils\";\nimport { POSToken } from \"./pos_token\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { ERROR_TYPE, Log_Event_Signature } from \"../enums\";\nimport { MAX_AMOUNT, promiseResolve } from \"..\";\nimport { IAllowanceTransactionOption, IApproveTransactionOption, IExitTransactionOption, IPOSClientConfig, IPOSContracts } from \"../interfaces\";\n\nexport class ERC20 extends POSToken {\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        getContracts: () => IPOSContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ChildERC20',\n            bridgeType: 'pos'\n        }, client, getContracts);\n    }\n\n    getBalance(userAddress: string, option?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"balanceOf\",\n                userAddress\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    /**\n     * get allowance of user\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    getAllowance(userAddress: string, option: IAllowanceTransactionOption = {}) {\n        const spenderAddress = option.spenderAddress;\n\n        const predicatePromise = spenderAddress ? promiseResolve(spenderAddress) : this.getPredicateAddress();\n\n        return Promise.all([predicatePromise, this.getContract()]).then(result => {\n            const [predicateAddress, contract] = result;\n            const method = contract.method(\n                \"allowance\",\n                userAddress,\n                predicateAddress,\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    approve(amount: TYPE_AMOUNT, option: IApproveTransactionOption = {}) {\n        const spenderAddress = option.spenderAddress;\n\n        if (!spenderAddress && !this.contractParam.isParent) {\n            this.client.logger.error(ERROR_TYPE.NullSpenderAddress).throw();\n        }\n\n        const predicatePromise = spenderAddress ? promiseResolve(spenderAddress) : this.getPredicateAddress();\n\n        return Promise.all([predicatePromise, this.getContract()]).then(result => {\n            const [predicateAddress, contract] = result;\n            const method = contract.method(\n                \"approve\",\n                predicateAddress,\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    approveMax(option: IApproveTransactionOption = {}) {\n        return this.approve(\n            MAX_AMOUNT\n            , option\n        );\n    }\n\n    /**\n     * Deposit given amount of token for user\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    deposit(amount: TYPE_AMOUNT, userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"deposit\");\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(amount)],\n            ['uint256'],\n        );\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n    }\n\n    private depositEther_(amount: TYPE_AMOUNT, userAddress: string, option: ITransactionOption = {}) {\n        this.checkForRoot(\"depositEther\");\n\n\n        option.value = Converter.toHex(amount);\n        return this.rootChainManager.method(\"depositEtherFor\", userAddress).then(method => {\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * initiate withdraw by burning provided amount\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawStart(amount: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStart\");\n\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdraw\",\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    private withdrawExit_(burnTransactionHash: string, isFast: boolean, option: IExitTransactionOption = {}) {\n        const eventSignature = option.burnEventSignature ?\n            option.burnEventSignature : Log_Event_Signature.Erc20Transfer;\n\n        return this.exitUtil.buildPayloadForExit(\n            burnTransactionHash,\n            eventSignature,\n            isFast\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n\n    /**\n     * complete withdraw process after checkpoint has been submitted for the block containing burn tx.\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawExit(burnTransactionHash: string, option?: IExitTransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n\n        return this.withdrawExit_(burnTransactionHash, false, option);\n    }\n\n    /**\n     * complete withdraw process after checkpoint has been submitted for the block containing burn tx.\n     *\n     *  Note:- It create the proof in api call for fast exit.\n     * \n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    withdrawExitFaster(burnTransactionHash: string, option?: IExitTransactionOption) {\n        this.checkForRoot(\"withdrawExitFaster\");\n\n        return this.withdrawExit_(burnTransactionHash, true, option);\n    }\n\n    /**\n     * check if exit has been completed for a transaction hash\n     *\n     * @param {string} burnTxHash\n     * @returns\n     * @memberof ERC20\n     */\n    isWithdrawExited(burnTxHash: string) {\n        return this.isWithdrawn(burnTxHash, Log_Event_Signature.Erc20Transfer);\n    }\n\n    /**\n     * transfer amount to another user\n     *\n     * @param {TYPE_AMOUNT} amount\n     * @param {string} to\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC20\n     */\n    transfer(amount: TYPE_AMOUNT, to: string, option?: ITransactionOption) {\n        return this.transferERC20(to, amount, option);\n    }\n\n}\n","import { BaseToken, Web3SideChainClient } from \"../utils\";\nimport { IPOSClientConfig, ITransactionOption } from \"../interfaces\";\n\nexport class RootChainManager extends BaseToken<IPOSClientConfig> {\n\n    constructor(client_: Web3SideChainClient<IPOSClientConfig>, address: string) {\n        super({\n            address: address,\n            name: 'RootChainManager',\n            bridgeType: 'pos',\n            isParent: true\n        }, client_);\n    }\n\n    method(methodName: string, ...args) {\n        return this.getContract().then(contract => {\n            return contract.method(methodName, ...args);\n        });\n    }\n\n    deposit(userAddress: string, tokenAddress: string, depositData: string, option?: ITransactionOption) {\n        return this.method(\n            \"depositFor\",\n            userAddress,\n            tokenAddress,\n            depositData\n        ).then(method => {\n            return this.processWrite(method, option);\n        });\n    }\n\n    exit(exitPayload: string, option: ITransactionOption) {\n        return this.method(\"exit\", exitPayload).then(method => {\n            return this.processWrite(\n                method,\n                option\n            );\n        });\n    }\n\n    isExitProcessed(exitHash: string) {\n        return this.method(\n            \"processedExits\", exitHash\n        ).then(method => {\n            return this.processRead<boolean>(method);\n        });\n    }\n\n}\n","import { RootChain } from \"./root_chain\";\nimport { Converter, ProofUtil, Web3SideChainClient } from \"../utils\";\nimport { bufferToHex, rlp } from \"ethereumjs-util\";\nimport { IBlockWithTransaction, ITransactionReceipt } from \"../interfaces\";\nimport { service } from \"../services\";\nimport { BaseBigNumber, BaseWeb3Client } from \"../abstracts\";\nimport { ErrorHelper } from \"../utils/error_helper\";\nimport { ERROR_TYPE, IBaseClientConfig, IRootBlockInfo, utils } from \"..\";\n\ninterface IChainBlockInfo {\n    lastChildBlock: string;\n    txBlockNumber: number;\n}\n\n\n\nexport class ExitUtil {\n    private maticClient_: BaseWeb3Client;\n\n    rootChain: RootChain;\n\n    requestConcurrency: number;\n    config: IBaseClientConfig;\n\n    constructor(client: Web3SideChainClient<IBaseClientConfig>, rootChain: RootChain) {\n        this.maticClient_ = client.child;\n        this.rootChain = rootChain;\n        const config = client.config;\n        this.config = config;\n        this.requestConcurrency = config.requestConcurrency;\n    }\n\n    private getLogIndex_(logEventSig: string, receipt: ITransactionReceipt) {\n        let logIndex = -1;\n\n        switch (logEventSig) {\n            case '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef':\n            case '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14':\n                logIndex = receipt.logs.findIndex(\n                    log =>\n                        log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                        log.topics[2].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000'\n                );\n                break;\n\n            case '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62':\n            case '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb':\n                logIndex = receipt.logs.findIndex(\n                    log =>\n                        log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                        log.topics[3].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000'\n                );\n                break;\n\n            default:\n                logIndex = receipt.logs.findIndex(log => log.topics[0].toLowerCase() === logEventSig.toLowerCase());\n        }\n        if (logIndex < 0) {\n            throw new Error(\"Log not found in receipt\");\n        }\n        return logIndex;\n    }\n\n    private getAllLogIndices_(logEventSig: string, receipt: ITransactionReceipt) {\n      let logIndices = [];\n\n      switch (logEventSig) {\n          case '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef':\n          case '0xf94915c6d1fd521cee85359239227480c7e8776d7caf1fc3bacad5c269b66a14':\n            logIndices = receipt.logs.reduce(\n                  (_, log, index) =>\n                      ((log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                      log.topics[2].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000') &&\n                      logIndices.push(index), logIndices), []\n              );\n              break;\n\n          case '0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62':\n          case '0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb':\n              logIndices = receipt.logs.reduce(\n                (_, log, index) =>\n                    ((log.topics[0].toLowerCase() === logEventSig.toLowerCase() &&\n                    log.topics[3].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000') &&\n                    logIndices.push(index), logIndices), []\n            );\n            break;\n          \n          case '0xf871896b17e9cb7a64941c62c188a4f5c621b86800e3d15452ece01ce56073df':\n              logIndices = receipt.logs.reduce(\n                (_, log, index) =>\n                    ((log.topics[0].toLowerCase() === '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef' &&\n                    log.topics[2].toLowerCase() === '0x0000000000000000000000000000000000000000000000000000000000000000') &&\n                    logIndices.push(index), logIndices), []\n            );\n            break;\n\n          default:\n            logIndices = receipt.logs.reduce(\n              (_, log, index) =>\n                  ((log.topics[0].toLowerCase() === logEventSig.toLowerCase()) &&\n                  logIndices.push(index), logIndices), []\n          );\n      }\n      if (logIndices.length === 0) {\n          throw new Error(\"Log not found in receipt\");\n      }\n      return logIndices;\n  }\n\n    getChainBlockInfo(burnTxHash: string) {\n        return Promise.all([\n            this.rootChain.getLastChildBlock(),\n            this.maticClient_.getTransaction(burnTxHash),\n        ]).then(result => {\n            return {\n                lastChildBlock: result[0],\n                txBlockNumber: result[1].blockNumber\n            } as IChainBlockInfo;\n        });\n    }\n\n    private isCheckPointed_(data: IChainBlockInfo) {\n        // lastchild block is greater equal to transacton block number; \n        return new utils.BN(data.lastChildBlock).gte(\n            new utils.BN(data.txBlockNumber)\n        );\n    }\n\n    isCheckPointed(burnTxHash: string) {\n        return this.getChainBlockInfo(\n            burnTxHash\n        ).then(result => {\n            return this.isCheckPointed_(\n                result\n            );\n        });\n    }\n\n    /**\n     * returns info about block number existance on parent chain\n     * 1. root block number, \n     * 2. start block number, \n     * 3. end block number \n     *\n     * @private\n     * @param {number} txBlockNumber - transaction block number on child chain\n     * @return {*} \n     * @memberof ExitUtil\n     */\n    private getRootBlockInfo(txBlockNumber: number) {\n        // find in which block child was included in parent\n        let rootBlockNumber: BaseBigNumber;\n        return this.rootChain.findRootBlockFromChild(\n            txBlockNumber\n        ).then(blockNumber => {\n            rootBlockNumber = blockNumber;\n            return this.rootChain.method(\n                \"headerBlocks\",\n                Converter.toHex(blockNumber)\n            );\n        }).then(method => {\n            return method.read<IRootBlockInfo>();\n        }).then(rootBlockInfo => {\n            return {\n                // header block number - root block number in which child block exist \n                headerBlockNumber: rootBlockNumber,\n                // range of block\n                // end - block end number\n                end: rootBlockInfo.end.toString(),\n                // start - block start number\n                start: rootBlockInfo.start.toString(),\n            } as IRootBlockInfo;\n        });\n\n    }\n\n    private getRootBlockInfoFromAPI(txBlockNumber: number) {\n        this.maticClient_.logger.log(\"block info from API 1\");\n        return service.network.getBlockIncluded(\n            this.config.network,\n            txBlockNumber\n        ).then(headerBlock => {\n            this.maticClient_.logger.log(\"block info from API 2\", headerBlock);\n            if (!headerBlock || !headerBlock.start || !headerBlock.end || !headerBlock.headerBlockNumber) {\n                throw Error('Network API Error');\n            }\n            return headerBlock;\n        }).catch(err => {\n            this.maticClient_.logger.log(\"block info from API\", err);\n            return this.getRootBlockInfo(txBlockNumber);\n        });\n    }\n\n    private getBlockProof(txBlockNumber: number, rootBlockInfo: { start, end }) {\n        return ProofUtil.buildBlockProof(\n            this.maticClient_,\n            parseInt(rootBlockInfo.start, 10),\n            parseInt(rootBlockInfo.end, 10),\n            parseInt(txBlockNumber + '', 10)\n        );\n    }\n\n    private getBlockProofFromAPI(txBlockNumber: number, rootBlockInfo: { start, end }) {\n\n        return service.network.getProof(\n            this.config.network,\n            rootBlockInfo.start,\n            rootBlockInfo.end,\n            txBlockNumber\n        ).then(blockProof => {\n            if (!blockProof) {\n                throw Error('Network API Error');\n            }\n            this.maticClient_.logger.log(\"block proof from API 1\");\n            return blockProof;\n        }).catch(_ => {\n            return this.getBlockProof(txBlockNumber, rootBlockInfo);\n        });\n    }\n\n    buildPayloadForExit(burnTxHash: string, logEventSig: string, isFast: boolean, index = 0) {\n\n        if (isFast && !service.network) {\n            new ErrorHelper(ERROR_TYPE.ProofAPINotSet).throw();\n        }\n\n        if (index < 0) {\n          throw new Error('Index must not be a negative integer');\n        }\n\n        let txBlockNumber: number,\n            rootBlockInfo: IRootBlockInfo,\n            receipt: ITransactionReceipt,\n            block: IBlockWithTransaction,\n            blockProof;\n\n        return this.getChainBlockInfo(\n            burnTxHash\n        ).then(blockInfo => {\n            if (!this.isCheckPointed_(blockInfo)) {\n                throw new Error(\n                    'Burn transaction has not been checkpointed as yet'\n                );\n            }\n\n            // step 1 - Get Block number from transaction hash\n            txBlockNumber = blockInfo.txBlockNumber;\n            // step 2-  get transaction receipt from txhash and \n            // block information from block number\n            return Promise.all([\n                this.maticClient_.getTransactionReceipt(burnTxHash),\n                this.maticClient_.getBlockWithTransaction(txBlockNumber)\n            ]);\n        }).then(result => {\n            [receipt, block] = result;\n            // step  3 - get information about block saved in parent chain \n            return (\n                isFast ? this.getRootBlockInfoFromAPI(txBlockNumber) :\n                    this.getRootBlockInfo(txBlockNumber)\n            );\n        }).then(rootBlockInfoResult => {\n            rootBlockInfo = rootBlockInfoResult;\n            // step 4 - build block proof\n            return (\n                isFast ? this.getBlockProofFromAPI(txBlockNumber, rootBlockInfo) :\n                    this.getBlockProof(txBlockNumber, rootBlockInfo)\n            );\n        }).then(blockProofResult => {\n            blockProof = blockProofResult;\n            // step 5- create receipt proof\n            return ProofUtil.getReceiptProof(\n                receipt,\n                block,\n                this.maticClient_,\n                this.requestConcurrency\n            );\n        }).then((receiptProof: any) => {\n            // step 6 - encode payload, convert into hex\n\n            // when token index is not 0\n            if(index > 0) {\n              const logIndices = this.getAllLogIndices_(\n                logEventSig, receipt\n              );\n\n              if(index >= logIndices.length) {\n                throw new Error('Index is grater than the number of tokens in this transaction');\n              }\n\n              return this.encodePayload_(\n                rootBlockInfo.headerBlockNumber.toNumber(),\n                blockProof,\n                txBlockNumber,\n                block.timestamp,\n                Buffer.from(block.transactionsRoot.slice(2), 'hex'),\n                Buffer.from(block.receiptsRoot.slice(2), 'hex'),\n                ProofUtil.getReceiptBytes(receipt), // rlp encoded\n                receiptProof.parentNodes,\n                receiptProof.path,\n                logIndices[index]\n              );\n            }\n\n            // when token index is 0\n            const logIndex = this.getLogIndex_(\n                logEventSig, receipt\n            );\n\n            return this.encodePayload_(\n                rootBlockInfo.headerBlockNumber.toNumber(),\n                blockProof,\n                txBlockNumber,\n                block.timestamp,\n                Buffer.from(block.transactionsRoot.slice(2), 'hex'),\n                Buffer.from(block.receiptsRoot.slice(2), 'hex'),\n                ProofUtil.getReceiptBytes(receipt), // rlp encoded\n                receiptProof.parentNodes,\n                receiptProof.path,\n                logIndex\n            );\n        });\n    }\n\n    buildMultiplePayloadsForExit(burnTxHash: string, logEventSig: string, isFast: boolean) {\n\n      if (isFast && !service.network) {\n          new ErrorHelper(ERROR_TYPE.ProofAPINotSet).throw();\n      }\n\n      let txBlockNumber: number,\n          rootBlockInfo: IRootBlockInfo,\n          receipt: ITransactionReceipt,\n          block: IBlockWithTransaction,\n          blockProof;\n\n      return this.getChainBlockInfo(\n          burnTxHash\n      ).then(blockInfo => {\n          if (!this.isCheckPointed_(blockInfo)) {\n              throw new Error(\n                  'Burn transaction has not been checkpointed as yet'\n              );\n          }\n\n          // step 1 - Get Block number from transaction hash\n          txBlockNumber = blockInfo.txBlockNumber;\n          // step 2-  get transaction receipt from txhash and \n          // block information from block number\n          return Promise.all([\n              this.maticClient_.getTransactionReceipt(burnTxHash),\n              this.maticClient_.getBlockWithTransaction(txBlockNumber)\n          ]);\n      }).then(result => {\n          [receipt, block] = result;\n          // step  3 - get information about block saved in parent chain \n          return (\n              isFast ? this.getRootBlockInfoFromAPI(txBlockNumber) :\n                  this.getRootBlockInfo(txBlockNumber)\n          );\n      }).then(rootBlockInfoResult => {\n          rootBlockInfo = rootBlockInfoResult;\n          // step 4 - build block proof\n          return (\n              isFast ? this.getBlockProofFromAPI(txBlockNumber, rootBlockInfo) :\n                  this.getBlockProof(txBlockNumber, rootBlockInfo)\n          );\n      }).then(blockProofResult => {\n          blockProof = blockProofResult;\n          // step 5- create receipt proof\n          return ProofUtil.getReceiptProof(\n              receipt,\n              block,\n              this.maticClient_,\n              this.requestConcurrency\n          );\n      }).then((receiptProof: any) => {\n          const logIndices = this.getAllLogIndices_(\n              logEventSig, receipt\n          );\n          const payloads:string[] = [];\n\n          // step 6 - encode payloads, convert into hex\n          for (const logIndex of logIndices){\n            payloads.push(\n              this.encodePayload_(\n                rootBlockInfo.headerBlockNumber.toNumber(),\n                blockProof,\n                txBlockNumber,\n                block.timestamp,\n                Buffer.from(block.transactionsRoot.slice(2), 'hex'),\n                Buffer.from(block.receiptsRoot.slice(2), 'hex'),\n                ProofUtil.getReceiptBytes(receipt), // rlp encoded\n                receiptProof.parentNodes,\n                receiptProof.path,\n                logIndex\n              )\n            );\n          }\n\n          return payloads;\n      });\n  }\n\n    private encodePayload_(\n        headerNumber,\n        buildBlockProof,\n        blockNumber,\n        timestamp,\n        transactionsRoot,\n        receiptsRoot,\n        receipt,\n        receiptParentNodes,\n        path,\n        logIndex\n    ) {\n        return bufferToHex(\n            rlp.encode([\n                headerNumber,\n                buildBlockProof,\n                blockNumber,\n                timestamp,\n                bufferToHex(transactionsRoot),\n                bufferToHex(receiptsRoot),\n                bufferToHex(receipt),\n                bufferToHex(rlp.encode(receiptParentNodes)),\n                bufferToHex(Buffer.concat([Buffer.from('00', 'hex'), path])),\n                logIndex,\n            ])\n        );\n    }\n\n    getExitHash(burnTxHash, index, logEventSig) {\n        let lastChildBlock: string,\n            receipt: ITransactionReceipt,\n            block: IBlockWithTransaction;\n\n        return Promise.all([\n            this.rootChain.getLastChildBlock(),\n            this.maticClient_.getTransactionReceipt(burnTxHash)\n        ]).then(result => {\n            lastChildBlock = result[0];\n            receipt = result[1];\n            return this.maticClient_.getBlockWithTransaction(\n                receipt.blockNumber\n            );\n        }).then(blockResult => {\n            block = blockResult;\n            if (!this.isCheckPointed_({ lastChildBlock: lastChildBlock, txBlockNumber: receipt.blockNumber })) {\n                this.maticClient_.logger.error(ERROR_TYPE.BurnTxNotCheckPointed).throw();\n            }\n            return ProofUtil.getReceiptProof(\n                receipt,\n                block,\n                this.maticClient_,\n                this.requestConcurrency\n            );\n        }).then((receiptProof: any) => {\n            let logIndex;\n            const nibbleArr = [];\n            receiptProof.path.forEach(byte => {\n                nibbleArr.push(Buffer.from('0' + (byte / 0x10).toString(16), 'hex'));\n                nibbleArr.push(Buffer.from('0' + (byte % 0x10).toString(16), 'hex'));\n            });\n\n            if(index > 0) {\n              const logIndices = this.getAllLogIndices_(logEventSig, receipt);\n              logIndex = logIndices[index];\n            }\n\n            logIndex = this.getLogIndex_(logEventSig, receipt);\n\n            return this.maticClient_.etheriumSha3(\n                receipt.blockNumber, bufferToHex(Buffer.concat(nibbleArr)), logIndex\n            );\n        });\n    }\n}\n","import { BaseToken, utils, Web3SideChainClient } from \"../utils\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { IPOSClientConfig, ITransactionOption } from \"../interfaces\";\nimport { BaseBigNumber } from \"..\";\n\nexport class RootChain extends BaseToken<IPOSClientConfig> {\n\n    constructor(client_: Web3SideChainClient<IPOSClientConfig>, address: string) {\n        super({\n            address: address,\n            name: 'RootChain',\n            isParent: true\n        }, client_);\n    }\n\n    method(methodName: string, ...args) {\n        return this.getContract().then(contract => {\n            return contract.method(methodName, ...args);\n        });\n    }\n\n    getLastChildBlock() {\n        return this.method(\"getLastChildBlock\").then(method => {\n            return method.read<string>({}, \"finalized\");\n        });\n    }\n\n    async findRootBlockFromChild(childBlockNumber: TYPE_AMOUNT): Promise<BaseBigNumber> {\n        const bigOne = new utils.BN(1);\n        const bigtwo = new utils.BN(2);\n        const checkPointInterval = new utils.BN(10000);\n\n        childBlockNumber = new utils.BN(childBlockNumber);\n        // first checkpoint id = start * 10000\n        let start = bigOne;\n\n        // last checkpoint id = end * 10000\n        const method = await this.method(\"currentHeaderBlock\");\n        const currentHeaderBlock = await method.read<string>();\n        let end = new utils.BN(currentHeaderBlock).div(\n            checkPointInterval\n        );\n\n        // binary search on all the checkpoints to find the checkpoint that contains the childBlockNumber\n        let ans;\n        while (start.lte(end)) {\n            if (start.eq(end)) {\n                ans = start;\n                break;\n            }\n            const mid = start.add(end).div(bigtwo);\n            const headerBlocksMethod = await this.method(\n                \"headerBlocks\",\n                mid.mul(checkPointInterval).toString()\n            );\n            const headerBlock = await headerBlocksMethod.read<{ start: number, end: number }>();\n\n            const headerStart = new utils.BN(headerBlock.start);\n            const headerEnd = new utils.BN(headerBlock.end);\n\n            if (headerStart.lte(childBlockNumber) && childBlockNumber.lte(headerEnd)) {\n                // if childBlockNumber is between the upper and lower bounds of the headerBlock, we found our answer\n                ans = mid;\n                break;\n            } else if (headerStart.gt(childBlockNumber)) {\n                // childBlockNumber was checkpointed before this header\n                end = mid.sub(bigOne);\n            } else if (headerEnd.lt(childBlockNumber)) {\n                // childBlockNumber was checkpointed after this header\n                start = mid.add(bigOne);\n            }\n        }\n        return ans.mul(checkPointInterval);\n    }\n\n}","import { IPOSClientConfig, IPOSContracts, ITransactionOption } from \"../interfaces\";\nimport { RootChainManager } from \"./root_chain_manager\";\nimport { Converter, Web3SideChainClient } from \"../utils\";\nimport { POSToken } from \"./pos_token\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { ExitUtil } from \"./exit_util\";\nimport { Log_Event_Signature } from \"../enums\";\n\nexport class ERC721 extends POSToken {\n\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        getContracts: () => IPOSContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ChildERC721',\n            bridgeType: 'pos'\n        }, client, getContracts);\n    }\n\n    private validateMany_(tokenIds) {\n        if (tokenIds.length > 20) {\n            throw new Error('can not process more than 20 tokens');\n        }\n        return tokenIds.map(tokenId => {\n            return Converter.toHex(tokenId);\n        });\n    }\n\n    /**\n     * get tokens count for the user\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [options]\n     * @returns\n     * @memberof ERC721\n     */\n    getTokensCount(userAddress: string, options?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"balanceOf\",\n                userAddress\n            );\n            return this.processRead<string>(method, options);\n        }).then(count => {\n            return Number(count);\n        });\n    }\n\n    /**\n     * returns token id on supplied index for user\n     *\n     * @param {number} index\n     * @param {string} userAddress\n     * @param {ITransactionOption} [options]\n     * @returns\n     * @memberof ERC721\n     */\n    getTokenIdAtIndexForUser(index: number, userAddress: string, options?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"tokenOfOwnerByIndex\",\n                userAddress,\n                index\n            );\n\n            return this.processRead<string>(method, options);\n        });\n    }\n\n    /**\n     * get all tokens for user\n     *\n     * @param {string} userAddress\n     * @param {*} [limit=Infinity]\n     * @returns\n     * @memberof ERC721\n     */\n    getAllTokens(userAddress: string, limit = Infinity) {\n        return this.getTokensCount(userAddress).then(count => {\n            count = Number(count);\n            if (count > limit) {\n                count = limit;\n            }\n            const promises = [];\n            for (let i = 0; i < count; i++) {\n                promises.push(\n                    this.getTokenIdAtIndexForUser(i, userAddress)\n                );\n            }\n            return Promise.all(\n                promises\n            );\n        });\n    }\n\n    isApproved(tokenId: string, option?: ITransactionOption) {\n        this.checkForRoot(\"isApproved\");\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"getApproved\",\n                tokenId\n            );\n            return Promise.all([\n                this.processRead<string>(method, option),\n                this.getPredicateAddress()\n            ]).then(result => {\n                return result[0] === result[1];\n            });\n        });\n    }\n\n    isApprovedAll(userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"isApprovedAll\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"isApprovedForAll\",\n                userAddress,\n                predicateAddress\n            );\n            return this.processRead<boolean>(method, option);\n        });\n\n    }\n\n    approve(tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForRoot(\"approve\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"approve\",\n                predicateAddress,\n                Converter.toHex(tokenId)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    approveAll(option?: ITransactionOption) {\n        this.checkForRoot(\"approveAll\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"setApprovalForAll\",\n                predicateAddress,\n                true\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n\n    deposit(tokenId: TYPE_AMOUNT, userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"deposit\");\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [Converter.toHex(tokenId)],\n            ['uint256'],\n        );\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n    }\n\n    depositMany(tokenIds: TYPE_AMOUNT[], userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"depositMany\");\n\n        const tokensInHex = this.validateMany_(tokenIds);\n\n        const amountInABI = this.client.parent.encodeParameters(\n            [tokensInHex],\n            ['uint256[]'],\n        );\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n    }\n\n    withdrawStart(tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStart\");\n\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdraw\",\n                Converter.toHex(tokenId)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    withdrawStartWithMetaData(tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStartWithMetaData\");\n\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawWithMetadata\",\n                Converter.toHex(tokenId)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    withdrawStartMany(tokenIds: TYPE_AMOUNT[], option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStartMany\");\n\n        const tokensInHex = this.validateMany_(tokenIds);\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawBatch\",\n                tokensInHex\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    withdrawExit(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n\n        return this.exitUtil.buildPayloadForExit(\n            burnTransactionHash,\n            Log_Event_Signature.Erc721Transfer,\n            false\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n\n    withdrawExitOnIndex(burnTransactionHash: string, index: number, option?: ITransactionOption) {\n      this.checkForRoot(\"withdrawExit\");\n\n      return this.exitUtil.buildPayloadForExit(\n          burnTransactionHash,\n          Log_Event_Signature.Erc721Transfer,\n          false,\n          index\n      ).then(payload => {\n          return this.rootChainManager.exit(\n              payload, option\n          );\n      });\n    }\n\n    // async withdrawExitMany(burnTransactionHash: string, option?: ITransactionOption) {\n    //     this.checkForRoot(\"withdrawExitMany\");\n\n    //     return this.exitUtil.buildMultiplePayloadsForExit(\n    //         burnTransactionHash,\n    //         Log_Event_Signature.Erc721BatchTransfer,\n    //         false\n    //     ).then(async payloads => {\n    //         const exitTxs = [];\n    //         if()\n    //         for(const i in payloads) {\n    //           exitTxs.push(this.rootChainManager.exit(\n    //             payloads[i], option\n    //         ));\n    //         }\n    //         return Promise.all(exitTxs);\n    //         });\n    // }\n\n    withdrawExitFaster(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitFaster\");\n\n        return this.exitUtil.buildPayloadForExit(\n            burnTransactionHash,\n            Log_Event_Signature.Erc721Transfer,\n            true\n        ).then(payload => {\n            return this.rootChainManager.exit(\n                payload, option\n            );\n        });\n    }\n\n    // withdrawExitFasterMany(burnTransactionHash: string, option?: ITransactionOption) {\n    //     this.checkForRoot(\"withdrawExitFasterMany\");\n\n\n    //     return this.exitUtil.buildPayloadForExit(\n    //         burnTransactionHash,\n    //         Log_Event_Signature.Erc721BatchTransfer,\n    //         true\n    //     ).then(payload => {\n    //         return this.rootChainManager.exit(\n    //             payload, option\n    //         );\n    //     });\n    // }\n\n    isWithdrawExited(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc721Transfer\n        );\n    }\n\n    isWithdrawExitedMany(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc721BatchTransfer\n        );\n    }\n\n    isWithdrawExitedOnIndex(txHash: string, index: number) {\n        return this.isWithdrawnOnIndex(\n            txHash, index, Log_Event_Signature.Erc721Transfer\n        );\n    }\n\n    /**\n     * tranfer to another user\n     *\n     * @param {string} tokenId\n     * @param {string} from\n     * @param {string} to\n     * @param {ITransactionOption} [option]\n     * @returns\n     * @memberof ERC721\n     */\n    transfer(tokenId: string, from: string, to: string, option?: ITransactionOption) {\n        return this.transferERC721(\n            from,\n            to,\n            tokenId,\n            option\n        );\n    }\n\n}\n","import { IPOSClientConfig, ITransactionOption } from \"../interfaces\";\nimport { Converter, promiseResolve, Web3SideChainClient } from \"../utils\";\nimport { POSToken } from \"./pos_token\";\nimport { Log_Event_Signature } from \"../enums\";\nimport { IPOSContracts, IPOSERC1155Address } from \"../interfaces\";\nimport { POSERC1155DepositBatchParam, POSERC1155DepositParam, POSERC1155TransferParam, TYPE_AMOUNT } from \"..\";\n\nexport class ERC1155 extends POSToken {\n\n    mintablePredicateAddress: string;\n\n    get addressConfig(): IPOSERC1155Address {\n        return this.client.config.erc1155 || {};\n    }\n\n    constructor(\n        tokenAddress: string,\n        isParent: boolean,\n        client: Web3SideChainClient<IPOSClientConfig>,\n        getContracts: () => IPOSContracts\n    ) {\n        super({\n            isParent,\n            address: tokenAddress,\n            name: 'ChildERC1155',\n            bridgeType: 'pos'\n        }, client, getContracts);\n\n    }\n\n    private getAddress_(value: string) {\n        const addresses = this.addressConfig;\n        if (addresses[value]) {\n            return promiseResolve(addresses[value]);\n        }\n\n        return this.client.getConfig(value);\n    }\n\n    /**\n     * get balance of a user for supplied token\n     *\n     * @param {string} userAddress\n     * @param {TYPE_AMOUNT} tokenId\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    getBalance(userAddress: string, tokenId: TYPE_AMOUNT, option?: ITransactionOption) {\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"balanceOf\",\n                userAddress,\n                Converter.toHex(tokenId)\n            );\n            return this.processRead<string>(method, option);\n        });\n    }\n\n    /**\n     * check if a user is approved for all tokens\n     *\n     * @param {string} userAddress\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    isApprovedAll(userAddress: string, option?: ITransactionOption) {\n        this.checkForRoot(\"isApprovedAll\");\n\n        return Promise.all([this.getContract(), this.getPredicateAddress()]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"isApprovedForAll\",\n                userAddress,\n                predicateAddress\n            );\n            return this.processRead<boolean>(method, option);\n        });\n\n    }\n\n    private approveAll_(predicateAddressPromise: Promise<string>, option: ITransactionOption) {\n        this.checkForRoot(\"approve\");\n\n        return Promise.all([this.getContract(), predicateAddressPromise]).then(result => {\n            const [contract, predicateAddress] = result;\n            const method = contract.method(\n                \"setApprovalForAll\",\n                predicateAddress,\n                true\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * approve all tokens \n     *\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    approveAll(option?: ITransactionOption) {\n        this.checkForRoot(\"approve\");\n\n        return this.approveAll_(\n            this.getPredicateAddress(), option\n        );\n    }\n\n    /**\n     * approve all tokens for mintable token\n     *\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    approveAllForMintable(option?: ITransactionOption) {\n        this.checkForRoot(\"approveForMintable\");\n        const addressPath = \"Main.POSContracts.MintableERC1155PredicateProxy\";\n        return this.approveAll_(\n            this.getAddress_(addressPath), option\n        );\n    }\n\n    /**\n     * deposit supplied amount of token for a user \n     *\n     * @param {POSERC1155DepositParam} param\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    deposit(param: POSERC1155DepositParam, option?: ITransactionOption) {\n        this.checkForRoot(\"deposit\");\n        return this.depositMany({\n            amounts: [param.amount],\n            tokenIds: [param.tokenId],\n            userAddress: param.userAddress,\n            data: param.data\n        }, option);\n    }\n\n    /**\n     * deposit supplied amount of multiple token for user\n     *\n     * @param {POSERC1155DepositBatchParam} param\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    depositMany(param: POSERC1155DepositBatchParam, option?: ITransactionOption) {\n        this.checkForRoot(\"depositMany\");\n\n        const { tokenIds, amounts, data, userAddress } = param;\n        const emptyHex = Converter.toHex(0);\n        const amountInABI = this.client.parent.encodeParameters(\n            [\n                tokenIds.map(t => Converter.toHex(t)),\n                amounts.map(a => Converter.toHex(a)),\n                data || emptyHex\n            ],\n            ['uint256[]', 'uint256[]', 'bytes'],\n        );\n\n        return this.rootChainManager.deposit(\n            userAddress,\n            this.contractParam.address,\n            amountInABI,\n            option\n        );\n\n    }\n\n    /**\n     * start withdraw process by burning the required amount for a token\n     *\n     * @param {string} tokenId\n     * @param {TYPE_AMOUNT} amount\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawStart(tokenId: TYPE_AMOUNT, amount: TYPE_AMOUNT, option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStart\");\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawSingle\",\n                Converter.toHex(tokenId),\n                Converter.toHex(amount)\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * start the withdraw process by burning the supplied amount of multiple token at a time\n     *\n     * @param {TYPE_AMOUNT[]} tokenIds\n     * @param {TYPE_AMOUNT[]} amounts\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawStartMany(tokenIds: TYPE_AMOUNT[], amounts: TYPE_AMOUNT[], option?: ITransactionOption) {\n        this.checkForChild(\"withdrawStartMany\");\n\n        const tokensInHex = tokenIds.map(t => {\n            return Converter.toHex(t);\n        });\n        const amountsInHex = amounts.map(t => {\n            return Converter.toHex(t);\n        });\n\n        return this.getContract().then(contract => {\n            const method = contract.method(\n                \"withdrawBatch\",\n                tokensInHex,\n                amountsInHex\n            );\n            return this.processWrite(method, option);\n        });\n    }\n\n    /**\n     * exit the withdraw process and get the burned amount on root chain\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExit(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExit\");\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155Transfer,\n            false,\n            option\n        );\n    }\n\n    /**\n     * exit the withdraw process and get the burned amount on root chain\n     * \n     * the process is faster because it uses proof api\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExitFaster(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitFaster\");\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155Transfer,\n            true,\n            option\n        );\n    }\n\n    /**\n     * exit the withdraw process for many burned transaction and get the burned amount on root chain\n     *\n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExitMany(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitMany\");\n\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155BatchTransfer,\n            false,\n            option\n        );\n    }\n\n    /**\n     * exit the withdraw process for many burned transaction and get the burned amount on root chain\n     *\n     * the process is faster because it uses proof api\n     * \n     * @param {string} burnTransactionHash\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    withdrawExitFasterMany(burnTransactionHash: string, option?: ITransactionOption) {\n        this.checkForRoot(\"withdrawExitFasterMany\");\n\n\n        return this.withdrawExitPOS(\n            burnTransactionHash,\n            Log_Event_Signature.Erc1155BatchTransfer,\n            true,\n            option\n        );\n    }\n\n    /**\n     * check if exit has been completed for a transaction hash\n     *\n     * @param {string} burnTxHash\n     * @return {*} \n     * @memberof ERC1155\n     */\n    isWithdrawExited(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc1155Transfer\n        );\n    }\n\n    /**\n     * check if batch exit has been completed for a transaction hash\n     *\n     * @param {string} txHash\n     * @return {*} \n     * @memberof ERC1155\n     */\n    isWithdrawExitedMany(txHash: string) {\n        return this.isWithdrawn(\n            txHash, Log_Event_Signature.Erc1155BatchTransfer\n        );\n    }\n\n    /**\n     * transfer the required amount of a token to anothe user\n     *\n     * @param {POSERC1155TransferParam} param\n     * @param {ITransactionOption} [option]\n     * @return {*} \n     * @memberof ERC1155\n     */\n    transfer(param: POSERC1155TransferParam, option?: ITransactionOption) {\n        return this.transferERC1155(\n            param, option\n        );\n    }\n}","import { ERC20 } from \"./erc20\";\nimport { RootChainManager } from \"./root_chain_manager\";\nimport { BridgeClient } from \"../utils\";\nimport { IPOSClientConfig, IPOSContracts, ITransactionOption } from \"../interfaces\";\nimport { ExitUtil } from \"./exit_util\";\nimport { RootChain } from \"./root_chain\";\nimport { ERC721 } from \"./erc721\";\nimport { TYPE_AMOUNT } from \"../types\";\nimport { ERC1155 } from \"./erc1155\";\n\nexport * from \"./exit_util\";\nexport * from \"./root_chain_manager\";\nexport * from \"./root_chain\";\n\nexport class POSClient extends BridgeClient<IPOSClientConfig> {\n\n    rootChainManager: RootChainManager;\n\n    init(config: IPOSClientConfig) {\n        const client = this.client;\n\n        return client.init(config).then(_ => {\n            const mainPOSContracts = client.mainPOSContracts;\n            client.config = config = Object.assign(\n                {\n\n                    rootChainManager: mainPOSContracts.RootChainManagerProxy,\n                    rootChain: client.mainPlasmaContracts.RootChainProxy\n                } as IPOSClientConfig,\n                config\n            );\n\n            this.rootChainManager = new RootChainManager(\n                this.client,\n                config.rootChainManager,\n            );\n\n            const rootChain = new RootChain(\n                this.client,\n                config.rootChain,\n            );\n\n            this.exitUtil = new ExitUtil(\n                this.client,\n                rootChain\n            );\n\n            return this;\n        });\n    }\n\n    erc20(tokenAddress, isParent?: boolean) {\n        return new ERC20(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    erc721(tokenAddress, isParent?: boolean) {\n        return new ERC721(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    erc1155(tokenAddress, isParent?: boolean) {\n        return new ERC1155(\n            tokenAddress,\n            isParent,\n            this.client,\n            this.getContracts_.bind(this)\n        );\n    }\n\n    depositEther(amount: TYPE_AMOUNT, userAddress: string, option: ITransactionOption) {\n        return new ERC20(\n            '', true, this.client,\n            this.getContracts_.bind(this),\n        )['depositEther_'](amount, userAddress, option);\n    }\n\n    private getContracts_() {\n        return {\n            exitUtil: this.exitUtil,\n            rootChainManager: this.rootChainManager\n        } as IPOSContracts;\n    }\n}","import { POSClient } from \"./pos\";\nimport { use, utils } from \"./utils\";\n\nexport const defaultExport = {\n    utils: utils,\n    use,\n    POSClient,\n};","export const MAX_AMOUNT = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n","import { defaultExport } from \"./default\";\n\nexport * from \"./utils\";\nexport * from \"./enums\";\nexport * from \"./pos\";\nexport * from \"./interfaces\";\nexport * from \"./types\";\nexport * from \"./constant\";\nexport * from \"./abstracts\";\nexport * from \"./services\";\n\nexport default defaultExport;\n\n"],"sourceRoot":""}